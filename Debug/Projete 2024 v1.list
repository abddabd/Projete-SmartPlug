
Projete 2024 v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006134  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012e8  08006248  08006248  00016248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007530  08007530  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08007530  08007530  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007530  08007530  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007530  08007530  00017530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007534  08007534  00017534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08007538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  200001e8  08007720  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007b4  08007720  000207b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4fd  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b66  00000000  00000000  0002a70e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a28  00000000  00000000  0002c278  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00017fb4  00000000  00000000  0002cca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008a68  00000000  00000000  00044c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00089cb0  00000000  00000000  0004d6bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000d736c  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000958  00000000  00000000  000d73e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00003454  00000000  00000000  000d7d40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800622c 	.word	0x0800622c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800622c 	.word	0x0800622c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000a92:	2200      	movs	r2, #0
 8000a94:	2110      	movs	r1, #16
 8000a96:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <ST7789_WriteCommand+0x40>)
 8000a98:	f002 f88e 	bl	8002bb8 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	480a      	ldr	r0, [pc, #40]	; (8000acc <ST7789_WriteCommand+0x44>)
 8000aa2:	f002 f889 	bl	8002bb8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000aa6:	1df9      	adds	r1, r7, #7
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aac:	2201      	movs	r2, #1
 8000aae:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <ST7789_WriteCommand+0x48>)
 8000ab0:	f002 fdf0 	bl	8003694 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2110      	movs	r1, #16
 8000ab8:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <ST7789_WriteCommand+0x40>)
 8000aba:	f002 f87d 	bl	8002bb8 <HAL_GPIO_WritePin>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40010800 	.word	0x40010800
 8000acc:	40010c00 	.word	0x40010c00
 8000ad0:	200005b0 	.word	0x200005b0

08000ad4 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2110      	movs	r1, #16
 8000ae2:	4815      	ldr	r0, [pc, #84]	; (8000b38 <ST7789_WriteData+0x64>)
 8000ae4:	f002 f868 	bl	8002bb8 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2101      	movs	r1, #1
 8000aec:	4813      	ldr	r0, [pc, #76]	; (8000b3c <ST7789_WriteData+0x68>)
 8000aee:	f002 f863 	bl	8002bb8 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8000af2:	e015      	b.n	8000b20 <ST7789_WriteData+0x4c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000afa:	4293      	cmp	r3, r2
 8000afc:	bf28      	it	cs
 8000afe:	4613      	movcs	r3, r2
 8000b00:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000b02:	89fa      	ldrh	r2, [r7, #14]
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	6879      	ldr	r1, [r7, #4]
 8000b0a:	480d      	ldr	r0, [pc, #52]	; (8000b40 <ST7789_WriteData+0x6c>)
 8000b0c:	f002 fdc2 	bl	8003694 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 8000b10:	89fb      	ldrh	r3, [r7, #14]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8000b18:	89fb      	ldrh	r3, [r7, #14]
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1e6      	bne.n	8000af4 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 8000b26:	2201      	movs	r2, #1
 8000b28:	2110      	movs	r1, #16
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <ST7789_WriteData+0x64>)
 8000b2c:	f002 f844 	bl	8002bb8 <HAL_GPIO_WritePin>
}
 8000b30:	bf00      	nop
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40010800 	.word	0x40010800
 8000b3c:	40010c00 	.word	0x40010c00
 8000b40:	200005b0 	.word	0x200005b0

08000b44 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2110      	movs	r1, #16
 8000b52:	480c      	ldr	r0, [pc, #48]	; (8000b84 <ST7789_WriteSmallData+0x40>)
 8000b54:	f002 f830 	bl	8002bb8 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	480a      	ldr	r0, [pc, #40]	; (8000b88 <ST7789_WriteSmallData+0x44>)
 8000b5e:	f002 f82b 	bl	8002bb8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000b62:	1df9      	adds	r1, r7, #7
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4808      	ldr	r0, [pc, #32]	; (8000b8c <ST7789_WriteSmallData+0x48>)
 8000b6c:	f002 fd92 	bl	8003694 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000b70:	2201      	movs	r2, #1
 8000b72:	2110      	movs	r1, #16
 8000b74:	4803      	ldr	r0, [pc, #12]	; (8000b84 <ST7789_WriteSmallData+0x40>)
 8000b76:	f002 f81f 	bl	8002bb8 <HAL_GPIO_WritePin>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40010800 	.word	0x40010800
 8000b88:	40010c00 	.word	0x40010c00
 8000b8c:	200005b0 	.word	0x200005b0

08000b90 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8000b9a:	2036      	movs	r0, #54	; 0x36
 8000b9c:	f7ff ff74 	bl	8000a88 <ST7789_WriteCommand>
	switch (m) {
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d81a      	bhi.n	8000bdc <ST7789_SetRotation+0x4c>
 8000ba6:	a201      	add	r2, pc, #4	; (adr r2, 8000bac <ST7789_SetRotation+0x1c>)
 8000ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bac:	08000bbd 	.word	0x08000bbd
 8000bb0:	08000bc5 	.word	0x08000bc5
 8000bb4:	08000bcd 	.word	0x08000bcd
 8000bb8:	08000bd5 	.word	0x08000bd5
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8000bbc:	20c0      	movs	r0, #192	; 0xc0
 8000bbe:	f7ff ffc1 	bl	8000b44 <ST7789_WriteSmallData>
		break;
 8000bc2:	e00c      	b.n	8000bde <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000bc4:	20a0      	movs	r0, #160	; 0xa0
 8000bc6:	f7ff ffbd 	bl	8000b44 <ST7789_WriteSmallData>
		break;
 8000bca:	e008      	b.n	8000bde <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f7ff ffb9 	bl	8000b44 <ST7789_WriteSmallData>
		break;
 8000bd2:	e004      	b.n	8000bde <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000bd4:	2060      	movs	r0, #96	; 0x60
 8000bd6:	f7ff ffb5 	bl	8000b44 <ST7789_WriteSmallData>
		break;
 8000bda:	e000      	b.n	8000bde <ST7789_SetRotation+0x4e>
	default:
		break;
 8000bdc:	bf00      	nop
	}
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop

08000be8 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b087      	sub	sp, #28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4623      	mov	r3, r4
 8000bf8:	80fb      	strh	r3, [r7, #6]
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	80bb      	strh	r3, [r7, #4]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	807b      	strh	r3, [r7, #2]
 8000c02:	4613      	mov	r3, r2
 8000c04:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000c06:	2200      	movs	r2, #0
 8000c08:	2110      	movs	r1, #16
 8000c0a:	4824      	ldr	r0, [pc, #144]	; (8000c9c <ST7789_SetAddressWindow+0xb4>)
 8000c0c:	f001 ffd4 	bl	8002bb8 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8000c10:	88fb      	ldrh	r3, [r7, #6]
 8000c12:	82fb      	strh	r3, [r7, #22]
 8000c14:	887b      	ldrh	r3, [r7, #2]
 8000c16:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8000c18:	88bb      	ldrh	r3, [r7, #4]
 8000c1a:	827b      	strh	r3, [r7, #18]
 8000c1c:	883b      	ldrh	r3, [r7, #0]
 8000c1e:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8000c20:	202a      	movs	r0, #42	; 0x2a
 8000c22:	f7ff ff31 	bl	8000a88 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8000c26:	8afb      	ldrh	r3, [r7, #22]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	733b      	strb	r3, [r7, #12]
 8000c30:	8afb      	ldrh	r3, [r7, #22]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	737b      	strb	r3, [r7, #13]
 8000c36:	8abb      	ldrh	r3, [r7, #20]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	73bb      	strb	r3, [r7, #14]
 8000c40:	8abb      	ldrh	r3, [r7, #20]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	2104      	movs	r1, #4
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff41 	bl	8000ad4 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8000c52:	202b      	movs	r0, #43	; 0x2b
 8000c54:	f7ff ff18 	bl	8000a88 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8000c58:	8a7b      	ldrh	r3, [r7, #18]
 8000c5a:	0a1b      	lsrs	r3, r3, #8
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	723b      	strb	r3, [r7, #8]
 8000c62:	8a7b      	ldrh	r3, [r7, #18]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	727b      	strb	r3, [r7, #9]
 8000c68:	8a3b      	ldrh	r3, [r7, #16]
 8000c6a:	0a1b      	lsrs	r3, r3, #8
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	72bb      	strb	r3, [r7, #10]
 8000c72:	8a3b      	ldrh	r3, [r7, #16]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	2104      	movs	r1, #4
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff28 	bl	8000ad4 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000c84:	202c      	movs	r0, #44	; 0x2c
 8000c86:	f7ff feff 	bl	8000a88 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2110      	movs	r1, #16
 8000c8e:	4803      	ldr	r0, [pc, #12]	; (8000c9c <ST7789_SetAddressWindow+0xb4>)
 8000c90:	f001 ff92 	bl	8002bb8 <HAL_GPIO_WritePin>
}
 8000c94:	bf00      	nop
 8000c96:	371c      	adds	r7, #28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd90      	pop	{r4, r7, pc}
 8000c9c:	40010800 	.word	0x40010800

08000ca0 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b08b      	sub	sp, #44	; 0x2c
 8000ca4:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(10);
 8000ca6:	200a      	movs	r0, #10
 8000ca8:	f001 fa00 	bl	80020ac <HAL_Delay>
    ST7789_RST_Clr();
 8000cac:	2200      	movs	r2, #0
 8000cae:	2102      	movs	r1, #2
 8000cb0:	4846      	ldr	r0, [pc, #280]	; (8000dcc <ST7789_Init+0x12c>)
 8000cb2:	f001 ff81 	bl	8002bb8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000cb6:	200a      	movs	r0, #10
 8000cb8:	f001 f9f8 	bl	80020ac <HAL_Delay>
    ST7789_RST_Set();
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	4842      	ldr	r0, [pc, #264]	; (8000dcc <ST7789_Init+0x12c>)
 8000cc2:	f001 ff79 	bl	8002bb8 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000cc6:	2014      	movs	r0, #20
 8000cc8:	f001 f9f0 	bl	80020ac <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8000ccc:	203a      	movs	r0, #58	; 0x3a
 8000cce:	f7ff fedb 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8000cd2:	2055      	movs	r0, #85	; 0x55
 8000cd4:	f7ff ff36 	bl	8000b44 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8000cd8:	20b2      	movs	r0, #178	; 0xb2
 8000cda:	f7ff fed5 	bl	8000a88 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8000cde:	4a3c      	ldr	r2, [pc, #240]	; (8000dd0 <ST7789_Init+0x130>)
 8000ce0:	f107 0320 	add.w	r3, r7, #32
 8000ce4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ce8:	6018      	str	r0, [r3, #0]
 8000cea:	3304      	adds	r3, #4
 8000cec:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8000cee:	f107 0320 	add.w	r3, r7, #32
 8000cf2:	2105      	movs	r1, #5
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff feed 	bl	8000ad4 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8000cfa:	2002      	movs	r0, #2
 8000cfc:	f7ff ff48 	bl	8000b90 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8000d00:	20b7      	movs	r0, #183	; 0xb7
 8000d02:	f7ff fec1 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8000d06:	2035      	movs	r0, #53	; 0x35
 8000d08:	f7ff ff1c 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8000d0c:	20bb      	movs	r0, #187	; 0xbb
 8000d0e:	f7ff febb 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8000d12:	2019      	movs	r0, #25
 8000d14:	f7ff ff16 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8000d18:	20c0      	movs	r0, #192	; 0xc0
 8000d1a:	f7ff feb5 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8000d1e:	202c      	movs	r0, #44	; 0x2c
 8000d20:	f7ff ff10 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8000d24:	20c2      	movs	r0, #194	; 0xc2
 8000d26:	f7ff feaf 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff ff0a 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8000d30:	20c3      	movs	r0, #195	; 0xc3
 8000d32:	f7ff fea9 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8000d36:	2012      	movs	r0, #18
 8000d38:	f7ff ff04 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8000d3c:	20c4      	movs	r0, #196	; 0xc4
 8000d3e:	f7ff fea3 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8000d42:	2020      	movs	r0, #32
 8000d44:	f7ff fefe 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8000d48:	20c6      	movs	r0, #198	; 0xc6
 8000d4a:	f7ff fe9d 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8000d4e:	200f      	movs	r0, #15
 8000d50:	f7ff fef8 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8000d54:	20d0      	movs	r0, #208	; 0xd0
 8000d56:	f7ff fe97 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8000d5a:	20a4      	movs	r0, #164	; 0xa4
 8000d5c:	f7ff fef2 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000d60:	20a1      	movs	r0, #161	; 0xa1
 8000d62:	f7ff feef 	bl	8000b44 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8000d66:	20e0      	movs	r0, #224	; 0xe0
 8000d68:	f7ff fe8e 	bl	8000a88 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <ST7789_Init+0x134>)
 8000d6e:	f107 0410 	add.w	r4, r7, #16
 8000d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d74:	c407      	stmia	r4!, {r0, r1, r2}
 8000d76:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	210e      	movs	r1, #14
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fea8 	bl	8000ad4 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8000d84:	20e1      	movs	r0, #225	; 0xe1
 8000d86:	f7ff fe7f 	bl	8000a88 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <ST7789_Init+0x138>)
 8000d8c:	463c      	mov	r4, r7
 8000d8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d90:	c407      	stmia	r4!, {r0, r1, r2}
 8000d92:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000d94:	463b      	mov	r3, r7
 8000d96:	210e      	movs	r1, #14
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe9b 	bl	8000ad4 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8000d9e:	2021      	movs	r0, #33	; 0x21
 8000da0:	f7ff fe72 	bl	8000a88 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000da4:	2011      	movs	r0, #17
 8000da6:	f7ff fe6f 	bl	8000a88 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8000daa:	2013      	movs	r0, #19
 8000dac:	f7ff fe6c 	bl	8000a88 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8000db0:	2029      	movs	r0, #41	; 0x29
 8000db2:	f7ff fe69 	bl	8000a88 <ST7789_WriteCommand>

	HAL_Delay(50);
 8000db6:	2032      	movs	r0, #50	; 0x32
 8000db8:	f001 f978 	bl	80020ac <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f000 f80d 	bl	8000ddc <ST7789_Fill_Color>
}
 8000dc2:	bf00      	nop
 8000dc4:	372c      	adds	r7, #44	; 0x2c
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd90      	pop	{r4, r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40010c00 	.word	0x40010c00
 8000dd0:	08006248 	.word	0x08006248
 8000dd4:	08006250 	.word	0x08006250
 8000dd8:	08006260 	.word	0x08006260

08000ddc <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8000de6:	23ef      	movs	r3, #239	; 0xef
 8000de8:	22ef      	movs	r2, #239	; 0xef
 8000dea:	2100      	movs	r1, #0
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff fefb 	bl	8000be8 <ST7789_SetAddressWindow>
	ST7789_Select();
 8000df2:	2200      	movs	r2, #0
 8000df4:	2110      	movs	r1, #16
 8000df6:	4816      	ldr	r0, [pc, #88]	; (8000e50 <ST7789_Fill_Color+0x74>)
 8000df8:	f001 fede 	bl	8002bb8 <HAL_GPIO_WritePin>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	81fb      	strh	r3, [r7, #14]
 8000e00:	e019      	b.n	8000e36 <ST7789_Fill_Color+0x5a>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8000e02:	2300      	movs	r3, #0
 8000e04:	81bb      	strh	r3, [r7, #12]
 8000e06:	e010      	b.n	8000e2a <ST7789_Fill_Color+0x4e>
					uint8_t data[] = {color >> 8, color & 0xFF};
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	0a1b      	lsrs	r3, r3, #8
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	723b      	strb	r3, [r7, #8]
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fe58 	bl	8000ad4 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8000e24:	89bb      	ldrh	r3, [r7, #12]
 8000e26:	3301      	adds	r3, #1
 8000e28:	81bb      	strh	r3, [r7, #12]
 8000e2a:	89bb      	ldrh	r3, [r7, #12]
 8000e2c:	2bef      	cmp	r3, #239	; 0xef
 8000e2e:	d9eb      	bls.n	8000e08 <ST7789_Fill_Color+0x2c>
		for (i = 0; i < ST7789_WIDTH; i++)
 8000e30:	89fb      	ldrh	r3, [r7, #14]
 8000e32:	3301      	adds	r3, #1
 8000e34:	81fb      	strh	r3, [r7, #14]
 8000e36:	89fb      	ldrh	r3, [r7, #14]
 8000e38:	2bef      	cmp	r3, #239	; 0xef
 8000e3a:	d9e2      	bls.n	8000e02 <ST7789_Fill_Color+0x26>
				}
	#endif
	ST7789_UnSelect();
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2110      	movs	r1, #16
 8000e40:	4803      	ldr	r0, [pc, #12]	; (8000e50 <ST7789_Fill_Color+0x74>)
 8000e42:	f001 feb9 	bl	8002bb8 <HAL_GPIO_WritePin>
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40010800 	.word	0x40010800

08000e54 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000e54:	b082      	sub	sp, #8
 8000e56:	b590      	push	{r4, r7, lr}
 8000e58:	b089      	sub	sp, #36	; 0x24
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80fb      	strh	r3, [r7, #6]
 8000e62:	460b      	mov	r3, r1
 8000e64:	80bb      	strh	r3, [r7, #4]
 8000e66:	4613      	mov	r3, r2
 8000e68:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2110      	movs	r1, #16
 8000e6e:	4838      	ldr	r0, [pc, #224]	; (8000f50 <ST7789_WriteChar+0xfc>)
 8000e70:	f001 fea2 	bl	8002bb8 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8000e74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	3b01      	subs	r3, #1
 8000e82:	b29c      	uxth	r4, r3
 8000e84:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	88bb      	ldrh	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	3b01      	subs	r3, #1
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	88b9      	ldrh	r1, [r7, #4]
 8000e96:	88f8      	ldrh	r0, [r7, #6]
 8000e98:	4622      	mov	r2, r4
 8000e9a:	f7ff fea5 	bl	8000be8 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
 8000ea2:	e043      	b.n	8000f2c <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 8000ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ea6:	78fb      	ldrb	r3, [r7, #3]
 8000ea8:	3b20      	subs	r3, #32
 8000eaa:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000eae:	fb01 f303 	mul.w	r3, r1, r3
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	440b      	add	r3, r1
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	4413      	add	r3, r2
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	e029      	b.n	8000f1a <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00e      	beq.n	8000ef4 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8000ed6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	743b      	strb	r3, [r7, #16]
 8000ee0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	2102      	movs	r1, #2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fdf1 	bl	8000ad4 <ST7789_WriteData>
 8000ef2:	e00f      	b.n	8000f14 <ST7789_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8000ef4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	733b      	strb	r3, [r7, #12]
 8000f00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fde0 	bl	8000ad4 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	3301      	adds	r3, #1
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f1e:	461a      	mov	r2, r3
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d3cf      	bcc.n	8000ec6 <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	61fb      	str	r3, [r7, #28]
 8000f2c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000f30:	461a      	mov	r2, r3
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d3b5      	bcc.n	8000ea4 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2110      	movs	r1, #16
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <ST7789_WriteChar+0xfc>)
 8000f3e:	f001 fe3b 	bl	8002bb8 <HAL_GPIO_WritePin>
}
 8000f42:	bf00      	nop
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000f4c:	b002      	add	sp, #8
 8000f4e:	4770      	bx	lr
 8000f50:	40010800 	.word	0x40010800

08000f54 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000f54:	b082      	sub	sp, #8
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af04      	add	r7, sp, #16
 8000f5c:	603a      	str	r2, [r7, #0]
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	4603      	mov	r3, r0
 8000f62:	80fb      	strh	r3, [r7, #6]
 8000f64:	460b      	mov	r3, r1
 8000f66:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2110      	movs	r1, #16
 8000f6c:	4821      	ldr	r0, [pc, #132]	; (8000ff4 <ST7789_WriteString+0xa0>)
 8000f6e:	f001 fe23 	bl	8002bb8 <HAL_GPIO_WritePin>
	while (*str) {
 8000f72:	e02d      	b.n	8000fd0 <ST7789_WriteString+0x7c>
		if (x + font.width >= ST7789_WIDTH) {
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	7d3a      	ldrb	r2, [r7, #20]
 8000f78:	4413      	add	r3, r2
 8000f7a:	2bef      	cmp	r3, #239	; 0xef
 8000f7c:	dd13      	ble.n	8000fa6 <ST7789_WriteString+0x52>
			x = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8000f82:	7d7b      	ldrb	r3, [r7, #21]
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	88bb      	ldrh	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8000f8c:	88bb      	ldrh	r3, [r7, #4]
 8000f8e:	7d7a      	ldrb	r2, [r7, #21]
 8000f90:	4413      	add	r3, r2
 8000f92:	2bef      	cmp	r3, #239	; 0xef
 8000f94:	dc21      	bgt.n	8000fda <ST7789_WriteString+0x86>
				break;
			}

			if (*str == ' ') {
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b20      	cmp	r3, #32
 8000f9c:	d103      	bne.n	8000fa6 <ST7789_WriteString+0x52>
				// skip spaces in the beginning of the new line
				str++;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	603b      	str	r3, [r7, #0]
				continue;
 8000fa4:	e014      	b.n	8000fd0 <ST7789_WriteString+0x7c>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	781a      	ldrb	r2, [r3, #0]
 8000faa:	88b9      	ldrh	r1, [r7, #4]
 8000fac:	88f8      	ldrh	r0, [r7, #6]
 8000fae:	8c3b      	ldrh	r3, [r7, #32]
 8000fb0:	9302      	str	r3, [sp, #8]
 8000fb2:	8bbb      	ldrh	r3, [r7, #28]
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f7ff ff4a 	bl	8000e54 <ST7789_WriteChar>
		x += font.width;
 8000fc0:	7d3b      	ldrb	r3, [r7, #20]
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	80fb      	strh	r3, [r7, #6]
		str++;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1cd      	bne.n	8000f74 <ST7789_WriteString+0x20>
 8000fd8:	e000      	b.n	8000fdc <ST7789_WriteString+0x88>
				break;
 8000fda:	bf00      	nop
	}
	ST7789_UnSelect();
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2110      	movs	r1, #16
 8000fe0:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <ST7789_WriteString+0xa0>)
 8000fe2:	f001 fde9 	bl	8002bb8 <HAL_GPIO_WritePin>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ff0:	b002      	add	sp, #8
 8000ff2:	4770      	bx	lr
 8000ff4:	40010800 	.word	0x40010800

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffe:	f000 fff3 	bl	8001fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001002:	f000 fbbb 	bl	800177c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001006:	f000 fced 	bl	80019e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800100a:	f000 fc8b 	bl	8001924 <MX_SPI1_Init>
  MX_ADC1_Init();
 800100e:	f000 fc0d 	bl	800182c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001012:	f000 fc49 	bl	80018a8 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8001016:	f000 fcbb 	bl	8001990 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, onOff);
  relay_control(onOff);
 800101a:	4ba1      	ldr	r3, [pc, #644]	; (80012a0 <main+0x2a8>)
 800101c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001020:	4618      	mov	r0, r3
 8001022:	f000 fd51 	bl	8001ac8 <relay_control>
  ST7789_Init();
 8001026:	f7ff fe3b 	bl	8000ca0 <ST7789_Init>

  ST7789_Fill_Color(WHITE);
 800102a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800102e:	f7ff fed5 	bl	8000ddc <ST7789_Fill_Color>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001032:	2201      	movs	r2, #1
 8001034:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001038:	489a      	ldr	r0, [pc, #616]	; (80012a4 <main+0x2ac>)
 800103a:	f001 fdbd 	bl	8002bb8 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800103e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001042:	f001 f833 	bl	80020ac <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800104c:	4895      	ldr	r0, [pc, #596]	; (80012a4 <main+0x2ac>)
 800104e:	f001 fdb3 	bl	8002bb8 <HAL_GPIO_WritePin>
  HAL_Delay(12500);
 8001052:	f243 00d4 	movw	r0, #12500	; 0x30d4
 8001056:	f001 f829 	bl	80020ac <HAL_Delay>

  sprintf(TxData, "ATE0\r\n");
 800105a:	4b93      	ldr	r3, [pc, #588]	; (80012a8 <main+0x2b0>)
 800105c:	4a93      	ldr	r2, [pc, #588]	; (80012ac <main+0x2b4>)
 800105e:	6810      	ldr	r0, [r2, #0]
 8001060:	6018      	str	r0, [r3, #0]
 8001062:	8891      	ldrh	r1, [r2, #4]
 8001064:	7992      	ldrb	r2, [r2, #6]
 8001066:	8099      	strh	r1, [r3, #4]
 8001068:	719a      	strb	r2, [r3, #6]
  	    HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 800106a:	488f      	ldr	r0, [pc, #572]	; (80012a8 <main+0x2b0>)
 800106c:	f7ff f870 	bl	8000150 <strlen>
 8001070:	4603      	mov	r3, r0
 8001072:	b29a      	uxth	r2, r3
 8001074:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001078:	498b      	ldr	r1, [pc, #556]	; (80012a8 <main+0x2b0>)
 800107a:	488d      	ldr	r0, [pc, #564]	; (80012b0 <main+0x2b8>)
 800107c:	f002 fd39 	bl	8003af2 <HAL_UART_Transmit>
		HAL_Delay(2000);
 8001080:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001084:	f001 f812 	bl	80020ac <HAL_Delay>
  sprintf(TxData, "AT+GSMBUSY=1\r\n");
 8001088:	4a87      	ldr	r2, [pc, #540]	; (80012a8 <main+0x2b0>)
 800108a:	4b8a      	ldr	r3, [pc, #552]	; (80012b4 <main+0x2bc>)
 800108c:	4614      	mov	r4, r2
 800108e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001090:	6020      	str	r0, [r4, #0]
 8001092:	6061      	str	r1, [r4, #4]
 8001094:	60a2      	str	r2, [r4, #8]
 8001096:	881a      	ldrh	r2, [r3, #0]
 8001098:	789b      	ldrb	r3, [r3, #2]
 800109a:	81a2      	strh	r2, [r4, #12]
 800109c:	73a3      	strb	r3, [r4, #14]
      	HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 800109e:	4882      	ldr	r0, [pc, #520]	; (80012a8 <main+0x2b0>)
 80010a0:	f7ff f856 	bl	8000150 <strlen>
 80010a4:	4603      	mov	r3, r0
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ac:	497e      	ldr	r1, [pc, #504]	; (80012a8 <main+0x2b0>)
 80010ae:	4880      	ldr	r0, [pc, #512]	; (80012b0 <main+0x2b8>)
 80010b0:	f002 fd1f 	bl	8003af2 <HAL_UART_Transmit>
      	HAL_Delay(2000);
 80010b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010b8:	f000 fff8 	bl	80020ac <HAL_Delay>
  sprintf(TxData, "AT+CGATT=1\r\n");
 80010bc:	4a7a      	ldr	r2, [pc, #488]	; (80012a8 <main+0x2b0>)
 80010be:	4b7e      	ldr	r3, [pc, #504]	; (80012b8 <main+0x2c0>)
 80010c0:	4614      	mov	r4, r2
 80010c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80010c4:	6020      	str	r0, [r4, #0]
 80010c6:	6061      	str	r1, [r4, #4]
 80010c8:	60a2      	str	r2, [r4, #8]
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	7323      	strb	r3, [r4, #12]
    	HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 80010ce:	4876      	ldr	r0, [pc, #472]	; (80012a8 <main+0x2b0>)
 80010d0:	f7ff f83e 	bl	8000150 <strlen>
 80010d4:	4603      	mov	r3, r0
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010dc:	4972      	ldr	r1, [pc, #456]	; (80012a8 <main+0x2b0>)
 80010de:	4874      	ldr	r0, [pc, #464]	; (80012b0 <main+0x2b8>)
 80010e0:	f002 fd07 	bl	8003af2 <HAL_UART_Transmit>
    	HAL_Delay(2000);
 80010e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010e8:	f000 ffe0 	bl	80020ac <HAL_Delay>
  sprintf(TxData, "AT+CIPMUX=0\r\n");
 80010ec:	4a6e      	ldr	r2, [pc, #440]	; (80012a8 <main+0x2b0>)
 80010ee:	4b73      	ldr	r3, [pc, #460]	; (80012bc <main+0x2c4>)
 80010f0:	4614      	mov	r4, r2
 80010f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80010f4:	6020      	str	r0, [r4, #0]
 80010f6:	6061      	str	r1, [r4, #4]
 80010f8:	60a2      	str	r2, [r4, #8]
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	81a3      	strh	r3, [r4, #12]
  	  	HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 80010fe:	486a      	ldr	r0, [pc, #424]	; (80012a8 <main+0x2b0>)
 8001100:	f7ff f826 	bl	8000150 <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	b29a      	uxth	r2, r3
 8001108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110c:	4966      	ldr	r1, [pc, #408]	; (80012a8 <main+0x2b0>)
 800110e:	4868      	ldr	r0, [pc, #416]	; (80012b0 <main+0x2b8>)
 8001110:	f002 fcef 	bl	8003af2 <HAL_UART_Transmit>
    	HAL_Delay(2000);
 8001114:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001118:	f000 ffc8 	bl	80020ac <HAL_Delay>
  sprintf(TxData, "AT+CSTT=\"zap.vivo.com.br\",\"vivo\",\"vivo\"\r\n");
 800111c:	4b62      	ldr	r3, [pc, #392]	; (80012a8 <main+0x2b0>)
 800111e:	4a68      	ldr	r2, [pc, #416]	; (80012c0 <main+0x2c8>)
 8001120:	4614      	mov	r4, r2
 8001122:	469c      	mov	ip, r3
 8001124:	f104 0e20 	add.w	lr, r4, #32
 8001128:	4665      	mov	r5, ip
 800112a:	4626      	mov	r6, r4
 800112c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800112e:	6028      	str	r0, [r5, #0]
 8001130:	6069      	str	r1, [r5, #4]
 8001132:	60aa      	str	r2, [r5, #8]
 8001134:	60eb      	str	r3, [r5, #12]
 8001136:	3410      	adds	r4, #16
 8001138:	f10c 0c10 	add.w	ip, ip, #16
 800113c:	4574      	cmp	r4, lr
 800113e:	d1f3      	bne.n	8001128 <main+0x130>
 8001140:	4662      	mov	r2, ip
 8001142:	4623      	mov	r3, r4
 8001144:	cb03      	ldmia	r3!, {r0, r1}
 8001146:	6010      	str	r0, [r2, #0]
 8001148:	6051      	str	r1, [r2, #4]
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	8113      	strh	r3, [r2, #8]
        HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 800114e:	4856      	ldr	r0, [pc, #344]	; (80012a8 <main+0x2b0>)
 8001150:	f7fe fffe 	bl	8000150 <strlen>
 8001154:	4603      	mov	r3, r0
 8001156:	b29a      	uxth	r2, r3
 8001158:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115c:	4952      	ldr	r1, [pc, #328]	; (80012a8 <main+0x2b0>)
 800115e:	4854      	ldr	r0, [pc, #336]	; (80012b0 <main+0x2b8>)
 8001160:	f002 fcc7 	bl	8003af2 <HAL_UART_Transmit>
        HAL_Delay(5000);
 8001164:	f241 3088 	movw	r0, #5000	; 0x1388
 8001168:	f000 ffa0 	bl	80020ac <HAL_Delay>
  sprintf(TxData, "AT+CIICR\r\n");
 800116c:	4a4e      	ldr	r2, [pc, #312]	; (80012a8 <main+0x2b0>)
 800116e:	4b55      	ldr	r3, [pc, #340]	; (80012c4 <main+0x2cc>)
 8001170:	cb03      	ldmia	r3!, {r0, r1}
 8001172:	6010      	str	r0, [r2, #0]
 8001174:	6051      	str	r1, [r2, #4]
 8001176:	8819      	ldrh	r1, [r3, #0]
 8001178:	789b      	ldrb	r3, [r3, #2]
 800117a:	8111      	strh	r1, [r2, #8]
 800117c:	7293      	strb	r3, [r2, #10]
        HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 800117e:	484a      	ldr	r0, [pc, #296]	; (80012a8 <main+0x2b0>)
 8001180:	f7fe ffe6 	bl	8000150 <strlen>
 8001184:	4603      	mov	r3, r0
 8001186:	b29a      	uxth	r2, r3
 8001188:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118c:	4946      	ldr	r1, [pc, #280]	; (80012a8 <main+0x2b0>)
 800118e:	4848      	ldr	r0, [pc, #288]	; (80012b0 <main+0x2b8>)
 8001190:	f002 fcaf 	bl	8003af2 <HAL_UART_Transmit>
        HAL_Delay(2000);
 8001194:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001198:	f000 ff88 	bl	80020ac <HAL_Delay>
  sprintf(TxData, "AT+CIFSR\r\n");
 800119c:	4a42      	ldr	r2, [pc, #264]	; (80012a8 <main+0x2b0>)
 800119e:	4b4a      	ldr	r3, [pc, #296]	; (80012c8 <main+0x2d0>)
 80011a0:	cb03      	ldmia	r3!, {r0, r1}
 80011a2:	6010      	str	r0, [r2, #0]
 80011a4:	6051      	str	r1, [r2, #4]
 80011a6:	8819      	ldrh	r1, [r3, #0]
 80011a8:	789b      	ldrb	r3, [r3, #2]
 80011aa:	8111      	strh	r1, [r2, #8]
 80011ac:	7293      	strb	r3, [r2, #10]
        HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 80011ae:	483e      	ldr	r0, [pc, #248]	; (80012a8 <main+0x2b0>)
 80011b0:	f7fe ffce 	bl	8000150 <strlen>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011bc:	493a      	ldr	r1, [pc, #232]	; (80012a8 <main+0x2b0>)
 80011be:	483c      	ldr	r0, [pc, #240]	; (80012b0 <main+0x2b8>)
 80011c0:	f002 fc97 	bl	8003af2 <HAL_UART_Transmit>
        HAL_Delay(2000);
 80011c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011c8:	f000 ff70 	bl	80020ac <HAL_Delay>
  sprintf(TxData, "AT+CIPSHUT\r\n");
 80011cc:	4a36      	ldr	r2, [pc, #216]	; (80012a8 <main+0x2b0>)
 80011ce:	4b3f      	ldr	r3, [pc, #252]	; (80012cc <main+0x2d4>)
 80011d0:	4614      	mov	r4, r2
 80011d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80011d4:	6020      	str	r0, [r4, #0]
 80011d6:	6061      	str	r1, [r4, #4]
 80011d8:	60a2      	str	r2, [r4, #8]
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	7323      	strb	r3, [r4, #12]
        HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 80011de:	4832      	ldr	r0, [pc, #200]	; (80012a8 <main+0x2b0>)
 80011e0:	f7fe ffb6 	bl	8000150 <strlen>
 80011e4:	4603      	mov	r3, r0
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ec:	492e      	ldr	r1, [pc, #184]	; (80012a8 <main+0x2b0>)
 80011ee:	4830      	ldr	r0, [pc, #192]	; (80012b0 <main+0x2b8>)
 80011f0:	f002 fc7f 	bl	8003af2 <HAL_UART_Transmit>
        HAL_Delay(2000);
 80011f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011f8:	f000 ff58 	bl	80020ac <HAL_Delay>

  sprintf(TxData, "AT+CIPSTART=\"TCP\",\"industrial.api.ubidots.com\",\"80\"\r\n");
 80011fc:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <main+0x2b0>)
 80011fe:	4a34      	ldr	r2, [pc, #208]	; (80012d0 <main+0x2d8>)
 8001200:	4614      	mov	r4, r2
 8001202:	469c      	mov	ip, r3
 8001204:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001208:	4665      	mov	r5, ip
 800120a:	4626      	mov	r6, r4
 800120c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800120e:	6028      	str	r0, [r5, #0]
 8001210:	6069      	str	r1, [r5, #4]
 8001212:	60aa      	str	r2, [r5, #8]
 8001214:	60eb      	str	r3, [r5, #12]
 8001216:	3410      	adds	r4, #16
 8001218:	f10c 0c10 	add.w	ip, ip, #16
 800121c:	4574      	cmp	r4, lr
 800121e:	d1f3      	bne.n	8001208 <main+0x210>
 8001220:	4663      	mov	r3, ip
 8001222:	4622      	mov	r2, r4
 8001224:	6810      	ldr	r0, [r2, #0]
 8001226:	6018      	str	r0, [r3, #0]
 8001228:	8892      	ldrh	r2, [r2, #4]
 800122a:	809a      	strh	r2, [r3, #4]
        HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 800122c:	481e      	ldr	r0, [pc, #120]	; (80012a8 <main+0x2b0>)
 800122e:	f7fe ff8f 	bl	8000150 <strlen>
 8001232:	4603      	mov	r3, r0
 8001234:	b29a      	uxth	r2, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	491b      	ldr	r1, [pc, #108]	; (80012a8 <main+0x2b0>)
 800123c:	481c      	ldr	r0, [pc, #112]	; (80012b0 <main+0x2b8>)
 800123e:	f002 fc58 	bl	8003af2 <HAL_UART_Transmit>
        HAL_Delay(10000);
 8001242:	f242 7010 	movw	r0, #10000	; 0x2710
 8001246:	f000 ff31 	bl	80020ac <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  currentVMAX = -999999;
 800124a:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <main+0x2dc>)
 800124c:	a410      	add	r4, pc, #64	; (adr r4, 8001290 <main+0x298>)
 800124e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001252:	e9c2 3400 	strd	r3, r4, [r2]
	  currentVMIN = 999999;
 8001256:	4a20      	ldr	r2, [pc, #128]	; (80012d8 <main+0x2e0>)
 8001258:	a40f      	add	r4, pc, #60	; (adr r4, 8001298 <main+0x2a0>)
 800125a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800125e:	e9c2 3400 	strd	r3, r4, [r2]
	  voltageVMAX = -999999;
 8001262:	4a1e      	ldr	r2, [pc, #120]	; (80012dc <main+0x2e4>)
 8001264:	a40a      	add	r4, pc, #40	; (adr r4, 8001290 <main+0x298>)
 8001266:	e9d4 3400 	ldrd	r3, r4, [r4]
 800126a:	e9c2 3400 	strd	r3, r4, [r2]
	  voltageVMIN = 999999;
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <main+0x2e8>)
 8001270:	a409      	add	r4, pc, #36	; (adr r4, 8001298 <main+0x2a0>)
 8001272:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001276:	e9c2 3400 	strd	r3, r4, [r2]
	 // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, onOff);
	  relay_control(onOff);
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <main+0x2a8>)
 800127c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001280:	4618      	mov	r0, r3
 8001282:	f000 fc21 	bl	8001ac8 <relay_control>

	for (i = 0; i < 400; i++) {
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <main+0x2ec>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	e0f1      	b.n	8001472 <main+0x47a>
 800128e:	bf00      	nop
 8001290:	00000000 	.word	0x00000000
 8001294:	c12e847e 	.word	0xc12e847e
 8001298:	00000000 	.word	0x00000000
 800129c:	412e847e 	.word	0x412e847e
 80012a0:	20000008 	.word	0x20000008
 80012a4:	40010800 	.word	0x40010800
 80012a8:	200004bc 	.word	0x200004bc
 80012ac:	080062e0 	.word	0x080062e0
 80012b0:	20000430 	.word	0x20000430
 80012b4:	080062e8 	.word	0x080062e8
 80012b8:	080062f8 	.word	0x080062f8
 80012bc:	08006308 	.word	0x08006308
 80012c0:	08006318 	.word	0x08006318
 80012c4:	08006344 	.word	0x08006344
 80012c8:	08006350 	.word	0x08006350
 80012cc:	0800635c 	.word	0x0800635c
 80012d0:	0800636c 	.word	0x0800636c
 80012d4:	20000420 	.word	0x20000420
 80012d8:	20000740 	.word	0x20000740
 80012dc:	200003e0 	.word	0x200003e0
 80012e0:	20000738 	.word	0x20000738
 80012e4:	200003e8 	.word	0x200003e8

	//Corrente
		HAL_ADC_Start(&hadc1);
 80012e8:	48a7      	ldr	r0, [pc, #668]	; (8001588 <main+0x590>)
 80012ea:	f000 ffd9 	bl	80022a0 <HAL_ADC_Start>
		rawCurrentInput = HAL_ADC_GetValue(&hadc1);
 80012ee:	48a6      	ldr	r0, [pc, #664]	; (8001588 <main+0x590>)
 80012f0:	f001 f884 	bl	80023fc <HAL_ADC_GetValue>
 80012f4:	4602      	mov	r2, r0
 80012f6:	4ba5      	ldr	r3, [pc, #660]	; (800158c <main+0x594>)
 80012f8:	601a      	str	r2, [r3, #0]
		currentV = ((double)rawCurrentInput/4096)*3.3;
 80012fa:	4ba4      	ldr	r3, [pc, #656]	; (800158c <main+0x594>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f870 	bl	80003e4 <__aeabi_ui2d>
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	4ba1      	ldr	r3, [pc, #644]	; (8001590 <main+0x598>)
 800130a:	f7ff fa0f 	bl	800072c <__aeabi_ddiv>
 800130e:	4603      	mov	r3, r0
 8001310:	460c      	mov	r4, r1
 8001312:	4618      	mov	r0, r3
 8001314:	4621      	mov	r1, r4
 8001316:	a392      	add	r3, pc, #584	; (adr r3, 8001560 <main+0x568>)
 8001318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131c:	f7ff f8dc 	bl	80004d8 <__aeabi_dmul>
 8001320:	4603      	mov	r3, r0
 8001322:	460c      	mov	r4, r1
 8001324:	4a9b      	ldr	r2, [pc, #620]	; (8001594 <main+0x59c>)
 8001326:	e9c2 3400 	strd	r3, r4, [r2]

		if (currentVMAX < currentV) {
 800132a:	4b9b      	ldr	r3, [pc, #620]	; (8001598 <main+0x5a0>)
 800132c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001330:	4b98      	ldr	r3, [pc, #608]	; (8001594 <main+0x59c>)
 8001332:	cb18      	ldmia	r3, {r3, r4}
 8001334:	461a      	mov	r2, r3
 8001336:	4623      	mov	r3, r4
 8001338:	f7ff fb40 	bl	80009bc <__aeabi_dcmplt>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d004      	beq.n	800134c <main+0x354>
			currentVMAX = currentV;
 8001342:	4b94      	ldr	r3, [pc, #592]	; (8001594 <main+0x59c>)
 8001344:	cb18      	ldmia	r3, {r3, r4}
 8001346:	4a94      	ldr	r2, [pc, #592]	; (8001598 <main+0x5a0>)
 8001348:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if (currentVMIN > currentV) {
 800134c:	4b93      	ldr	r3, [pc, #588]	; (800159c <main+0x5a4>)
 800134e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001352:	4b90      	ldr	r3, [pc, #576]	; (8001594 <main+0x59c>)
 8001354:	cb18      	ldmia	r3, {r3, r4}
 8001356:	461a      	mov	r2, r3
 8001358:	4623      	mov	r3, r4
 800135a:	f7ff fb4d 	bl	80009f8 <__aeabi_dcmpgt>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d004      	beq.n	800136e <main+0x376>
			currentVMIN = currentV;
 8001364:	4b8b      	ldr	r3, [pc, #556]	; (8001594 <main+0x59c>)
 8001366:	cb18      	ldmia	r3, {r3, r4}
 8001368:	4a8c      	ldr	r2, [pc, #560]	; (800159c <main+0x5a4>)
 800136a:	e9c2 3400 	strd	r3, r4, [r2]
		}

		currentV = ((double)rawCurrentInput/4096)*3.3;
 800136e:	4b87      	ldr	r3, [pc, #540]	; (800158c <main+0x594>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f836 	bl	80003e4 <__aeabi_ui2d>
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	4b84      	ldr	r3, [pc, #528]	; (8001590 <main+0x598>)
 800137e:	f7ff f9d5 	bl	800072c <__aeabi_ddiv>
 8001382:	4603      	mov	r3, r0
 8001384:	460c      	mov	r4, r1
 8001386:	4618      	mov	r0, r3
 8001388:	4621      	mov	r1, r4
 800138a:	a375      	add	r3, pc, #468	; (adr r3, 8001560 <main+0x568>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7ff f8a2 	bl	80004d8 <__aeabi_dmul>
 8001394:	4603      	mov	r3, r0
 8001396:	460c      	mov	r4, r1
 8001398:	4a7e      	ldr	r2, [pc, #504]	; (8001594 <main+0x59c>)
 800139a:	e9c2 3400 	strd	r3, r4, [r2]

		if (currentVMAX < currentV) {
 800139e:	4b7e      	ldr	r3, [pc, #504]	; (8001598 <main+0x5a0>)
 80013a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013a4:	4b7b      	ldr	r3, [pc, #492]	; (8001594 <main+0x59c>)
 80013a6:	cb18      	ldmia	r3, {r3, r4}
 80013a8:	461a      	mov	r2, r3
 80013aa:	4623      	mov	r3, r4
 80013ac:	f7ff fb06 	bl	80009bc <__aeabi_dcmplt>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d004      	beq.n	80013c0 <main+0x3c8>
			currentVMAX = currentV;
 80013b6:	4b77      	ldr	r3, [pc, #476]	; (8001594 <main+0x59c>)
 80013b8:	cb18      	ldmia	r3, {r3, r4}
 80013ba:	4a77      	ldr	r2, [pc, #476]	; (8001598 <main+0x5a0>)
 80013bc:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if (currentVMIN > currentV) {
 80013c0:	4b76      	ldr	r3, [pc, #472]	; (800159c <main+0x5a4>)
 80013c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c6:	4b73      	ldr	r3, [pc, #460]	; (8001594 <main+0x59c>)
 80013c8:	cb18      	ldmia	r3, {r3, r4}
 80013ca:	461a      	mov	r2, r3
 80013cc:	4623      	mov	r3, r4
 80013ce:	f7ff fb13 	bl	80009f8 <__aeabi_dcmpgt>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <main+0x3ea>
			currentVMIN = currentV;
 80013d8:	4b6e      	ldr	r3, [pc, #440]	; (8001594 <main+0x59c>)
 80013da:	cb18      	ldmia	r3, {r3, r4}
 80013dc:	4a6f      	ldr	r2, [pc, #444]	; (800159c <main+0x5a4>)
 80013de:	e9c2 3400 	strd	r3, r4, [r2]
		}

	//Tensão

		HAL_ADC_Start(&hadc2);
 80013e2:	486f      	ldr	r0, [pc, #444]	; (80015a0 <main+0x5a8>)
 80013e4:	f000 ff5c 	bl	80022a0 <HAL_ADC_Start>
		rawVoltageInput = HAL_ADC_GetValue(&hadc2);
 80013e8:	486d      	ldr	r0, [pc, #436]	; (80015a0 <main+0x5a8>)
 80013ea:	f001 f807 	bl	80023fc <HAL_ADC_GetValue>
 80013ee:	4602      	mov	r2, r0
 80013f0:	4b6c      	ldr	r3, [pc, #432]	; (80015a4 <main+0x5ac>)
 80013f2:	601a      	str	r2, [r3, #0]
		voltageV = ((double)rawVoltageInput/4096)*3.3;
 80013f4:	4b6b      	ldr	r3, [pc, #428]	; (80015a4 <main+0x5ac>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7fe fff3 	bl	80003e4 <__aeabi_ui2d>
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	4b63      	ldr	r3, [pc, #396]	; (8001590 <main+0x598>)
 8001404:	f7ff f992 	bl	800072c <__aeabi_ddiv>
 8001408:	4603      	mov	r3, r0
 800140a:	460c      	mov	r4, r1
 800140c:	4618      	mov	r0, r3
 800140e:	4621      	mov	r1, r4
 8001410:	a353      	add	r3, pc, #332	; (adr r3, 8001560 <main+0x568>)
 8001412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001416:	f7ff f85f 	bl	80004d8 <__aeabi_dmul>
 800141a:	4603      	mov	r3, r0
 800141c:	460c      	mov	r4, r1
 800141e:	4a62      	ldr	r2, [pc, #392]	; (80015a8 <main+0x5b0>)
 8001420:	e9c2 3400 	strd	r3, r4, [r2]

		if (voltageVMAX < voltageV) {
 8001424:	4b61      	ldr	r3, [pc, #388]	; (80015ac <main+0x5b4>)
 8001426:	e9d3 0100 	ldrd	r0, r1, [r3]
 800142a:	4b5f      	ldr	r3, [pc, #380]	; (80015a8 <main+0x5b0>)
 800142c:	cb18      	ldmia	r3, {r3, r4}
 800142e:	461a      	mov	r2, r3
 8001430:	4623      	mov	r3, r4
 8001432:	f7ff fac3 	bl	80009bc <__aeabi_dcmplt>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d004      	beq.n	8001446 <main+0x44e>
			voltageVMAX = voltageV;
 800143c:	4b5a      	ldr	r3, [pc, #360]	; (80015a8 <main+0x5b0>)
 800143e:	cb18      	ldmia	r3, {r3, r4}
 8001440:	4a5a      	ldr	r2, [pc, #360]	; (80015ac <main+0x5b4>)
 8001442:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if (voltageVMIN > voltageV) {
 8001446:	4b5a      	ldr	r3, [pc, #360]	; (80015b0 <main+0x5b8>)
 8001448:	e9d3 0100 	ldrd	r0, r1, [r3]
 800144c:	4b56      	ldr	r3, [pc, #344]	; (80015a8 <main+0x5b0>)
 800144e:	cb18      	ldmia	r3, {r3, r4}
 8001450:	461a      	mov	r2, r3
 8001452:	4623      	mov	r3, r4
 8001454:	f7ff fad0 	bl	80009f8 <__aeabi_dcmpgt>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d004      	beq.n	8001468 <main+0x470>
			voltageVMIN = voltageV;
 800145e:	4b52      	ldr	r3, [pc, #328]	; (80015a8 <main+0x5b0>)
 8001460:	cb18      	ldmia	r3, {r3, r4}
 8001462:	4a53      	ldr	r2, [pc, #332]	; (80015b0 <main+0x5b8>)
 8001464:	e9c2 3400 	strd	r3, r4, [r2]
	for (i = 0; i < 400; i++) {
 8001468:	4b52      	ldr	r3, [pc, #328]	; (80015b4 <main+0x5bc>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	4a51      	ldr	r2, [pc, #324]	; (80015b4 <main+0x5bc>)
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	4b50      	ldr	r3, [pc, #320]	; (80015b4 <main+0x5bc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800147a:	f6ff af35 	blt.w	80012e8 <main+0x2f0>
		}

	}

	currentVRMS = (currentVMAX - currentVMIN) / (2 * sqrt(2));
 800147e:	4b46      	ldr	r3, [pc, #280]	; (8001598 <main+0x5a0>)
 8001480:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001484:	4b45      	ldr	r3, [pc, #276]	; (800159c <main+0x5a4>)
 8001486:	cb18      	ldmia	r3, {r3, r4}
 8001488:	461a      	mov	r2, r3
 800148a:	4623      	mov	r3, r4
 800148c:	f7fe fe6c 	bl	8000168 <__aeabi_dsub>
 8001490:	4603      	mov	r3, r0
 8001492:	460c      	mov	r4, r1
 8001494:	4618      	mov	r0, r3
 8001496:	4621      	mov	r1, r4
 8001498:	a333      	add	r3, pc, #204	; (adr r3, 8001568 <main+0x570>)
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	f7ff f945 	bl	800072c <__aeabi_ddiv>
 80014a2:	4603      	mov	r3, r0
 80014a4:	460c      	mov	r4, r1
 80014a6:	4a44      	ldr	r2, [pc, #272]	; (80015b8 <main+0x5c0>)
 80014a8:	e9c2 3400 	strd	r3, r4, [r2]
	voltageVRMS = (voltageVMAX - voltageVMIN) / (2 * sqrt(2));
 80014ac:	4b3f      	ldr	r3, [pc, #252]	; (80015ac <main+0x5b4>)
 80014ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014b2:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <main+0x5b8>)
 80014b4:	cb18      	ldmia	r3, {r3, r4}
 80014b6:	461a      	mov	r2, r3
 80014b8:	4623      	mov	r3, r4
 80014ba:	f7fe fe55 	bl	8000168 <__aeabi_dsub>
 80014be:	4603      	mov	r3, r0
 80014c0:	460c      	mov	r4, r1
 80014c2:	4618      	mov	r0, r3
 80014c4:	4621      	mov	r1, r4
 80014c6:	a328      	add	r3, pc, #160	; (adr r3, 8001568 <main+0x570>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	f7ff f92e 	bl	800072c <__aeabi_ddiv>
 80014d0:	4603      	mov	r3, r0
 80014d2:	460c      	mov	r4, r1
 80014d4:	4a39      	ldr	r2, [pc, #228]	; (80015bc <main+0x5c4>)
 80014d6:	e9c2 3400 	strd	r3, r4, [r2]

	currentOutput = previousCurrentOutput + 0.97 * ((currentVRMS * 3.94)-previousCurrentOutput);      //currentVRMS * (4.020);
 80014da:	4b37      	ldr	r3, [pc, #220]	; (80015b8 <main+0x5c0>)
 80014dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014e0:	a323      	add	r3, pc, #140	; (adr r3, 8001570 <main+0x578>)
 80014e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e6:	f7fe fff7 	bl	80004d8 <__aeabi_dmul>
 80014ea:	4603      	mov	r3, r0
 80014ec:	460c      	mov	r4, r1
 80014ee:	4618      	mov	r0, r3
 80014f0:	4621      	mov	r1, r4
 80014f2:	4b33      	ldr	r3, [pc, #204]	; (80015c0 <main+0x5c8>)
 80014f4:	cb18      	ldmia	r3, {r3, r4}
 80014f6:	461a      	mov	r2, r3
 80014f8:	4623      	mov	r3, r4
 80014fa:	f7fe fe35 	bl	8000168 <__aeabi_dsub>
 80014fe:	4603      	mov	r3, r0
 8001500:	460c      	mov	r4, r1
 8001502:	4618      	mov	r0, r3
 8001504:	4621      	mov	r1, r4
 8001506:	a31c      	add	r3, pc, #112	; (adr r3, 8001578 <main+0x580>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f7fe ffe4 	bl	80004d8 <__aeabi_dmul>
 8001510:	4603      	mov	r3, r0
 8001512:	460c      	mov	r4, r1
 8001514:	4618      	mov	r0, r3
 8001516:	4621      	mov	r1, r4
 8001518:	4b29      	ldr	r3, [pc, #164]	; (80015c0 <main+0x5c8>)
 800151a:	cb18      	ldmia	r3, {r3, r4}
 800151c:	461a      	mov	r2, r3
 800151e:	4623      	mov	r3, r4
 8001520:	f7fe fe24 	bl	800016c <__adddf3>
 8001524:	4603      	mov	r3, r0
 8001526:	460c      	mov	r4, r1
 8001528:	4a26      	ldr	r2, [pc, #152]	; (80015c4 <main+0x5cc>)
 800152a:	e9c2 3400 	strd	r3, r4, [r2]
	voltageOutput = previousVoltageOutput + 0.97 * ((voltageVRMS * 668.420)-previousVoltageOutput);
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <main+0x5c4>)
 8001530:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001534:	a312      	add	r3, pc, #72	; (adr r3, 8001580 <main+0x588>)
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153a:	f7fe ffcd 	bl	80004d8 <__aeabi_dmul>
 800153e:	4603      	mov	r3, r0
 8001540:	460c      	mov	r4, r1
 8001542:	4618      	mov	r0, r3
 8001544:	4621      	mov	r1, r4
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <main+0x5d0>)
 8001548:	cb18      	ldmia	r3, {r3, r4}
 800154a:	461a      	mov	r2, r3
 800154c:	4623      	mov	r3, r4
 800154e:	f7fe fe0b 	bl	8000168 <__aeabi_dsub>
 8001552:	4603      	mov	r3, r0
 8001554:	460c      	mov	r4, r1
 8001556:	4618      	mov	r0, r3
 8001558:	4621      	mov	r1, r4
 800155a:	e037      	b.n	80015cc <main+0x5d4>
 800155c:	f3af 8000 	nop.w
 8001560:	66666666 	.word	0x66666666
 8001564:	400a6666 	.word	0x400a6666
 8001568:	667f3bcd 	.word	0x667f3bcd
 800156c:	4006a09e 	.word	0x4006a09e
 8001570:	b851eb85 	.word	0xb851eb85
 8001574:	400f851e 	.word	0x400f851e
 8001578:	70a3d70a 	.word	0x70a3d70a
 800157c:	3fef0a3d 	.word	0x3fef0a3d
 8001580:	28f5c28f 	.word	0x28f5c28f
 8001584:	4084e35c 	.word	0x4084e35c
 8001588:	200003ac 	.word	0x200003ac
 800158c:	20000734 	.word	0x20000734
 8001590:	40b00000 	.word	0x40b00000
 8001594:	20000428 	.word	0x20000428
 8001598:	20000420 	.word	0x20000420
 800159c:	20000740 	.word	0x20000740
 80015a0:	2000024c 	.word	0x2000024c
 80015a4:	20000248 	.word	0x20000248
 80015a8:	20000478 	.word	0x20000478
 80015ac:	200003e0 	.word	0x200003e0
 80015b0:	20000738 	.word	0x20000738
 80015b4:	200003e8 	.word	0x200003e8
 80015b8:	20000588 	.word	0x20000588
 80015bc:	200005a8 	.word	0x200005a8
 80015c0:	20000228 	.word	0x20000228
 80015c4:	20000208 	.word	0x20000208
 80015c8:	20000220 	.word	0x20000220
 80015cc:	a358      	add	r3, pc, #352	; (adr r3, 8001730 <main+0x738>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7fe ff81 	bl	80004d8 <__aeabi_dmul>
 80015d6:	4603      	mov	r3, r0
 80015d8:	460c      	mov	r4, r1
 80015da:	4618      	mov	r0, r3
 80015dc:	4621      	mov	r1, r4
 80015de:	4b56      	ldr	r3, [pc, #344]	; (8001738 <main+0x740>)
 80015e0:	cb18      	ldmia	r3, {r3, r4}
 80015e2:	461a      	mov	r2, r3
 80015e4:	4623      	mov	r3, r4
 80015e6:	f7fe fdc1 	bl	800016c <__adddf3>
 80015ea:	4603      	mov	r3, r0
 80015ec:	460c      	mov	r4, r1
 80015ee:	4a53      	ldr	r2, [pc, #332]	; (800173c <main+0x744>)
 80015f0:	e9c2 3400 	strd	r3, r4, [r2]
	powerOutput = previousPowerOutput + 0.97 * ((voltageOutput * currentOutput)-previousPowerOutput);
 80015f4:	4b51      	ldr	r3, [pc, #324]	; (800173c <main+0x744>)
 80015f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015fa:	4b51      	ldr	r3, [pc, #324]	; (8001740 <main+0x748>)
 80015fc:	cb18      	ldmia	r3, {r3, r4}
 80015fe:	461a      	mov	r2, r3
 8001600:	4623      	mov	r3, r4
 8001602:	f7fe ff69 	bl	80004d8 <__aeabi_dmul>
 8001606:	4603      	mov	r3, r0
 8001608:	460c      	mov	r4, r1
 800160a:	4618      	mov	r0, r3
 800160c:	4621      	mov	r1, r4
 800160e:	4b4d      	ldr	r3, [pc, #308]	; (8001744 <main+0x74c>)
 8001610:	cb18      	ldmia	r3, {r3, r4}
 8001612:	461a      	mov	r2, r3
 8001614:	4623      	mov	r3, r4
 8001616:	f7fe fda7 	bl	8000168 <__aeabi_dsub>
 800161a:	4603      	mov	r3, r0
 800161c:	460c      	mov	r4, r1
 800161e:	4618      	mov	r0, r3
 8001620:	4621      	mov	r1, r4
 8001622:	a343      	add	r3, pc, #268	; (adr r3, 8001730 <main+0x738>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7fe ff56 	bl	80004d8 <__aeabi_dmul>
 800162c:	4603      	mov	r3, r0
 800162e:	460c      	mov	r4, r1
 8001630:	4618      	mov	r0, r3
 8001632:	4621      	mov	r1, r4
 8001634:	4b43      	ldr	r3, [pc, #268]	; (8001744 <main+0x74c>)
 8001636:	cb18      	ldmia	r3, {r3, r4}
 8001638:	461a      	mov	r2, r3
 800163a:	4623      	mov	r3, r4
 800163c:	f7fe fd96 	bl	800016c <__adddf3>
 8001640:	4603      	mov	r3, r0
 8001642:	460c      	mov	r4, r1
 8001644:	4a40      	ldr	r2, [pc, #256]	; (8001748 <main+0x750>)
 8001646:	e9c2 3400 	strd	r3, r4, [r2]

	previousVoltageOutput = voltageOutput;
 800164a:	4b3c      	ldr	r3, [pc, #240]	; (800173c <main+0x744>)
 800164c:	cb18      	ldmia	r3, {r3, r4}
 800164e:	4a3a      	ldr	r2, [pc, #232]	; (8001738 <main+0x740>)
 8001650:	e9c2 3400 	strd	r3, r4, [r2]
	previousCurrentOutput = currentOutput;
 8001654:	4b3a      	ldr	r3, [pc, #232]	; (8001740 <main+0x748>)
 8001656:	cb18      	ldmia	r3, {r3, r4}
 8001658:	4a3c      	ldr	r2, [pc, #240]	; (800174c <main+0x754>)
 800165a:	e9c2 3400 	strd	r3, r4, [r2]
	previousPowerOutput = powerOutput;
 800165e:	4b3a      	ldr	r3, [pc, #232]	; (8001748 <main+0x750>)
 8001660:	cb18      	ldmia	r3, {r3, r4}
 8001662:	4a38      	ldr	r2, [pc, #224]	; (8001744 <main+0x74c>)
 8001664:	e9c2 3400 	strd	r3, r4, [r2]

	currentOutputMilis = currentOutput * 1000;
 8001668:	4b35      	ldr	r3, [pc, #212]	; (8001740 <main+0x748>)
 800166a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	4b37      	ldr	r3, [pc, #220]	; (8001750 <main+0x758>)
 8001674:	f7fe ff30 	bl	80004d8 <__aeabi_dmul>
 8001678:	4603      	mov	r3, r0
 800167a:	460c      	mov	r4, r1
 800167c:	4a35      	ldr	r2, [pc, #212]	; (8001754 <main+0x75c>)
 800167e:	e9c2 3400 	strd	r3, r4, [r2]

	snprintf(volString, 50, "%1f", voltageOutput);
 8001682:	4b2e      	ldr	r3, [pc, #184]	; (800173c <main+0x744>)
 8001684:	cb18      	ldmia	r3, {r3, r4}
 8001686:	e9cd 3400 	strd	r3, r4, [sp]
 800168a:	4a33      	ldr	r2, [pc, #204]	; (8001758 <main+0x760>)
 800168c:	2132      	movs	r1, #50	; 0x32
 800168e:	4833      	ldr	r0, [pc, #204]	; (800175c <main+0x764>)
 8001690:	f003 f8cc 	bl	800482c <sniprintf>
	sprintf(temString, "Tensao:%sV", volString);
 8001694:	4a31      	ldr	r2, [pc, #196]	; (800175c <main+0x764>)
 8001696:	4932      	ldr	r1, [pc, #200]	; (8001760 <main+0x768>)
 8001698:	4832      	ldr	r0, [pc, #200]	; (8001764 <main+0x76c>)
 800169a:	f003 f8fb 	bl	8004894 <siprintf>
	ST7789_WriteString(0, 129, temString, Font_11x18, BLACK, WHITE);
 800169e:	4b32      	ldr	r3, [pc, #200]	; (8001768 <main+0x770>)
 80016a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a4:	9202      	str	r2, [sp, #8]
 80016a6:	2200      	movs	r2, #0
 80016a8:	9201      	str	r2, [sp, #4]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	9200      	str	r2, [sp, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a2c      	ldr	r2, [pc, #176]	; (8001764 <main+0x76c>)
 80016b2:	2181      	movs	r1, #129	; 0x81
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff fc4d 	bl	8000f54 <ST7789_WriteString>

	snprintf(curString, 50, "%1f", currentOutputMilis);
 80016ba:	4b26      	ldr	r3, [pc, #152]	; (8001754 <main+0x75c>)
 80016bc:	cb18      	ldmia	r3, {r3, r4}
 80016be:	e9cd 3400 	strd	r3, r4, [sp]
 80016c2:	4a25      	ldr	r2, [pc, #148]	; (8001758 <main+0x760>)
 80016c4:	2132      	movs	r1, #50	; 0x32
 80016c6:	4829      	ldr	r0, [pc, #164]	; (800176c <main+0x774>)
 80016c8:	f003 f8b0 	bl	800482c <sniprintf>
	sprintf(temString, "Corrente:%smA", curString);
 80016cc:	4a27      	ldr	r2, [pc, #156]	; (800176c <main+0x774>)
 80016ce:	4928      	ldr	r1, [pc, #160]	; (8001770 <main+0x778>)
 80016d0:	4824      	ldr	r0, [pc, #144]	; (8001764 <main+0x76c>)
 80016d2:	f003 f8df 	bl	8004894 <siprintf>
	ST7789_WriteString(0, 111, temString, Font_11x18, BLACK, WHITE);
 80016d6:	4b24      	ldr	r3, [pc, #144]	; (8001768 <main+0x770>)
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	9202      	str	r2, [sp, #8]
 80016de:	2200      	movs	r2, #0
 80016e0:	9201      	str	r2, [sp, #4]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	9200      	str	r2, [sp, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a1e      	ldr	r2, [pc, #120]	; (8001764 <main+0x76c>)
 80016ea:	216f      	movs	r1, #111	; 0x6f
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff fc31 	bl	8000f54 <ST7789_WriteString>

	snprintf(powString, 50, "%1f", powerOutput);
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <main+0x750>)
 80016f4:	cb18      	ldmia	r3, {r3, r4}
 80016f6:	e9cd 3400 	strd	r3, r4, [sp]
 80016fa:	4a17      	ldr	r2, [pc, #92]	; (8001758 <main+0x760>)
 80016fc:	2132      	movs	r1, #50	; 0x32
 80016fe:	481d      	ldr	r0, [pc, #116]	; (8001774 <main+0x77c>)
 8001700:	f003 f894 	bl	800482c <sniprintf>
	sprintf(temString, "Potencia:%sW", powString);
 8001704:	4a1b      	ldr	r2, [pc, #108]	; (8001774 <main+0x77c>)
 8001706:	491c      	ldr	r1, [pc, #112]	; (8001778 <main+0x780>)
 8001708:	4816      	ldr	r0, [pc, #88]	; (8001764 <main+0x76c>)
 800170a:	f003 f8c3 	bl	8004894 <siprintf>
	ST7789_WriteString(0, 93, temString, Font_11x18, BLACK, WHITE);
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <main+0x770>)
 8001710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001714:	9202      	str	r2, [sp, #8]
 8001716:	2200      	movs	r2, #0
 8001718:	9201      	str	r2, [sp, #4]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	9200      	str	r2, [sp, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a10      	ldr	r2, [pc, #64]	; (8001764 <main+0x76c>)
 8001722:	215d      	movs	r1, #93	; 0x5d
 8001724:	2000      	movs	r0, #0
 8001726:	f7ff fc15 	bl	8000f54 <ST7789_WriteString>

	Communicate();
 800172a:	f000 f9ed 	bl	8001b08 <Communicate>
	  currentVMAX = -999999;
 800172e:	e58c      	b.n	800124a <main+0x252>
 8001730:	70a3d70a 	.word	0x70a3d70a
 8001734:	3fef0a3d 	.word	0x3fef0a3d
 8001738:	20000220 	.word	0x20000220
 800173c:	20000210 	.word	0x20000210
 8001740:	20000208 	.word	0x20000208
 8001744:	20000230 	.word	0x20000230
 8001748:	20000218 	.word	0x20000218
 800174c:	20000228 	.word	0x20000228
 8001750:	408f4000 	.word	0x408f4000
 8001754:	20000480 	.word	0x20000480
 8001758:	080063a4 	.word	0x080063a4
 800175c:	200003ec 	.word	0x200003ec
 8001760:	080063a8 	.word	0x080063a8
 8001764:	20000748 	.word	0x20000748
 8001768:	20000000 	.word	0x20000000
 800176c:	20000488 	.word	0x20000488
 8001770:	080063b4 	.word	0x080063b4
 8001774:	20000378 	.word	0x20000378
 8001778:	080063c4 	.word	0x080063c4

0800177c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b094      	sub	sp, #80	; 0x50
 8001780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001786:	2228      	movs	r2, #40	; 0x28
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f002 fbf7 	bl	8003f7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ac:	2302      	movs	r3, #2
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b0:	2301      	movs	r3, #1
 80017b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017b4:	2310      	movs	r3, #16
 80017b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b8:	2302      	movs	r3, #2
 80017ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80017bc:	2300      	movs	r3, #0
 80017be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80017c0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80017c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ca:	4618      	mov	r0, r3
 80017cc:	f001 fa0c 	bl	8002be8 <HAL_RCC_OscConfig>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80017d6:	f000 fa4b 	bl	8001c70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017da:	230f      	movs	r3, #15
 80017dc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017de:	2302      	movs	r3, #2
 80017e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2102      	movs	r1, #2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f001 fc76 	bl	80030e8 <HAL_RCC_ClockConfig>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001802:	f000 fa35 	bl	8001c70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001806:	2302      	movs	r3, #2
 8001808:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800180a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800180e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	4618      	mov	r0, r3
 8001814:	f001 fe04 	bl	8003420 <HAL_RCCEx_PeriphCLKConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800181e:	f000 fa27 	bl	8001c70 <Error_Handler>
  }
}
 8001822:	bf00      	nop
 8001824:	3750      	adds	r7, #80	; 0x50
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_ADC1_Init+0x74>)
 800183e:	4a19      	ldr	r2, [pc, #100]	; (80018a4 <MX_ADC1_Init+0x78>)
 8001840:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <MX_ADC1_Init+0x74>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001848:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <MX_ADC1_Init+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <MX_ADC1_Init+0x74>)
 8001850:	2200      	movs	r2, #0
 8001852:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <MX_ADC1_Init+0x74>)
 8001856:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800185a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <MX_ADC1_Init+0x74>)
 800185e:	2200      	movs	r2, #0
 8001860:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <MX_ADC1_Init+0x74>)
 8001864:	2201      	movs	r2, #1
 8001866:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001868:	480d      	ldr	r0, [pc, #52]	; (80018a0 <MX_ADC1_Init+0x74>)
 800186a:	f000 fc41 	bl	80020f0 <HAL_ADC_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001874:	f000 f9fc 	bl	8001c70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001878:	2300      	movs	r3, #0
 800187a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800187c:	2301      	movs	r3, #1
 800187e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	4619      	mov	r1, r3
 8001888:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_ADC1_Init+0x74>)
 800188a:	f000 fdc3 	bl	8002414 <HAL_ADC_ConfigChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001894:	f000 f9ec 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	200003ac 	.word	0x200003ac
 80018a4:	40012400 	.word	0x40012400

080018a8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <MX_ADC2_Init+0x74>)
 80018ba:	4a19      	ldr	r2, [pc, #100]	; (8001920 <MX_ADC2_Init+0x78>)
 80018bc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <MX_ADC2_Init+0x74>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <MX_ADC2_Init+0x74>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_ADC2_Init+0x74>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <MX_ADC2_Init+0x74>)
 80018d2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80018d6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018d8:	4b10      	ldr	r3, [pc, #64]	; (800191c <MX_ADC2_Init+0x74>)
 80018da:	2200      	movs	r2, #0
 80018dc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MX_ADC2_Init+0x74>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018e4:	480d      	ldr	r0, [pc, #52]	; (800191c <MX_ADC2_Init+0x74>)
 80018e6:	f000 fc03 	bl	80020f0 <HAL_ADC_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80018f0:	f000 f9be 	bl	8001c70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018f4:	2301      	movs	r3, #1
 80018f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018f8:	2301      	movs	r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_ADC2_Init+0x74>)
 8001906:	f000 fd85 	bl	8002414 <HAL_ADC_ConfigChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001910:	f000 f9ae 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	2000024c 	.word	0x2000024c
 8001920:	40012800 	.word	0x40012800

08001924 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001928:	4b17      	ldr	r3, [pc, #92]	; (8001988 <MX_SPI1_Init+0x64>)
 800192a:	4a18      	ldr	r2, [pc, #96]	; (800198c <MX_SPI1_Init+0x68>)
 800192c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800192e:	4b16      	ldr	r3, [pc, #88]	; (8001988 <MX_SPI1_Init+0x64>)
 8001930:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001934:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <MX_SPI1_Init+0x64>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <MX_SPI1_Init+0x64>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <MX_SPI1_Init+0x64>)
 8001944:	2202      	movs	r2, #2
 8001946:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <MX_SPI1_Init+0x64>)
 800194a:	2200      	movs	r2, #0
 800194c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_SPI1_Init+0x64>)
 8001950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001954:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <MX_SPI1_Init+0x64>)
 8001958:	2208      	movs	r2, #8
 800195a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800195c:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <MX_SPI1_Init+0x64>)
 800195e:	2200      	movs	r2, #0
 8001960:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <MX_SPI1_Init+0x64>)
 8001964:	2200      	movs	r2, #0
 8001966:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <MX_SPI1_Init+0x64>)
 800196a:	2200      	movs	r2, #0
 800196c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_SPI1_Init+0x64>)
 8001970:	220a      	movs	r2, #10
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001974:	4804      	ldr	r0, [pc, #16]	; (8001988 <MX_SPI1_Init+0x64>)
 8001976:	f001 fe09 	bl	800358c <HAL_SPI_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001980:	f000 f976 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200005b0 	.word	0x200005b0
 800198c:	40013000 	.word	0x40013000

08001990 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <MX_USART1_UART_Init+0x50>)
 8001998:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 800199c:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80019a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 80019b6:	220c      	movs	r2, #12
 80019b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 80019c8:	f002 f846 	bl	8003a58 <HAL_UART_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019d2:	f000 f94d 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000430 	.word	0x20000430
 80019e0:	40013800 	.word	0x40013800

080019e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f8:	4b30      	ldr	r3, [pc, #192]	; (8001abc <MX_GPIO_Init+0xd8>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	4a2f      	ldr	r2, [pc, #188]	; (8001abc <MX_GPIO_Init+0xd8>)
 80019fe:	f043 0304 	orr.w	r3, r3, #4
 8001a02:	6193      	str	r3, [r2, #24]
 8001a04:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <MX_GPIO_Init+0xd8>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a10:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <MX_GPIO_Init+0xd8>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	4a29      	ldr	r2, [pc, #164]	; (8001abc <MX_GPIO_Init+0xd8>)
 8001a16:	f043 0308 	orr.w	r3, r3, #8
 8001a1a:	6193      	str	r3, [r2, #24]
 8001a1c:	4b27      	ldr	r3, [pc, #156]	; (8001abc <MX_GPIO_Init+0xd8>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7789_CS_Pin|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f641 1110 	movw	r1, #6416	; 0x1910
 8001a2e:	4824      	ldr	r0, [pc, #144]	; (8001ac0 <MX_GPIO_Init+0xdc>)
 8001a30:	f001 f8c2 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7789_DC_Pin|ST7789_RST_Pin|GPIO_PIN_3, GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	210b      	movs	r1, #11
 8001a38:	4822      	ldr	r0, [pc, #136]	; (8001ac4 <MX_GPIO_Init+0xe0>)
 8001a3a:	f001 f8bd 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST7789_CS_Pin PA11 PA12 */
  GPIO_InitStruct.Pin = ST7789_CS_Pin|GPIO_PIN_11|GPIO_PIN_12;
 8001a3e:	f641 0310 	movw	r3, #6160	; 0x1810
 8001a42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a44:	2301      	movs	r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a50:	f107 0308 	add.w	r3, r7, #8
 8001a54:	4619      	mov	r1, r3
 8001a56:	481a      	ldr	r0, [pc, #104]	; (8001ac0 <MX_GPIO_Init+0xdc>)
 8001a58:	f000 ff54 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7789_DC_Pin ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_RST_Pin;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a60:	2301      	movs	r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6c:	f107 0308 	add.w	r3, r7, #8
 8001a70:	4619      	mov	r1, r3
 8001a72:	4814      	ldr	r0, [pc, #80]	; (8001ac4 <MX_GPIO_Init+0xe0>)
 8001a74:	f000 ff46 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a7e:	2311      	movs	r3, #17
 8001a80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2302      	movs	r3, #2
 8001a88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	f107 0308 	add.w	r3, r7, #8
 8001a8e:	4619      	mov	r1, r3
 8001a90:	480b      	ldr	r0, [pc, #44]	; (8001ac0 <MX_GPIO_Init+0xdc>)
 8001a92:	f000 ff37 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a96:	2308      	movs	r3, #8
 8001a98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa6:	f107 0308 	add.w	r3, r7, #8
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_GPIO_Init+0xe0>)
 8001aae:	f000 ff29 	bl	8002904 <HAL_GPIO_Init>

}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40010800 	.word	0x40010800
 8001ac4:	40010c00 	.word	0x40010c00

08001ac8 <relay_control>:

/* USER CODE BEGIN 4 */

void relay_control(short state)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80fb      	strh	r3, [r7, #6]
	if(state==0)
 8001ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <relay_control+0x20>
	{
		//turn on
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ae0:	4808      	ldr	r0, [pc, #32]	; (8001b04 <relay_control+0x3c>)
 8001ae2:	f001 f869 	bl	8002bb8 <HAL_GPIO_WritePin>
	else if(state==1)
	{
		//turn off
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
	}
}
 8001ae6:	e009      	b.n	8001afc <relay_control+0x34>
	else if(state==1)
 8001ae8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d105      	bne.n	8001afc <relay_control+0x34>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8001af0:	2201      	movs	r2, #1
 8001af2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001af6:	4803      	ldr	r0, [pc, #12]	; (8001b04 <relay_control+0x3c>)
 8001af8:	f001 f85e 	bl	8002bb8 <HAL_GPIO_WritePin>
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40010800 	.word	0x40010800

08001b08 <Communicate>:


void Communicate() {
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b087      	sub	sp, #28
 8001b0c:	af02      	add	r7, sp, #8

	char *token;
	char *lastToken = NULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
	char *secondLastToken = NULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]

	sprintf(TxData, "AT+CIPSEND\r\n");
 8001b16:	4a4b      	ldr	r2, [pc, #300]	; (8001c44 <Communicate+0x13c>)
 8001b18:	4b4b      	ldr	r3, [pc, #300]	; (8001c48 <Communicate+0x140>)
 8001b1a:	4614      	mov	r4, r2
 8001b1c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001b1e:	6020      	str	r0, [r4, #0]
 8001b20:	6061      	str	r1, [r4, #4]
 8001b22:	60a2      	str	r2, [r4, #8]
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	7323      	strb	r3, [r4, #12]
	       HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001b28:	4846      	ldr	r0, [pc, #280]	; (8001c44 <Communicate+0x13c>)
 8001b2a:	f7fe fb11 	bl	8000150 <strlen>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b36:	4943      	ldr	r1, [pc, #268]	; (8001c44 <Communicate+0x13c>)
 8001b38:	4844      	ldr	r0, [pc, #272]	; (8001c4c <Communicate+0x144>)
 8001b3a:	f001 ffda 	bl	8003af2 <HAL_UART_Transmit>
	       HAL_Delay(700);
 8001b3e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001b42:	f000 fab3 	bl	80020ac <HAL_Delay>

	sprintf(TxData, "POST /api/v1.6/devices/"device_tag" HTTP/1.1\r\nHost: industrial.api.ubidots.com\r\nContent-Type: application/json\r\nX-Auth-Token: "ubidots_token"\r\nContent-Length: %d\r\n\r\n{\"voltage\":%s,\"current\":%s,\"power\":%s}\x1A", 32 + strlen(volString) + strlen(curString) + strlen(powString), volString, curString, powString);
 8001b46:	4842      	ldr	r0, [pc, #264]	; (8001c50 <Communicate+0x148>)
 8001b48:	f7fe fb02 	bl	8000150 <strlen>
 8001b4c:	4604      	mov	r4, r0
 8001b4e:	4841      	ldr	r0, [pc, #260]	; (8001c54 <Communicate+0x14c>)
 8001b50:	f7fe fafe 	bl	8000150 <strlen>
 8001b54:	4603      	mov	r3, r0
 8001b56:	441c      	add	r4, r3
 8001b58:	483f      	ldr	r0, [pc, #252]	; (8001c58 <Communicate+0x150>)
 8001b5a:	f7fe faf9 	bl	8000150 <strlen>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4423      	add	r3, r4
 8001b62:	f103 0220 	add.w	r2, r3, #32
 8001b66:	4b3c      	ldr	r3, [pc, #240]	; (8001c58 <Communicate+0x150>)
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	4b3a      	ldr	r3, [pc, #232]	; (8001c54 <Communicate+0x14c>)
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	4b38      	ldr	r3, [pc, #224]	; (8001c50 <Communicate+0x148>)
 8001b70:	493a      	ldr	r1, [pc, #232]	; (8001c5c <Communicate+0x154>)
 8001b72:	4834      	ldr	r0, [pc, #208]	; (8001c44 <Communicate+0x13c>)
 8001b74:	f002 fe8e 	bl	8004894 <siprintf>
	       HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001b78:	4832      	ldr	r0, [pc, #200]	; (8001c44 <Communicate+0x13c>)
 8001b7a:	f7fe fae9 	bl	8000150 <strlen>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b86:	492f      	ldr	r1, [pc, #188]	; (8001c44 <Communicate+0x13c>)
 8001b88:	4830      	ldr	r0, [pc, #192]	; (8001c4c <Communicate+0x144>)
 8001b8a:	f001 ffb2 	bl	8003af2 <HAL_UART_Transmit>
	       HAL_Delay(3700);
 8001b8e:	f640 6074 	movw	r0, #3700	; 0xe74
 8001b92:	f000 fa8b 	bl	80020ac <HAL_Delay>

	sprintf(TxData, "AT+CIPSEND\r\n");
 8001b96:	4a2b      	ldr	r2, [pc, #172]	; (8001c44 <Communicate+0x13c>)
 8001b98:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <Communicate+0x140>)
 8001b9a:	4614      	mov	r4, r2
 8001b9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001b9e:	6020      	str	r0, [r4, #0]
 8001ba0:	6061      	str	r1, [r4, #4]
 8001ba2:	60a2      	str	r2, [r4, #8]
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	7323      	strb	r3, [r4, #12]
	       HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001ba8:	4826      	ldr	r0, [pc, #152]	; (8001c44 <Communicate+0x13c>)
 8001baa:	f7fe fad1 	bl	8000150 <strlen>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb6:	4923      	ldr	r1, [pc, #140]	; (8001c44 <Communicate+0x13c>)
 8001bb8:	4824      	ldr	r0, [pc, #144]	; (8001c4c <Communicate+0x144>)
 8001bba:	f001 ff9a 	bl	8003af2 <HAL_UART_Transmit>
	       HAL_Delay(700);
 8001bbe:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001bc2:	f000 fa73 	bl	80020ac <HAL_Delay>

	sprintf(TxData, "GET /api/v1.6/devices/"device_tag"/onOff/lv HTTP/1.1\r\nHost: industrial.api.ubidots.com\r\nX-Auth-Token: "ubidots_token"\r\n\r\n\x1A");
 8001bc6:	4a1f      	ldr	r2, [pc, #124]	; (8001c44 <Communicate+0x13c>)
 8001bc8:	4b25      	ldr	r3, [pc, #148]	; (8001c60 <Communicate+0x158>)
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	2388      	movs	r3, #136	; 0x88
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	f002 f9c9 	bl	8003f68 <memcpy>
	       HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001bd6:	481b      	ldr	r0, [pc, #108]	; (8001c44 <Communicate+0x13c>)
 8001bd8:	f7fe faba 	bl	8000150 <strlen>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be4:	4917      	ldr	r1, [pc, #92]	; (8001c44 <Communicate+0x13c>)
 8001be6:	4819      	ldr	r0, [pc, #100]	; (8001c4c <Communicate+0x144>)
 8001be8:	f001 ff83 	bl	8003af2 <HAL_UART_Transmit>
	       HAL_Delay(100);
 8001bec:	2064      	movs	r0, #100	; 0x64
 8001bee:	f000 fa5d 	bl	80020ac <HAL_Delay>

	       HAL_UART_Receive(&huart1, (uint8_t*)RxData, 900, 6500);
 8001bf2:	f641 1364 	movw	r3, #6500	; 0x1964
 8001bf6:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001bfa:	491a      	ldr	r1, [pc, #104]	; (8001c64 <Communicate+0x15c>)
 8001bfc:	4813      	ldr	r0, [pc, #76]	; (8001c4c <Communicate+0x144>)
 8001bfe:	f002 f80a 	bl	8003c16 <HAL_UART_Receive>

	       token = strtok(RxData, "\r\n");
 8001c02:	4919      	ldr	r1, [pc, #100]	; (8001c68 <Communicate+0x160>)
 8001c04:	4817      	ldr	r0, [pc, #92]	; (8001c64 <Communicate+0x15c>)
 8001c06:	f002 fe65 	bl	80048d4 <strtok>
 8001c0a:	60f8      	str	r0, [r7, #12]
	           while (token != NULL) {
 8001c0c:	e00c      	b.n	8001c28 <Communicate+0x120>
	               if (strlen(token) > 0) {
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <Communicate+0x116>
	                   secondLastToken = lastToken;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	607b      	str	r3, [r7, #4]
	                   lastToken = token;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	60bb      	str	r3, [r7, #8]
	               }
	               token = strtok(NULL, "\r\n");
 8001c1e:	4912      	ldr	r1, [pc, #72]	; (8001c68 <Communicate+0x160>)
 8001c20:	2000      	movs	r0, #0
 8001c22:	f002 fe57 	bl	80048d4 <strtok>
 8001c26:	60f8      	str	r0, [r7, #12]
	           while (token != NULL) {
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1ef      	bne.n	8001c0e <Communicate+0x106>
	           }
	           onOff = atoi(secondLastToken);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f002 f96c 	bl	8003f0c <atoi>
 8001c34:	4603      	mov	r3, r0
 8001c36:	b21a      	sxth	r2, r3
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <Communicate+0x164>)
 8001c3a:	801a      	strh	r2, [r3, #0]

}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd90      	pop	{r4, r7, pc}
 8001c44:	200004bc 	.word	0x200004bc
 8001c48:	080063d4 	.word	0x080063d4
 8001c4c:	20000430 	.word	0x20000430
 8001c50:	200003ec 	.word	0x200003ec
 8001c54:	20000488 	.word	0x20000488
 8001c58:	20000378 	.word	0x20000378
 8001c5c:	080063e4 	.word	0x080063e4
 8001c60:	080064c0 	.word	0x080064c0
 8001c64:	20000608 	.word	0x20000608
 8001c68:	08006548 	.word	0x08006548
 8001c6c:	20000008 	.word	0x20000008

08001c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c74:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c76:	e7fe      	b.n	8001c76 <Error_Handler+0x6>

08001c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_MspInit+0x5c>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <HAL_MspInit+0x5c>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6193      	str	r3, [r2, #24]
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_MspInit+0x5c>)
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <HAL_MspInit+0x5c>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	4a0e      	ldr	r2, [pc, #56]	; (8001cd4 <HAL_MspInit+0x5c>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	61d3      	str	r3, [r2, #28]
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <HAL_MspInit+0x5c>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_MspInit+0x60>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <HAL_MspInit+0x60>)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010000 	.word	0x40010000

08001cdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0318 	add.w	r3, r7, #24
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a28      	ldr	r2, [pc, #160]	; (8001d98 <HAL_ADC_MspInit+0xbc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d122      	bne.n	8001d42 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cfc:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <HAL_ADC_MspInit+0xc0>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	4a26      	ldr	r2, [pc, #152]	; (8001d9c <HAL_ADC_MspInit+0xc0>)
 8001d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d06:	6193      	str	r3, [r2, #24]
 8001d08:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <HAL_ADC_MspInit+0xc0>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d14:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <HAL_ADC_MspInit+0xc0>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a20      	ldr	r2, [pc, #128]	; (8001d9c <HAL_ADC_MspInit+0xc0>)
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <HAL_ADC_MspInit+0xc0>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d30:	2303      	movs	r3, #3
 8001d32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d34:	f107 0318 	add.w	r3, r7, #24
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4819      	ldr	r0, [pc, #100]	; (8001da0 <HAL_ADC_MspInit+0xc4>)
 8001d3c:	f000 fde2 	bl	8002904 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001d40:	e026      	b.n	8001d90 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a17      	ldr	r2, [pc, #92]	; (8001da4 <HAL_ADC_MspInit+0xc8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d121      	bne.n	8001d90 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <HAL_ADC_MspInit+0xc0>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <HAL_ADC_MspInit+0xc0>)
 8001d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d56:	6193      	str	r3, [r2, #24]
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <HAL_ADC_MspInit+0xc0>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d64:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_ADC_MspInit+0xc0>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	4a0c      	ldr	r2, [pc, #48]	; (8001d9c <HAL_ADC_MspInit+0xc0>)
 8001d6a:	f043 0304 	orr.w	r3, r3, #4
 8001d6e:	6193      	str	r3, [r2, #24]
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <HAL_ADC_MspInit+0xc0>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d80:	2303      	movs	r3, #3
 8001d82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d84:	f107 0318 	add.w	r3, r7, #24
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4805      	ldr	r0, [pc, #20]	; (8001da0 <HAL_ADC_MspInit+0xc4>)
 8001d8c:	f000 fdba 	bl	8002904 <HAL_GPIO_Init>
}
 8001d90:	bf00      	nop
 8001d92:	3728      	adds	r7, #40	; 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40012400 	.word	0x40012400
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010800 	.word	0x40010800
 8001da4:	40012800 	.word	0x40012800

08001da8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0310 	add.w	r3, r7, #16
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a1b      	ldr	r2, [pc, #108]	; (8001e30 <HAL_SPI_MspInit+0x88>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d12f      	bne.n	8001e28 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <HAL_SPI_MspInit+0x8c>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	4a19      	ldr	r2, [pc, #100]	; (8001e34 <HAL_SPI_MspInit+0x8c>)
 8001dce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dd2:	6193      	str	r3, [r2, #24]
 8001dd4:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <HAL_SPI_MspInit+0x8c>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <HAL_SPI_MspInit+0x8c>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4a13      	ldr	r2, [pc, #76]	; (8001e34 <HAL_SPI_MspInit+0x8c>)
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	6193      	str	r3, [r2, #24]
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_SPI_MspInit+0x8c>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001df8:	23a0      	movs	r3, #160	; 0xa0
 8001dfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e00:	2303      	movs	r3, #3
 8001e02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e04:	f107 0310 	add.w	r3, r7, #16
 8001e08:	4619      	mov	r1, r3
 8001e0a:	480b      	ldr	r0, [pc, #44]	; (8001e38 <HAL_SPI_MspInit+0x90>)
 8001e0c:	f000 fd7a 	bl	8002904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e10:	2340      	movs	r3, #64	; 0x40
 8001e12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	4619      	mov	r1, r3
 8001e22:	4805      	ldr	r0, [pc, #20]	; (8001e38 <HAL_SPI_MspInit+0x90>)
 8001e24:	f000 fd6e 	bl	8002904 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e28:	bf00      	nop
 8001e2a:	3720      	adds	r7, #32
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40013000 	.word	0x40013000
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40010800 	.word	0x40010800

08001e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 0310 	add.w	r3, r7, #16
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1c      	ldr	r2, [pc, #112]	; (8001ec8 <HAL_UART_MspInit+0x8c>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d131      	bne.n	8001ec0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_UART_MspInit+0x90>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	4a1a      	ldr	r2, [pc, #104]	; (8001ecc <HAL_UART_MspInit+0x90>)
 8001e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e66:	6193      	str	r3, [r2, #24]
 8001e68:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <HAL_UART_MspInit+0x90>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e74:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_UART_MspInit+0x90>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <HAL_UART_MspInit+0x90>)
 8001e7a:	f043 0304 	orr.w	r3, r3, #4
 8001e7e:	6193      	str	r3, [r2, #24]
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_UART_MspInit+0x90>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e96:	2303      	movs	r3, #3
 8001e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9a:	f107 0310 	add.w	r3, r7, #16
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	480b      	ldr	r0, [pc, #44]	; (8001ed0 <HAL_UART_MspInit+0x94>)
 8001ea2:	f000 fd2f 	bl	8002904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <HAL_UART_MspInit+0x94>)
 8001ebc:	f000 fd22 	bl	8002904 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ec0:	bf00      	nop
 8001ec2:	3720      	adds	r7, #32
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40013800 	.word	0x40013800
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40010800 	.word	0x40010800

08001ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <NMI_Handler+0x4>

08001eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <HardFault_Handler+0x4>

08001ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <MemManage_Handler+0x4>

08001ee6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <BusFault_Handler+0x4>

08001eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <UsageFault_Handler+0x4>

08001ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr

08001f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr

08001f16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f1a:	f000 f8ab 	bl	8002074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f2c:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <_sbrk+0x5c>)
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <_sbrk+0x60>)
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <_sbrk+0x64>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <_sbrk+0x64>)
 8001f42:	4a12      	ldr	r2, [pc, #72]	; (8001f8c <_sbrk+0x68>)
 8001f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d207      	bcs.n	8001f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f54:	f001 ffde 	bl	8003f14 <__errno>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	230c      	movs	r3, #12
 8001f5c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f62:	e009      	b.n	8001f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <_sbrk+0x64>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <_sbrk+0x64>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <_sbrk+0x64>)
 8001f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f76:	68fb      	ldr	r3, [r7, #12]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20005000 	.word	0x20005000
 8001f84:	00000400 	.word	0x00000400
 8001f88:	20000238 	.word	0x20000238
 8001f8c:	200007b8 	.word	0x200007b8

08001f90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f9c:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f9e:	490d      	ldr	r1, [pc, #52]	; (8001fd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa4:	e002      	b.n	8001fac <LoopCopyDataInit>

08001fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001faa:	3304      	adds	r3, #4

08001fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb0:	d3f9      	bcc.n	8001fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fb4:	4c0a      	ldr	r4, [pc, #40]	; (8001fe0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb8:	e001      	b.n	8001fbe <LoopFillZerobss>

08001fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fbc:	3204      	adds	r2, #4

08001fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc0:	d3fb      	bcc.n	8001fba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fc2:	f7ff ffe5 	bl	8001f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fc6:	f001 ffab 	bl	8003f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fca:	f7ff f815 	bl	8000ff8 <main>
  bx lr
 8001fce:	4770      	bx	lr
  ldr r0, =_sdata
 8001fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001fd8:	08007538 	.word	0x08007538
  ldr r2, =_sbss
 8001fdc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001fe0:	200007b4 	.word	0x200007b4

08001fe4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fe4:	e7fe      	b.n	8001fe4 <ADC1_2_IRQHandler>
	...

08001fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_Init+0x28>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <HAL_Init+0x28>)
 8001ff2:	f043 0310 	orr.w	r3, r3, #16
 8001ff6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff8:	2003      	movs	r0, #3
 8001ffa:	f000 fc4f 	bl	800289c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f000 f808 	bl	8002014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002004:	f7ff fe38 	bl	8001c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40022000 	.word	0x40022000

08002014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_InitTick+0x54>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_InitTick+0x58>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	4619      	mov	r1, r3
 8002026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800202a:	fbb3 f3f1 	udiv	r3, r3, r1
 800202e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fc59 	bl	80028ea <HAL_SYSTICK_Config>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e00e      	b.n	8002060 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b0f      	cmp	r3, #15
 8002046:	d80a      	bhi.n	800205e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002048:	2200      	movs	r2, #0
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	f04f 30ff 	mov.w	r0, #4294967295
 8002050:	f000 fc2f 	bl	80028b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002054:	4a06      	ldr	r2, [pc, #24]	; (8002070 <HAL_InitTick+0x5c>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e000      	b.n	8002060 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	2000000c 	.word	0x2000000c
 800206c:	20000014 	.word	0x20000014
 8002070:	20000010 	.word	0x20000010

08002074 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_IncTick+0x1c>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_IncTick+0x20>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4413      	add	r3, r2
 8002084:	4a03      	ldr	r2, [pc, #12]	; (8002094 <HAL_IncTick+0x20>)
 8002086:	6013      	str	r3, [r2, #0]
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr
 8002090:	20000014 	.word	0x20000014
 8002094:	200007ac 	.word	0x200007ac

08002098 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return uwTick;
 800209c:	4b02      	ldr	r3, [pc, #8]	; (80020a8 <HAL_GetTick+0x10>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	200007ac 	.word	0x200007ac

080020ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b4:	f7ff fff0 	bl	8002098 <HAL_GetTick>
 80020b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c4:	d005      	beq.n	80020d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_Delay+0x40>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020d2:	bf00      	nop
 80020d4:	f7ff ffe0 	bl	8002098 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d8f7      	bhi.n	80020d4 <HAL_Delay+0x28>
  {
  }
}
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000014 	.word	0x20000014

080020f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e0be      	b.n	8002290 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	2b00      	cmp	r3, #0
 800211e:	d109      	bne.n	8002134 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff fdd4 	bl	8001cdc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 fabf 	bl	80026b8 <ADC_ConversionStop_Disable>
 800213a:	4603      	mov	r3, r0
 800213c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b00      	cmp	r3, #0
 8002148:	f040 8099 	bne.w	800227e <HAL_ADC_Init+0x18e>
 800214c:	7dfb      	ldrb	r3, [r7, #23]
 800214e:	2b00      	cmp	r3, #0
 8002150:	f040 8095 	bne.w	800227e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800215c:	f023 0302 	bic.w	r3, r3, #2
 8002160:	f043 0202 	orr.w	r2, r3, #2
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002170:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7b1b      	ldrb	r3, [r3, #12]
 8002176:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002178:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	4313      	orrs	r3, r2
 800217e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002188:	d003      	beq.n	8002192 <HAL_ADC_Init+0xa2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d102      	bne.n	8002198 <HAL_ADC_Init+0xa8>
 8002192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002196:	e000      	b.n	800219a <HAL_ADC_Init+0xaa>
 8002198:	2300      	movs	r3, #0
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	7d1b      	ldrb	r3, [r3, #20]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d119      	bne.n	80021dc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7b1b      	ldrb	r3, [r3, #12]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d109      	bne.n	80021c4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	035a      	lsls	r2, r3, #13
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	e00b      	b.n	80021dc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	f043 0220 	orr.w	r2, r3, #32
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	f043 0201 	orr.w	r2, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	4b28      	ldr	r3, [pc, #160]	; (8002298 <HAL_ADC_Init+0x1a8>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	68b9      	ldr	r1, [r7, #8]
 8002200:	430b      	orrs	r3, r1
 8002202:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800220c:	d003      	beq.n	8002216 <HAL_ADC_Init+0x126>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d104      	bne.n	8002220 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	3b01      	subs	r3, #1
 800221c:	051b      	lsls	r3, r3, #20
 800221e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	430a      	orrs	r2, r1
 8002232:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	4b18      	ldr	r3, [pc, #96]	; (800229c <HAL_ADC_Init+0x1ac>)
 800223c:	4013      	ands	r3, r2
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	429a      	cmp	r2, r3
 8002242:	d10b      	bne.n	800225c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	f023 0303 	bic.w	r3, r3, #3
 8002252:	f043 0201 	orr.w	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800225a:	e018      	b.n	800228e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	f023 0312 	bic.w	r3, r3, #18
 8002264:	f043 0210 	orr.w	r2, r3, #16
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	f043 0201 	orr.w	r2, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800227c:	e007      	b.n	800228e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002282:	f043 0210 	orr.w	r2, r3, #16
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800228e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	ffe1f7fd 	.word	0xffe1f7fd
 800229c:	ff1f0efe 	.word	0xff1f0efe

080022a0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_Start+0x1a>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e098      	b.n	80023ec <HAL_ADC_Start+0x14c>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f99e 	bl	8002604 <ADC_Enable>
 80022c8:	4603      	mov	r3, r0
 80022ca:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 8087 	bne.w	80023e2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022dc:	f023 0301 	bic.w	r3, r3, #1
 80022e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a41      	ldr	r2, [pc, #260]	; (80023f4 <HAL_ADC_Start+0x154>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d105      	bne.n	80022fe <HAL_ADC_Start+0x5e>
 80022f2:	4b41      	ldr	r3, [pc, #260]	; (80023f8 <HAL_ADC_Start+0x158>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d115      	bne.n	800232a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002302:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002314:	2b00      	cmp	r3, #0
 8002316:	d026      	beq.n	8002366 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002320:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002328:	e01d      	b.n	8002366 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a2f      	ldr	r2, [pc, #188]	; (80023f8 <HAL_ADC_Start+0x158>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d004      	beq.n	800234a <HAL_ADC_Start+0xaa>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a2b      	ldr	r2, [pc, #172]	; (80023f4 <HAL_ADC_Start+0x154>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d10d      	bne.n	8002366 <HAL_ADC_Start+0xc6>
 800234a:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <HAL_ADC_Start+0x158>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002352:	2b00      	cmp	r3, #0
 8002354:	d007      	beq.n	8002366 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800235e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d006      	beq.n	8002380 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	f023 0206 	bic.w	r2, r3, #6
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	62da      	str	r2, [r3, #44]	; 0x2c
 800237e:	e002      	b.n	8002386 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f06f 0202 	mvn.w	r2, #2
 8002396:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023a6:	d113      	bne.n	80023d0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023ac:	4a11      	ldr	r2, [pc, #68]	; (80023f4 <HAL_ADC_Start+0x154>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d105      	bne.n	80023be <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <HAL_ADC_Start+0x158>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d108      	bne.n	80023d0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80023cc:	609a      	str	r2, [r3, #8]
 80023ce:	e00c      	b.n	80023ea <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	e003      	b.n	80023ea <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40012800 	.word	0x40012800
 80023f8:	40012400 	.word	0x40012400

080023fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x20>
 8002430:	2302      	movs	r3, #2
 8002432:	e0dc      	b.n	80025ee <HAL_ADC_ConfigChannel+0x1da>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b06      	cmp	r3, #6
 8002442:	d81c      	bhi.n	800247e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	3b05      	subs	r3, #5
 8002456:	221f      	movs	r2, #31
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	4019      	ands	r1, r3
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	3b05      	subs	r3, #5
 8002470:	fa00 f203 	lsl.w	r2, r0, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	635a      	str	r2, [r3, #52]	; 0x34
 800247c:	e03c      	b.n	80024f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b0c      	cmp	r3, #12
 8002484:	d81c      	bhi.n	80024c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	3b23      	subs	r3, #35	; 0x23
 8002498:	221f      	movs	r2, #31
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	4019      	ands	r1, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	3b23      	subs	r3, #35	; 0x23
 80024b2:	fa00 f203 	lsl.w	r2, r0, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30
 80024be:	e01b      	b.n	80024f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	3b41      	subs	r3, #65	; 0x41
 80024d2:	221f      	movs	r2, #31
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	4019      	ands	r1, r3
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	3b41      	subs	r3, #65	; 0x41
 80024ec:	fa00 f203 	lsl.w	r2, r0, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b09      	cmp	r3, #9
 80024fe:	d91c      	bls.n	800253a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68d9      	ldr	r1, [r3, #12]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	4613      	mov	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	3b1e      	subs	r3, #30
 8002512:	2207      	movs	r2, #7
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	4019      	ands	r1, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6898      	ldr	r0, [r3, #8]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	3b1e      	subs	r3, #30
 800252c:	fa00 f203 	lsl.w	r2, r0, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	60da      	str	r2, [r3, #12]
 8002538:	e019      	b.n	800256e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6919      	ldr	r1, [r3, #16]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	2207      	movs	r2, #7
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	4019      	ands	r1, r3
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	6898      	ldr	r0, [r3, #8]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	fa00 f203 	lsl.w	r2, r0, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b10      	cmp	r3, #16
 8002574:	d003      	beq.n	800257e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800257a:	2b11      	cmp	r3, #17
 800257c:	d132      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a1d      	ldr	r2, [pc, #116]	; (80025f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d125      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d126      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80025a4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b10      	cmp	r3, #16
 80025ac:	d11a      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025ae:	4b13      	ldr	r3, [pc, #76]	; (80025fc <HAL_ADC_ConfigChannel+0x1e8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a13      	ldr	r2, [pc, #76]	; (8002600 <HAL_ADC_ConfigChannel+0x1ec>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	0c9a      	lsrs	r2, r3, #18
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025c4:	e002      	b.n	80025cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f9      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x1b2>
 80025d2:	e007      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	f043 0220 	orr.w	r2, r3, #32
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr
 80025f8:	40012400 	.word	0x40012400
 80025fc:	2000000c 	.word	0x2000000c
 8002600:	431bde83 	.word	0x431bde83

08002604 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b01      	cmp	r3, #1
 8002620:	d040      	beq.n	80026a4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0201 	orr.w	r2, r2, #1
 8002630:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002632:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <ADC_Enable+0xac>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1f      	ldr	r2, [pc, #124]	; (80026b4 <ADC_Enable+0xb0>)
 8002638:	fba2 2303 	umull	r2, r3, r2, r3
 800263c:	0c9b      	lsrs	r3, r3, #18
 800263e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002640:	e002      	b.n	8002648 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	3b01      	subs	r3, #1
 8002646:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f9      	bne.n	8002642 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800264e:	f7ff fd23 	bl	8002098 <HAL_GetTick>
 8002652:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002654:	e01f      	b.n	8002696 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002656:	f7ff fd1f 	bl	8002098 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d918      	bls.n	8002696 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b01      	cmp	r3, #1
 8002670:	d011      	beq.n	8002696 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	f043 0210 	orr.w	r2, r3, #16
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002682:	f043 0201 	orr.w	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e007      	b.n	80026a6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d1d8      	bne.n	8002656 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	2000000c 	.word	0x2000000c
 80026b4:	431bde83 	.word	0x431bde83

080026b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d12e      	bne.n	8002730 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0201 	bic.w	r2, r2, #1
 80026e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026e2:	f7ff fcd9 	bl	8002098 <HAL_GetTick>
 80026e6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026e8:	e01b      	b.n	8002722 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026ea:	f7ff fcd5 	bl	8002098 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d914      	bls.n	8002722 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b01      	cmp	r3, #1
 8002704:	d10d      	bne.n	8002722 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	f043 0210 	orr.w	r2, r3, #16
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	f043 0201 	orr.w	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e007      	b.n	8002732 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b01      	cmp	r3, #1
 800272e:	d0dc      	beq.n	80026ea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800274c:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <__NVIC_SetPriorityGrouping+0x44>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002758:	4013      	ands	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800276c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276e:	4a04      	ldr	r2, [pc, #16]	; (8002780 <__NVIC_SetPriorityGrouping+0x44>)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	60d3      	str	r3, [r2, #12]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <__NVIC_GetPriorityGrouping+0x18>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	0a1b      	lsrs	r3, r3, #8
 800278e:	f003 0307 	and.w	r3, r3, #7
}
 8002792:	4618      	mov	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	6039      	str	r1, [r7, #0]
 80027aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	db0a      	blt.n	80027ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	490c      	ldr	r1, [pc, #48]	; (80027ec <__NVIC_SetPriority+0x4c>)
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	0112      	lsls	r2, r2, #4
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	440b      	add	r3, r1
 80027c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c8:	e00a      	b.n	80027e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	4908      	ldr	r1, [pc, #32]	; (80027f0 <__NVIC_SetPriority+0x50>)
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	3b04      	subs	r3, #4
 80027d8:	0112      	lsls	r2, r2, #4
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	440b      	add	r3, r1
 80027de:	761a      	strb	r2, [r3, #24]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	e000e100 	.word	0xe000e100
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	; 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f1c3 0307 	rsb	r3, r3, #7
 800280e:	2b04      	cmp	r3, #4
 8002810:	bf28      	it	cs
 8002812:	2304      	movcs	r3, #4
 8002814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3304      	adds	r3, #4
 800281a:	2b06      	cmp	r3, #6
 800281c:	d902      	bls.n	8002824 <NVIC_EncodePriority+0x30>
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3b03      	subs	r3, #3
 8002822:	e000      	b.n	8002826 <NVIC_EncodePriority+0x32>
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002828:	f04f 32ff 	mov.w	r2, #4294967295
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43da      	mvns	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	401a      	ands	r2, r3
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800283c:	f04f 31ff 	mov.w	r1, #4294967295
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	fa01 f303 	lsl.w	r3, r1, r3
 8002846:	43d9      	mvns	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284c:	4313      	orrs	r3, r2
         );
}
 800284e:	4618      	mov	r0, r3
 8002850:	3724      	adds	r7, #36	; 0x24
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002868:	d301      	bcc.n	800286e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800286a:	2301      	movs	r3, #1
 800286c:	e00f      	b.n	800288e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800286e:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <SysTick_Config+0x40>)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3b01      	subs	r3, #1
 8002874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002876:	210f      	movs	r1, #15
 8002878:	f04f 30ff 	mov.w	r0, #4294967295
 800287c:	f7ff ff90 	bl	80027a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <SysTick_Config+0x40>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002886:	4b04      	ldr	r3, [pc, #16]	; (8002898 <SysTick_Config+0x40>)
 8002888:	2207      	movs	r2, #7
 800288a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	e000e010 	.word	0xe000e010

0800289c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff ff49 	bl	800273c <__NVIC_SetPriorityGrouping>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	4603      	mov	r3, r0
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028c4:	f7ff ff5e 	bl	8002784 <__NVIC_GetPriorityGrouping>
 80028c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	6978      	ldr	r0, [r7, #20]
 80028d0:	f7ff ff90 	bl	80027f4 <NVIC_EncodePriority>
 80028d4:	4602      	mov	r2, r0
 80028d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff5f 	bl	80027a0 <__NVIC_SetPriority>
}
 80028e2:	bf00      	nop
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff ffb0 	bl	8002858 <SysTick_Config>
 80028f8:	4603      	mov	r3, r0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002904:	b480      	push	{r7}
 8002906:	b08b      	sub	sp, #44	; 0x2c
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800290e:	2300      	movs	r3, #0
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002912:	2300      	movs	r3, #0
 8002914:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002916:	e127      	b.n	8002b68 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002918:	2201      	movs	r2, #1
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	429a      	cmp	r2, r3
 8002932:	f040 8116 	bne.w	8002b62 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b12      	cmp	r3, #18
 800293c:	d034      	beq.n	80029a8 <HAL_GPIO_Init+0xa4>
 800293e:	2b12      	cmp	r3, #18
 8002940:	d80d      	bhi.n	800295e <HAL_GPIO_Init+0x5a>
 8002942:	2b02      	cmp	r3, #2
 8002944:	d02b      	beq.n	800299e <HAL_GPIO_Init+0x9a>
 8002946:	2b02      	cmp	r3, #2
 8002948:	d804      	bhi.n	8002954 <HAL_GPIO_Init+0x50>
 800294a:	2b00      	cmp	r3, #0
 800294c:	d031      	beq.n	80029b2 <HAL_GPIO_Init+0xae>
 800294e:	2b01      	cmp	r3, #1
 8002950:	d01c      	beq.n	800298c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002952:	e048      	b.n	80029e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002954:	2b03      	cmp	r3, #3
 8002956:	d043      	beq.n	80029e0 <HAL_GPIO_Init+0xdc>
 8002958:	2b11      	cmp	r3, #17
 800295a:	d01b      	beq.n	8002994 <HAL_GPIO_Init+0x90>
          break;
 800295c:	e043      	b.n	80029e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800295e:	4a89      	ldr	r2, [pc, #548]	; (8002b84 <HAL_GPIO_Init+0x280>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d026      	beq.n	80029b2 <HAL_GPIO_Init+0xae>
 8002964:	4a87      	ldr	r2, [pc, #540]	; (8002b84 <HAL_GPIO_Init+0x280>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d806      	bhi.n	8002978 <HAL_GPIO_Init+0x74>
 800296a:	4a87      	ldr	r2, [pc, #540]	; (8002b88 <HAL_GPIO_Init+0x284>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d020      	beq.n	80029b2 <HAL_GPIO_Init+0xae>
 8002970:	4a86      	ldr	r2, [pc, #536]	; (8002b8c <HAL_GPIO_Init+0x288>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d01d      	beq.n	80029b2 <HAL_GPIO_Init+0xae>
          break;
 8002976:	e036      	b.n	80029e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002978:	4a85      	ldr	r2, [pc, #532]	; (8002b90 <HAL_GPIO_Init+0x28c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d019      	beq.n	80029b2 <HAL_GPIO_Init+0xae>
 800297e:	4a85      	ldr	r2, [pc, #532]	; (8002b94 <HAL_GPIO_Init+0x290>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d016      	beq.n	80029b2 <HAL_GPIO_Init+0xae>
 8002984:	4a84      	ldr	r2, [pc, #528]	; (8002b98 <HAL_GPIO_Init+0x294>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d013      	beq.n	80029b2 <HAL_GPIO_Init+0xae>
          break;
 800298a:	e02c      	b.n	80029e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	623b      	str	r3, [r7, #32]
          break;
 8002992:	e028      	b.n	80029e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	3304      	adds	r3, #4
 800299a:	623b      	str	r3, [r7, #32]
          break;
 800299c:	e023      	b.n	80029e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	3308      	adds	r3, #8
 80029a4:	623b      	str	r3, [r7, #32]
          break;
 80029a6:	e01e      	b.n	80029e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	330c      	adds	r3, #12
 80029ae:	623b      	str	r3, [r7, #32]
          break;
 80029b0:	e019      	b.n	80029e6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d102      	bne.n	80029c0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029ba:	2304      	movs	r3, #4
 80029bc:	623b      	str	r3, [r7, #32]
          break;
 80029be:	e012      	b.n	80029e6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d105      	bne.n	80029d4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029c8:	2308      	movs	r3, #8
 80029ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69fa      	ldr	r2, [r7, #28]
 80029d0:	611a      	str	r2, [r3, #16]
          break;
 80029d2:	e008      	b.n	80029e6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029d4:	2308      	movs	r3, #8
 80029d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69fa      	ldr	r2, [r7, #28]
 80029dc:	615a      	str	r2, [r3, #20]
          break;
 80029de:	e002      	b.n	80029e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029e0:	2300      	movs	r3, #0
 80029e2:	623b      	str	r3, [r7, #32]
          break;
 80029e4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	2bff      	cmp	r3, #255	; 0xff
 80029ea:	d801      	bhi.n	80029f0 <HAL_GPIO_Init+0xec>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	e001      	b.n	80029f4 <HAL_GPIO_Init+0xf0>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3304      	adds	r3, #4
 80029f4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	2bff      	cmp	r3, #255	; 0xff
 80029fa:	d802      	bhi.n	8002a02 <HAL_GPIO_Init+0xfe>
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	e002      	b.n	8002a08 <HAL_GPIO_Init+0x104>
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	3b08      	subs	r3, #8
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	210f      	movs	r1, #15
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	401a      	ands	r2, r3
 8002a1a:	6a39      	ldr	r1, [r7, #32]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	431a      	orrs	r2, r3
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8096 	beq.w	8002b62 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a36:	4b59      	ldr	r3, [pc, #356]	; (8002b9c <HAL_GPIO_Init+0x298>)
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	4a58      	ldr	r2, [pc, #352]	; (8002b9c <HAL_GPIO_Init+0x298>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6193      	str	r3, [r2, #24]
 8002a42:	4b56      	ldr	r3, [pc, #344]	; (8002b9c <HAL_GPIO_Init+0x298>)
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a4e:	4a54      	ldr	r2, [pc, #336]	; (8002ba0 <HAL_GPIO_Init+0x29c>)
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	3302      	adds	r3, #2
 8002a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	220f      	movs	r2, #15
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a4b      	ldr	r2, [pc, #300]	; (8002ba4 <HAL_GPIO_Init+0x2a0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d013      	beq.n	8002aa2 <HAL_GPIO_Init+0x19e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a4a      	ldr	r2, [pc, #296]	; (8002ba8 <HAL_GPIO_Init+0x2a4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00d      	beq.n	8002a9e <HAL_GPIO_Init+0x19a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a49      	ldr	r2, [pc, #292]	; (8002bac <HAL_GPIO_Init+0x2a8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d007      	beq.n	8002a9a <HAL_GPIO_Init+0x196>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a48      	ldr	r2, [pc, #288]	; (8002bb0 <HAL_GPIO_Init+0x2ac>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d101      	bne.n	8002a96 <HAL_GPIO_Init+0x192>
 8002a92:	2303      	movs	r3, #3
 8002a94:	e006      	b.n	8002aa4 <HAL_GPIO_Init+0x1a0>
 8002a96:	2304      	movs	r3, #4
 8002a98:	e004      	b.n	8002aa4 <HAL_GPIO_Init+0x1a0>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e002      	b.n	8002aa4 <HAL_GPIO_Init+0x1a0>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <HAL_GPIO_Init+0x1a0>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa6:	f002 0203 	and.w	r2, r2, #3
 8002aaa:	0092      	lsls	r2, r2, #2
 8002aac:	4093      	lsls	r3, r2
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ab4:	493a      	ldr	r1, [pc, #232]	; (8002ba0 <HAL_GPIO_Init+0x29c>)
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	089b      	lsrs	r3, r3, #2
 8002aba:	3302      	adds	r3, #2
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d006      	beq.n	8002adc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ace:	4b39      	ldr	r3, [pc, #228]	; (8002bb4 <HAL_GPIO_Init+0x2b0>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4938      	ldr	r1, [pc, #224]	; (8002bb4 <HAL_GPIO_Init+0x2b0>)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]
 8002ada:	e006      	b.n	8002aea <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002adc:	4b35      	ldr	r3, [pc, #212]	; (8002bb4 <HAL_GPIO_Init+0x2b0>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	4933      	ldr	r1, [pc, #204]	; (8002bb4 <HAL_GPIO_Init+0x2b0>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d006      	beq.n	8002b04 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002af6:	4b2f      	ldr	r3, [pc, #188]	; (8002bb4 <HAL_GPIO_Init+0x2b0>)
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	492e      	ldr	r1, [pc, #184]	; (8002bb4 <HAL_GPIO_Init+0x2b0>)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	604b      	str	r3, [r1, #4]
 8002b02:	e006      	b.n	8002b12 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b04:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <HAL_GPIO_Init+0x2b0>)
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	4929      	ldr	r1, [pc, #164]	; (8002bb4 <HAL_GPIO_Init+0x2b0>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d006      	beq.n	8002b2c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b1e:	4b25      	ldr	r3, [pc, #148]	; (8002bb4 <HAL_GPIO_Init+0x2b0>)
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	4924      	ldr	r1, [pc, #144]	; (8002bb4 <HAL_GPIO_Init+0x2b0>)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
 8002b2a:	e006      	b.n	8002b3a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b2c:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <HAL_GPIO_Init+0x2b0>)
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	43db      	mvns	r3, r3
 8002b34:	491f      	ldr	r1, [pc, #124]	; (8002bb4 <HAL_GPIO_Init+0x2b0>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d006      	beq.n	8002b54 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b46:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_GPIO_Init+0x2b0>)
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	491a      	ldr	r1, [pc, #104]	; (8002bb4 <HAL_GPIO_Init+0x2b0>)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60cb      	str	r3, [r1, #12]
 8002b52:	e006      	b.n	8002b62 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b54:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <HAL_GPIO_Init+0x2b0>)
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	4915      	ldr	r1, [pc, #84]	; (8002bb4 <HAL_GPIO_Init+0x2b0>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	3301      	adds	r3, #1
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f47f aed0 	bne.w	8002918 <HAL_GPIO_Init+0x14>
  }
}
 8002b78:	bf00      	nop
 8002b7a:	372c      	adds	r7, #44	; 0x2c
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	10210000 	.word	0x10210000
 8002b88:	10110000 	.word	0x10110000
 8002b8c:	10120000 	.word	0x10120000
 8002b90:	10310000 	.word	0x10310000
 8002b94:	10320000 	.word	0x10320000
 8002b98:	10220000 	.word	0x10220000
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	40010000 	.word	0x40010000
 8002ba4:	40010800 	.word	0x40010800
 8002ba8:	40010c00 	.word	0x40010c00
 8002bac:	40011000 	.word	0x40011000
 8002bb0:	40011400 	.word	0x40011400
 8002bb4:	40010400 	.word	0x40010400

08002bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	807b      	strh	r3, [r7, #2]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bc8:	787b      	ldrb	r3, [r7, #1]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bce:	887a      	ldrh	r2, [r7, #2]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bd4:	e003      	b.n	8002bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bd6:	887b      	ldrh	r3, [r7, #2]
 8002bd8:	041a      	lsls	r2, r3, #16
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	611a      	str	r2, [r3, #16]
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e26c      	b.n	80030d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 8087 	beq.w	8002d16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c08:	4b92      	ldr	r3, [pc, #584]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 030c 	and.w	r3, r3, #12
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d00c      	beq.n	8002c2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c14:	4b8f      	ldr	r3, [pc, #572]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d112      	bne.n	8002c46 <HAL_RCC_OscConfig+0x5e>
 8002c20:	4b8c      	ldr	r3, [pc, #560]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2c:	d10b      	bne.n	8002c46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2e:	4b89      	ldr	r3, [pc, #548]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d06c      	beq.n	8002d14 <HAL_RCC_OscConfig+0x12c>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d168      	bne.n	8002d14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e246      	b.n	80030d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4e:	d106      	bne.n	8002c5e <HAL_RCC_OscConfig+0x76>
 8002c50:	4b80      	ldr	r3, [pc, #512]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a7f      	ldr	r2, [pc, #508]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	e02e      	b.n	8002cbc <HAL_RCC_OscConfig+0xd4>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x98>
 8002c66:	4b7b      	ldr	r3, [pc, #492]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a7a      	ldr	r2, [pc, #488]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b78      	ldr	r3, [pc, #480]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a77      	ldr	r2, [pc, #476]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e01d      	b.n	8002cbc <HAL_RCC_OscConfig+0xd4>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0xbc>
 8002c8a:	4b72      	ldr	r3, [pc, #456]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a71      	ldr	r2, [pc, #452]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	4b6f      	ldr	r3, [pc, #444]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a6e      	ldr	r2, [pc, #440]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	e00b      	b.n	8002cbc <HAL_RCC_OscConfig+0xd4>
 8002ca4:	4b6b      	ldr	r3, [pc, #428]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a6a      	ldr	r2, [pc, #424]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	4b68      	ldr	r3, [pc, #416]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a67      	ldr	r2, [pc, #412]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d013      	beq.n	8002cec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7ff f9e8 	bl	8002098 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7ff f9e4 	bl	8002098 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	; 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e1fa      	b.n	80030d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cde:	4b5d      	ldr	r3, [pc, #372]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0xe4>
 8002cea:	e014      	b.n	8002d16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cec:	f7ff f9d4 	bl	8002098 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf4:	f7ff f9d0 	bl	8002098 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	; 0x64
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e1e6      	b.n	80030d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d06:	4b53      	ldr	r3, [pc, #332]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x10c>
 8002d12:	e000      	b.n	8002d16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d063      	beq.n	8002dea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d22:	4b4c      	ldr	r3, [pc, #304]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00b      	beq.n	8002d46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d2e:	4b49      	ldr	r3, [pc, #292]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d11c      	bne.n	8002d74 <HAL_RCC_OscConfig+0x18c>
 8002d3a:	4b46      	ldr	r3, [pc, #280]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d116      	bne.n	8002d74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	4b43      	ldr	r3, [pc, #268]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <HAL_RCC_OscConfig+0x176>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d001      	beq.n	8002d5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e1ba      	b.n	80030d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5e:	4b3d      	ldr	r3, [pc, #244]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4939      	ldr	r1, [pc, #228]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d72:	e03a      	b.n	8002dea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d020      	beq.n	8002dbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d7c:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d82:	f7ff f989 	bl	8002098 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8a:	f7ff f985 	bl	8002098 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e19b      	b.n	80030d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9c:	4b2d      	ldr	r3, [pc, #180]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da8:	4b2a      	ldr	r3, [pc, #168]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4927      	ldr	r1, [pc, #156]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	600b      	str	r3, [r1, #0]
 8002dbc:	e015      	b.n	8002dea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dbe:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc4:	f7ff f968 	bl	8002098 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dcc:	f7ff f964 	bl	8002098 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e17a      	b.n	80030d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dde:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d03a      	beq.n	8002e6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d019      	beq.n	8002e32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dfe:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <HAL_RCC_OscConfig+0x274>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e04:	f7ff f948 	bl	8002098 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0c:	f7ff f944 	bl	8002098 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e15a      	b.n	80030d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e2a:	2001      	movs	r0, #1
 8002e2c:	f000 fada 	bl	80033e4 <RCC_Delay>
 8002e30:	e01c      	b.n	8002e6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <HAL_RCC_OscConfig+0x274>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e38:	f7ff f92e 	bl	8002098 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e3e:	e00f      	b.n	8002e60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e40:	f7ff f92a 	bl	8002098 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d908      	bls.n	8002e60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e140      	b.n	80030d4 <HAL_RCC_OscConfig+0x4ec>
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
 8002e58:	42420000 	.word	0x42420000
 8002e5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e60:	4b9e      	ldr	r3, [pc, #632]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1e9      	bne.n	8002e40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 80a6 	beq.w	8002fc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e7e:	4b97      	ldr	r3, [pc, #604]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10d      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8a:	4b94      	ldr	r3, [pc, #592]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	4a93      	ldr	r2, [pc, #588]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e94:	61d3      	str	r3, [r2, #28]
 8002e96:	4b91      	ldr	r3, [pc, #580]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea6:	4b8e      	ldr	r3, [pc, #568]	; (80030e0 <HAL_RCC_OscConfig+0x4f8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d118      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eb2:	4b8b      	ldr	r3, [pc, #556]	; (80030e0 <HAL_RCC_OscConfig+0x4f8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a8a      	ldr	r2, [pc, #552]	; (80030e0 <HAL_RCC_OscConfig+0x4f8>)
 8002eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ebe:	f7ff f8eb 	bl	8002098 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec6:	f7ff f8e7 	bl	8002098 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b64      	cmp	r3, #100	; 0x64
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e0fd      	b.n	80030d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed8:	4b81      	ldr	r3, [pc, #516]	; (80030e0 <HAL_RCC_OscConfig+0x4f8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d106      	bne.n	8002efa <HAL_RCC_OscConfig+0x312>
 8002eec:	4b7b      	ldr	r3, [pc, #492]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	4a7a      	ldr	r2, [pc, #488]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6213      	str	r3, [r2, #32]
 8002ef8:	e02d      	b.n	8002f56 <HAL_RCC_OscConfig+0x36e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0x334>
 8002f02:	4b76      	ldr	r3, [pc, #472]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4a75      	ldr	r2, [pc, #468]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	6213      	str	r3, [r2, #32]
 8002f0e:	4b73      	ldr	r3, [pc, #460]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4a72      	ldr	r2, [pc, #456]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002f14:	f023 0304 	bic.w	r3, r3, #4
 8002f18:	6213      	str	r3, [r2, #32]
 8002f1a:	e01c      	b.n	8002f56 <HAL_RCC_OscConfig+0x36e>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	2b05      	cmp	r3, #5
 8002f22:	d10c      	bne.n	8002f3e <HAL_RCC_OscConfig+0x356>
 8002f24:	4b6d      	ldr	r3, [pc, #436]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4a6c      	ldr	r2, [pc, #432]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002f2a:	f043 0304 	orr.w	r3, r3, #4
 8002f2e:	6213      	str	r3, [r2, #32]
 8002f30:	4b6a      	ldr	r3, [pc, #424]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	4a69      	ldr	r2, [pc, #420]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6213      	str	r3, [r2, #32]
 8002f3c:	e00b      	b.n	8002f56 <HAL_RCC_OscConfig+0x36e>
 8002f3e:	4b67      	ldr	r3, [pc, #412]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	4a66      	ldr	r2, [pc, #408]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	6213      	str	r3, [r2, #32]
 8002f4a:	4b64      	ldr	r3, [pc, #400]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	4a63      	ldr	r2, [pc, #396]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002f50:	f023 0304 	bic.w	r3, r3, #4
 8002f54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d015      	beq.n	8002f8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5e:	f7ff f89b 	bl	8002098 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f64:	e00a      	b.n	8002f7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f66:	f7ff f897 	bl	8002098 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e0ab      	b.n	80030d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7c:	4b57      	ldr	r3, [pc, #348]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ee      	beq.n	8002f66 <HAL_RCC_OscConfig+0x37e>
 8002f88:	e014      	b.n	8002fb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8a:	f7ff f885 	bl	8002098 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f92:	f7ff f881 	bl	8002098 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e095      	b.n	80030d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa8:	4b4c      	ldr	r3, [pc, #304]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1ee      	bne.n	8002f92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d105      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fba:	4b48      	ldr	r3, [pc, #288]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	4a47      	ldr	r2, [pc, #284]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 8081 	beq.w	80030d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fd0:	4b42      	ldr	r3, [pc, #264]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d061      	beq.n	80030a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d146      	bne.n	8003072 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe4:	4b3f      	ldr	r3, [pc, #252]	; (80030e4 <HAL_RCC_OscConfig+0x4fc>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fea:	f7ff f855 	bl	8002098 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff2:	f7ff f851 	bl	8002098 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e067      	b.n	80030d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003004:	4b35      	ldr	r3, [pc, #212]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1f0      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003018:	d108      	bne.n	800302c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800301a:	4b30      	ldr	r3, [pc, #192]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	492d      	ldr	r1, [pc, #180]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8003028:	4313      	orrs	r3, r2
 800302a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800302c:	4b2b      	ldr	r3, [pc, #172]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a19      	ldr	r1, [r3, #32]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	430b      	orrs	r3, r1
 800303e:	4927      	ldr	r1, [pc, #156]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8003040:	4313      	orrs	r3, r2
 8003042:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003044:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <HAL_RCC_OscConfig+0x4fc>)
 8003046:	2201      	movs	r2, #1
 8003048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7ff f825 	bl	8002098 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003052:	f7ff f821 	bl	8002098 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e037      	b.n	80030d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003064:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0f0      	beq.n	8003052 <HAL_RCC_OscConfig+0x46a>
 8003070:	e02f      	b.n	80030d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003072:	4b1c      	ldr	r3, [pc, #112]	; (80030e4 <HAL_RCC_OscConfig+0x4fc>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7ff f80e 	bl	8002098 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003080:	f7ff f80a 	bl	8002098 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e020      	b.n	80030d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003092:	4b12      	ldr	r3, [pc, #72]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x498>
 800309e:	e018      	b.n	80030d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e013      	b.n	80030d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030ac:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <HAL_RCC_OscConfig+0x4f4>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d106      	bne.n	80030ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d001      	beq.n	80030d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40007000 	.word	0x40007000
 80030e4:	42420060 	.word	0x42420060

080030e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0d0      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030fc:	4b6a      	ldr	r3, [pc, #424]	; (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d910      	bls.n	800312c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310a:	4b67      	ldr	r3, [pc, #412]	; (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 0207 	bic.w	r2, r3, #7
 8003112:	4965      	ldr	r1, [pc, #404]	; (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b63      	ldr	r3, [pc, #396]	; (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0b8      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003144:	4b59      	ldr	r3, [pc, #356]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a58      	ldr	r2, [pc, #352]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800314e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800315c:	4b53      	ldr	r3, [pc, #332]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4a52      	ldr	r2, [pc, #328]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003166:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003168:	4b50      	ldr	r3, [pc, #320]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	494d      	ldr	r1, [pc, #308]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003176:	4313      	orrs	r3, r2
 8003178:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d040      	beq.n	8003208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	4b47      	ldr	r3, [pc, #284]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d115      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e07f      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d107      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a6:	4b41      	ldr	r3, [pc, #260]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e073      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b6:	4b3d      	ldr	r3, [pc, #244]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e06b      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031c6:	4b39      	ldr	r3, [pc, #228]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f023 0203 	bic.w	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4936      	ldr	r1, [pc, #216]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d8:	f7fe ff5e 	bl	8002098 <HAL_GetTick>
 80031dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e0:	f7fe ff5a 	bl	8002098 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e053      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f6:	4b2d      	ldr	r3, [pc, #180]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 020c 	and.w	r2, r3, #12
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	429a      	cmp	r2, r3
 8003206:	d1eb      	bne.n	80031e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003208:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d210      	bcs.n	8003238 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 0207 	bic.w	r2, r3, #7
 800321e:	4922      	ldr	r1, [pc, #136]	; (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	4313      	orrs	r3, r2
 8003224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e032      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003244:	4b19      	ldr	r3, [pc, #100]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4916      	ldr	r1, [pc, #88]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	4313      	orrs	r3, r2
 8003254:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003262:	4b12      	ldr	r3, [pc, #72]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	490e      	ldr	r1, [pc, #56]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003272:	4313      	orrs	r3, r2
 8003274:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003276:	f000 f821 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 800327a:	4601      	mov	r1, r0
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003288:	5cd3      	ldrb	r3, [r2, r3]
 800328a:	fa21 f303 	lsr.w	r3, r1, r3
 800328e:	4a09      	ldr	r2, [pc, #36]	; (80032b4 <HAL_RCC_ClockConfig+0x1cc>)
 8003290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003292:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe febc 	bl	8002014 <HAL_InitTick>

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40022000 	.word	0x40022000
 80032ac:	40021000 	.word	0x40021000
 80032b0:	080072bc 	.word	0x080072bc
 80032b4:	2000000c 	.word	0x2000000c
 80032b8:	20000010 	.word	0x20000010

080032bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032bc:	b490      	push	{r4, r7}
 80032be:	b08a      	sub	sp, #40	; 0x28
 80032c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032c2:	4b2a      	ldr	r3, [pc, #168]	; (800336c <HAL_RCC_GetSysClockFreq+0xb0>)
 80032c4:	1d3c      	adds	r4, r7, #4
 80032c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032cc:	4b28      	ldr	r3, [pc, #160]	; (8003370 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
 80032d6:	2300      	movs	r3, #0
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	2300      	movs	r3, #0
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032e6:	4b23      	ldr	r3, [pc, #140]	; (8003374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d002      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x40>
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d003      	beq.n	8003302 <HAL_RCC_GetSysClockFreq+0x46>
 80032fa:	e02d      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032fc:	4b1e      	ldr	r3, [pc, #120]	; (8003378 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032fe:	623b      	str	r3, [r7, #32]
      break;
 8003300:	e02d      	b.n	800335e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	0c9b      	lsrs	r3, r3, #18
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800330e:	4413      	add	r3, r2
 8003310:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003314:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d013      	beq.n	8003348 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003320:	4b14      	ldr	r3, [pc, #80]	; (8003374 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	0c5b      	lsrs	r3, r3, #17
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800332e:	4413      	add	r3, r2
 8003330:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003334:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	4a0f      	ldr	r2, [pc, #60]	; (8003378 <HAL_RCC_GetSysClockFreq+0xbc>)
 800333a:	fb02 f203 	mul.w	r2, r2, r3
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	fbb2 f3f3 	udiv	r3, r2, r3
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
 8003346:	e004      	b.n	8003352 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	4a0c      	ldr	r2, [pc, #48]	; (800337c <HAL_RCC_GetSysClockFreq+0xc0>)
 800334c:	fb02 f303 	mul.w	r3, r2, r3
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	623b      	str	r3, [r7, #32]
      break;
 8003356:	e002      	b.n	800335e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003358:	4b07      	ldr	r3, [pc, #28]	; (8003378 <HAL_RCC_GetSysClockFreq+0xbc>)
 800335a:	623b      	str	r3, [r7, #32]
      break;
 800335c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800335e:	6a3b      	ldr	r3, [r7, #32]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3728      	adds	r7, #40	; 0x28
 8003364:	46bd      	mov	sp, r7
 8003366:	bc90      	pop	{r4, r7}
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	0800654c 	.word	0x0800654c
 8003370:	0800655c 	.word	0x0800655c
 8003374:	40021000 	.word	0x40021000
 8003378:	007a1200 	.word	0x007a1200
 800337c:	003d0900 	.word	0x003d0900

08003380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003384:	4b02      	ldr	r3, [pc, #8]	; (8003390 <HAL_RCC_GetHCLKFreq+0x10>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr
 8003390:	2000000c 	.word	0x2000000c

08003394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003398:	f7ff fff2 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 800339c:	4601      	mov	r1, r0
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	0a1b      	lsrs	r3, r3, #8
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	4a03      	ldr	r2, [pc, #12]	; (80033b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033aa:	5cd3      	ldrb	r3, [r2, r3]
 80033ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000
 80033b8:	080072cc 	.word	0x080072cc

080033bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033c0:	f7ff ffde 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 80033c4:	4601      	mov	r1, r0
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	0adb      	lsrs	r3, r3, #11
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	4a03      	ldr	r2, [pc, #12]	; (80033e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d2:	5cd3      	ldrb	r3, [r2, r3]
 80033d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033d8:	4618      	mov	r0, r3
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40021000 	.word	0x40021000
 80033e0:	080072cc 	.word	0x080072cc

080033e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033ec:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <RCC_Delay+0x34>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0a      	ldr	r2, [pc, #40]	; (800341c <RCC_Delay+0x38>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	0a5b      	lsrs	r3, r3, #9
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003400:	bf00      	nop
  }
  while (Delay --);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1e5a      	subs	r2, r3, #1
 8003406:	60fa      	str	r2, [r7, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f9      	bne.n	8003400 <RCC_Delay+0x1c>
}
 800340c:	bf00      	nop
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	2000000c 	.word	0x2000000c
 800341c:	10624dd3 	.word	0x10624dd3

08003420 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d07d      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800343c:	2300      	movs	r3, #0
 800343e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003440:	4b4f      	ldr	r3, [pc, #316]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10d      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344c:	4b4c      	ldr	r3, [pc, #304]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	4a4b      	ldr	r2, [pc, #300]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003456:	61d3      	str	r3, [r2, #28]
 8003458:	4b49      	ldr	r3, [pc, #292]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003464:	2301      	movs	r3, #1
 8003466:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	4b46      	ldr	r3, [pc, #280]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d118      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003474:	4b43      	ldr	r3, [pc, #268]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a42      	ldr	r2, [pc, #264]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800347a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003480:	f7fe fe0a 	bl	8002098 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003486:	e008      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003488:	f7fe fe06 	bl	8002098 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b64      	cmp	r3, #100	; 0x64
 8003494:	d901      	bls.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e06d      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349a:	4b3a      	ldr	r3, [pc, #232]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034a6:	4b36      	ldr	r3, [pc, #216]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d02e      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d027      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034c4:	4b2e      	ldr	r3, [pc, #184]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ce:	4b2e      	ldr	r3, [pc, #184]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034d4:	4b2c      	ldr	r3, [pc, #176]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034da:	4a29      	ldr	r2, [pc, #164]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d014      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ea:	f7fe fdd5 	bl	8002098 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f0:	e00a      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f2:	f7fe fdd1 	bl	8002098 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003500:	4293      	cmp	r3, r2
 8003502:	d901      	bls.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e036      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003508:	4b1d      	ldr	r3, [pc, #116]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0ee      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003514:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4917      	ldr	r1, [pc, #92]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003522:	4313      	orrs	r3, r2
 8003524:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003526:	7dfb      	ldrb	r3, [r7, #23]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d105      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800352c:	4b14      	ldr	r3, [pc, #80]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	4a13      	ldr	r2, [pc, #76]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003536:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003544:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	490b      	ldr	r1, [pc, #44]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003552:	4313      	orrs	r3, r2
 8003554:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003562:	4b07      	ldr	r3, [pc, #28]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	4904      	ldr	r1, [pc, #16]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003570:	4313      	orrs	r3, r2
 8003572:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40021000 	.word	0x40021000
 8003584:	40007000 	.word	0x40007000
 8003588:	42420440 	.word	0x42420440

0800358c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e076      	b.n	800368c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d108      	bne.n	80035b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035ae:	d009      	beq.n	80035c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	61da      	str	r2, [r3, #28]
 80035b6:	e005      	b.n	80035c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fe fbe2 	bl	8001da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003648:	ea42 0103 	orr.w	r1, r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003650:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	0c1a      	lsrs	r2, r3, #16
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f002 0204 	and.w	r2, r2, #4
 800366a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	69da      	ldr	r2, [r3, #28]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800367a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	4613      	mov	r3, r2
 80036a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_SPI_Transmit+0x22>
 80036b2:	2302      	movs	r3, #2
 80036b4:	e126      	b.n	8003904 <HAL_SPI_Transmit+0x270>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036be:	f7fe fceb 	bl	8002098 <HAL_GetTick>
 80036c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d002      	beq.n	80036da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80036d4:	2302      	movs	r3, #2
 80036d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036d8:	e10b      	b.n	80038f2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <HAL_SPI_Transmit+0x52>
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d102      	bne.n	80036ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036ea:	e102      	b.n	80038f2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2203      	movs	r2, #3
 80036f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	88fa      	ldrh	r2, [r7, #6]
 8003704:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	88fa      	ldrh	r2, [r7, #6]
 800370a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003732:	d10f      	bne.n	8003754 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003742:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003752:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	d007      	beq.n	8003772 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003770:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800377a:	d14b      	bne.n	8003814 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <HAL_SPI_Transmit+0xf6>
 8003784:	8afb      	ldrh	r3, [r7, #22]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d13e      	bne.n	8003808 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	881a      	ldrh	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	1c9a      	adds	r2, r3, #2
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80037ae:	e02b      	b.n	8003808 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d112      	bne.n	80037e4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	881a      	ldrh	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	1c9a      	adds	r2, r3, #2
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80037e2:	e011      	b.n	8003808 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037e4:	f7fe fc58 	bl	8002098 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d803      	bhi.n	80037fc <HAL_SPI_Transmit+0x168>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fa:	d102      	bne.n	8003802 <HAL_SPI_Transmit+0x16e>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d102      	bne.n	8003808 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003806:	e074      	b.n	80038f2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1ce      	bne.n	80037b0 <HAL_SPI_Transmit+0x11c>
 8003812:	e04c      	b.n	80038ae <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <HAL_SPI_Transmit+0x18e>
 800381c:	8afb      	ldrh	r3, [r7, #22]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d140      	bne.n	80038a4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	330c      	adds	r3, #12
 800382c:	7812      	ldrb	r2, [r2, #0]
 800382e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003848:	e02c      	b.n	80038a4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b02      	cmp	r3, #2
 8003856:	d113      	bne.n	8003880 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	330c      	adds	r3, #12
 8003862:	7812      	ldrb	r2, [r2, #0]
 8003864:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003874:	b29b      	uxth	r3, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	86da      	strh	r2, [r3, #54]	; 0x36
 800387e:	e011      	b.n	80038a4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003880:	f7fe fc0a 	bl	8002098 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d803      	bhi.n	8003898 <HAL_SPI_Transmit+0x204>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003896:	d102      	bne.n	800389e <HAL_SPI_Transmit+0x20a>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038a2:	e026      	b.n	80038f2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1cd      	bne.n	800384a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	6839      	ldr	r1, [r7, #0]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f8b2 	bl	8003a1c <SPI_EndRxTxTransaction>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10a      	bne.n	80038e2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038cc:	2300      	movs	r3, #0
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	77fb      	strb	r3, [r7, #31]
 80038ee:	e000      	b.n	80038f2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80038f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003902:	7ffb      	ldrb	r3, [r7, #31]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3720      	adds	r7, #32
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	4613      	mov	r3, r2
 800391a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800391c:	f7fe fbbc 	bl	8002098 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	4413      	add	r3, r2
 800392a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800392c:	f7fe fbb4 	bl	8002098 <HAL_GetTick>
 8003930:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003932:	4b39      	ldr	r3, [pc, #228]	; (8003a18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	015b      	lsls	r3, r3, #5
 8003938:	0d1b      	lsrs	r3, r3, #20
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	fb02 f303 	mul.w	r3, r2, r3
 8003940:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003942:	e054      	b.n	80039ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394a:	d050      	beq.n	80039ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800394c:	f7fe fba4 	bl	8002098 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	429a      	cmp	r2, r3
 800395a:	d902      	bls.n	8003962 <SPI_WaitFlagStateUntilTimeout+0x56>
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d13d      	bne.n	80039de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003970:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800397a:	d111      	bne.n	80039a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003984:	d004      	beq.n	8003990 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800398e:	d107      	bne.n	80039a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800399e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039a8:	d10f      	bne.n	80039ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e017      	b.n	8003a0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4013      	ands	r3, r2
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	bf0c      	ite	eq
 80039fe:	2301      	moveq	r3, #1
 8003a00:	2300      	movne	r3, #0
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d19b      	bne.n	8003944 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3720      	adds	r7, #32
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	2000000c 	.word	0x2000000c

08003a1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2180      	movs	r1, #128	; 0x80
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f7ff ff6a 	bl	800390c <SPI_WaitFlagStateUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d007      	beq.n	8003a4e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a42:	f043 0220 	orr.w	r2, r3, #32
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e000      	b.n	8003a50 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e03f      	b.n	8003aea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fe f9dc 	bl	8001e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2224      	movs	r2, #36	; 0x24
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f9a7 	bl	8003df0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ab0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ac0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ad0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b08a      	sub	sp, #40	; 0x28
 8003af6:	af02      	add	r7, sp, #8
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	603b      	str	r3, [r7, #0]
 8003afe:	4613      	mov	r3, r2
 8003b00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	d17c      	bne.n	8003c0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <HAL_UART_Transmit+0x2c>
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e075      	b.n	8003c0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_UART_Transmit+0x3e>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e06e      	b.n	8003c0e <HAL_UART_Transmit+0x11c>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2221      	movs	r2, #33	; 0x21
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b46:	f7fe faa7 	bl	8002098 <HAL_GetTick>
 8003b4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	88fa      	ldrh	r2, [r7, #6]
 8003b50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	88fa      	ldrh	r2, [r7, #6]
 8003b56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b60:	d108      	bne.n	8003b74 <HAL_UART_Transmit+0x82>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d104      	bne.n	8003b74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	61bb      	str	r3, [r7, #24]
 8003b72:	e003      	b.n	8003b7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b84:	e02a      	b.n	8003bdc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2180      	movs	r1, #128	; 0x80
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f8e2 	bl	8003d5a <UART_WaitOnFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e036      	b.n	8003c0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10b      	bne.n	8003bbe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	3302      	adds	r3, #2
 8003bba:	61bb      	str	r3, [r7, #24]
 8003bbc:	e007      	b.n	8003bce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	781a      	ldrb	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1cf      	bne.n	8003b86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2200      	movs	r2, #0
 8003bee:	2140      	movs	r1, #64	; 0x40
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 f8b2 	bl	8003d5a <UART_WaitOnFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e006      	b.n	8003c0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e000      	b.n	8003c0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c0c:	2302      	movs	r3, #2
  }
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3720      	adds	r7, #32
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b08a      	sub	sp, #40	; 0x28
 8003c1a:	af02      	add	r7, sp, #8
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	4613      	mov	r3, r2
 8003c24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	f040 808c 	bne.w	8003d50 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_UART_Receive+0x2e>
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e084      	b.n	8003d52 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_UART_Receive+0x40>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e07d      	b.n	8003d52 <HAL_UART_Receive+0x13c>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2222      	movs	r2, #34	; 0x22
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c72:	f7fe fa11 	bl	8002098 <HAL_GetTick>
 8003c76:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	88fa      	ldrh	r2, [r7, #6]
 8003c7c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	88fa      	ldrh	r2, [r7, #6]
 8003c82:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c8c:	d108      	bne.n	8003ca0 <HAL_UART_Receive+0x8a>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d104      	bne.n	8003ca0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	61bb      	str	r3, [r7, #24]
 8003c9e:	e003      	b.n	8003ca8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003cb0:	e043      	b.n	8003d3a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2120      	movs	r1, #32
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f84c 	bl	8003d5a <UART_WaitOnFlagUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e042      	b.n	8003d52 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10c      	bne.n	8003cec <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	3302      	adds	r3, #2
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	e01f      	b.n	8003d2c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf4:	d007      	beq.n	8003d06 <HAL_UART_Receive+0xf0>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <HAL_UART_Receive+0xfe>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	e008      	b.n	8003d26 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1b6      	bne.n	8003cb2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e000      	b.n	8003d52 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003d50:	2302      	movs	r3, #2
  }
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	603b      	str	r3, [r7, #0]
 8003d66:	4613      	mov	r3, r2
 8003d68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d6a:	e02c      	b.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d72:	d028      	beq.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d007      	beq.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d7a:	f7fe f98d 	bl	8002098 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d21d      	bcs.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d98:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695a      	ldr	r2, [r3, #20]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0201 	bic.w	r2, r2, #1
 8003da8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e00f      	b.n	8003de6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	bf0c      	ite	eq
 8003dd6:	2301      	moveq	r3, #1
 8003dd8:	2300      	movne	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	461a      	mov	r2, r3
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d0c3      	beq.n	8003d6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e2a:	f023 030c 	bic.w	r3, r3, #12
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	430b      	orrs	r3, r1
 8003e36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699a      	ldr	r2, [r3, #24]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a2c      	ldr	r2, [pc, #176]	; (8003f04 <UART_SetConfig+0x114>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d103      	bne.n	8003e60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e58:	f7ff fab0 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	e002      	b.n	8003e66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e60:	f7ff fa98 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8003e64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009a      	lsls	r2, r3, #2
 8003e70:	441a      	add	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7c:	4a22      	ldr	r2, [pc, #136]	; (8003f08 <UART_SetConfig+0x118>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	0119      	lsls	r1, r3, #4
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009a      	lsls	r2, r3, #2
 8003e90:	441a      	add	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e9c:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <UART_SetConfig+0x118>)
 8003e9e:	fba3 0302 	umull	r0, r3, r3, r2
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	2064      	movs	r0, #100	; 0x64
 8003ea6:	fb00 f303 	mul.w	r3, r0, r3
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	3332      	adds	r3, #50	; 0x32
 8003eb0:	4a15      	ldr	r2, [pc, #84]	; (8003f08 <UART_SetConfig+0x118>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ebc:	4419      	add	r1, r3
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009a      	lsls	r2, r3, #2
 8003ec8:	441a      	add	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <UART_SetConfig+0x118>)
 8003ed6:	fba3 0302 	umull	r0, r3, r3, r2
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	2064      	movs	r0, #100	; 0x64
 8003ede:	fb00 f303 	mul.w	r3, r0, r3
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	3332      	adds	r3, #50	; 0x32
 8003ee8:	4a07      	ldr	r2, [pc, #28]	; (8003f08 <UART_SetConfig+0x118>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	f003 020f 	and.w	r2, r3, #15
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	440a      	add	r2, r1
 8003efa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40013800 	.word	0x40013800
 8003f08:	51eb851f 	.word	0x51eb851f

08003f0c <atoi>:
 8003f0c:	220a      	movs	r2, #10
 8003f0e:	2100      	movs	r1, #0
 8003f10:	f000 bdb0 	b.w	8004a74 <strtol>

08003f14 <__errno>:
 8003f14:	4b01      	ldr	r3, [pc, #4]	; (8003f1c <__errno+0x8>)
 8003f16:	6818      	ldr	r0, [r3, #0]
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	20000018 	.word	0x20000018

08003f20 <__libc_init_array>:
 8003f20:	b570      	push	{r4, r5, r6, lr}
 8003f22:	2500      	movs	r5, #0
 8003f24:	4e0c      	ldr	r6, [pc, #48]	; (8003f58 <__libc_init_array+0x38>)
 8003f26:	4c0d      	ldr	r4, [pc, #52]	; (8003f5c <__libc_init_array+0x3c>)
 8003f28:	1ba4      	subs	r4, r4, r6
 8003f2a:	10a4      	asrs	r4, r4, #2
 8003f2c:	42a5      	cmp	r5, r4
 8003f2e:	d109      	bne.n	8003f44 <__libc_init_array+0x24>
 8003f30:	f002 f97c 	bl	800622c <_init>
 8003f34:	2500      	movs	r5, #0
 8003f36:	4e0a      	ldr	r6, [pc, #40]	; (8003f60 <__libc_init_array+0x40>)
 8003f38:	4c0a      	ldr	r4, [pc, #40]	; (8003f64 <__libc_init_array+0x44>)
 8003f3a:	1ba4      	subs	r4, r4, r6
 8003f3c:	10a4      	asrs	r4, r4, #2
 8003f3e:	42a5      	cmp	r5, r4
 8003f40:	d105      	bne.n	8003f4e <__libc_init_array+0x2e>
 8003f42:	bd70      	pop	{r4, r5, r6, pc}
 8003f44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f48:	4798      	blx	r3
 8003f4a:	3501      	adds	r5, #1
 8003f4c:	e7ee      	b.n	8003f2c <__libc_init_array+0xc>
 8003f4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f52:	4798      	blx	r3
 8003f54:	3501      	adds	r5, #1
 8003f56:	e7f2      	b.n	8003f3e <__libc_init_array+0x1e>
 8003f58:	08007530 	.word	0x08007530
 8003f5c:	08007530 	.word	0x08007530
 8003f60:	08007530 	.word	0x08007530
 8003f64:	08007534 	.word	0x08007534

08003f68 <memcpy>:
 8003f68:	b510      	push	{r4, lr}
 8003f6a:	1e43      	subs	r3, r0, #1
 8003f6c:	440a      	add	r2, r1
 8003f6e:	4291      	cmp	r1, r2
 8003f70:	d100      	bne.n	8003f74 <memcpy+0xc>
 8003f72:	bd10      	pop	{r4, pc}
 8003f74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f7c:	e7f7      	b.n	8003f6e <memcpy+0x6>

08003f7e <memset>:
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4402      	add	r2, r0
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d100      	bne.n	8003f88 <memset+0xa>
 8003f86:	4770      	bx	lr
 8003f88:	f803 1b01 	strb.w	r1, [r3], #1
 8003f8c:	e7f9      	b.n	8003f82 <memset+0x4>

08003f8e <__cvt>:
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f94:	461e      	mov	r6, r3
 8003f96:	bfbb      	ittet	lt
 8003f98:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003f9c:	461e      	movlt	r6, r3
 8003f9e:	2300      	movge	r3, #0
 8003fa0:	232d      	movlt	r3, #45	; 0x2d
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003fa6:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003faa:	f027 0720 	bic.w	r7, r7, #32
 8003fae:	2f46      	cmp	r7, #70	; 0x46
 8003fb0:	4614      	mov	r4, r2
 8003fb2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003fb4:	700b      	strb	r3, [r1, #0]
 8003fb6:	d004      	beq.n	8003fc2 <__cvt+0x34>
 8003fb8:	2f45      	cmp	r7, #69	; 0x45
 8003fba:	d100      	bne.n	8003fbe <__cvt+0x30>
 8003fbc:	3501      	adds	r5, #1
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e000      	b.n	8003fc4 <__cvt+0x36>
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	aa07      	add	r2, sp, #28
 8003fc6:	9204      	str	r2, [sp, #16]
 8003fc8:	aa06      	add	r2, sp, #24
 8003fca:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003fce:	e9cd 3500 	strd	r3, r5, [sp]
 8003fd2:	4622      	mov	r2, r4
 8003fd4:	4633      	mov	r3, r6
 8003fd6:	f000 fdf3 	bl	8004bc0 <_dtoa_r>
 8003fda:	2f47      	cmp	r7, #71	; 0x47
 8003fdc:	4680      	mov	r8, r0
 8003fde:	d102      	bne.n	8003fe6 <__cvt+0x58>
 8003fe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003fe2:	07db      	lsls	r3, r3, #31
 8003fe4:	d526      	bpl.n	8004034 <__cvt+0xa6>
 8003fe6:	2f46      	cmp	r7, #70	; 0x46
 8003fe8:	eb08 0905 	add.w	r9, r8, r5
 8003fec:	d111      	bne.n	8004012 <__cvt+0x84>
 8003fee:	f898 3000 	ldrb.w	r3, [r8]
 8003ff2:	2b30      	cmp	r3, #48	; 0x30
 8003ff4:	d10a      	bne.n	800400c <__cvt+0x7e>
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	4631      	mov	r1, r6
 8003ffe:	f7fc fcd3 	bl	80009a8 <__aeabi_dcmpeq>
 8004002:	b918      	cbnz	r0, 800400c <__cvt+0x7e>
 8004004:	f1c5 0501 	rsb	r5, r5, #1
 8004008:	f8ca 5000 	str.w	r5, [sl]
 800400c:	f8da 3000 	ldr.w	r3, [sl]
 8004010:	4499      	add	r9, r3
 8004012:	2200      	movs	r2, #0
 8004014:	2300      	movs	r3, #0
 8004016:	4620      	mov	r0, r4
 8004018:	4631      	mov	r1, r6
 800401a:	f7fc fcc5 	bl	80009a8 <__aeabi_dcmpeq>
 800401e:	b938      	cbnz	r0, 8004030 <__cvt+0xa2>
 8004020:	2230      	movs	r2, #48	; 0x30
 8004022:	9b07      	ldr	r3, [sp, #28]
 8004024:	454b      	cmp	r3, r9
 8004026:	d205      	bcs.n	8004034 <__cvt+0xa6>
 8004028:	1c59      	adds	r1, r3, #1
 800402a:	9107      	str	r1, [sp, #28]
 800402c:	701a      	strb	r2, [r3, #0]
 800402e:	e7f8      	b.n	8004022 <__cvt+0x94>
 8004030:	f8cd 901c 	str.w	r9, [sp, #28]
 8004034:	4640      	mov	r0, r8
 8004036:	9b07      	ldr	r3, [sp, #28]
 8004038:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800403a:	eba3 0308 	sub.w	r3, r3, r8
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	b008      	add	sp, #32
 8004042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004046 <__exponent>:
 8004046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004048:	2900      	cmp	r1, #0
 800404a:	bfb4      	ite	lt
 800404c:	232d      	movlt	r3, #45	; 0x2d
 800404e:	232b      	movge	r3, #43	; 0x2b
 8004050:	4604      	mov	r4, r0
 8004052:	bfb8      	it	lt
 8004054:	4249      	neglt	r1, r1
 8004056:	2909      	cmp	r1, #9
 8004058:	f804 2b02 	strb.w	r2, [r4], #2
 800405c:	7043      	strb	r3, [r0, #1]
 800405e:	dd21      	ble.n	80040a4 <__exponent+0x5e>
 8004060:	f10d 0307 	add.w	r3, sp, #7
 8004064:	461f      	mov	r7, r3
 8004066:	260a      	movs	r6, #10
 8004068:	fb91 f5f6 	sdiv	r5, r1, r6
 800406c:	fb06 1115 	mls	r1, r6, r5, r1
 8004070:	2d09      	cmp	r5, #9
 8004072:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004076:	f803 1c01 	strb.w	r1, [r3, #-1]
 800407a:	f103 32ff 	add.w	r2, r3, #4294967295
 800407e:	4629      	mov	r1, r5
 8004080:	dc09      	bgt.n	8004096 <__exponent+0x50>
 8004082:	3130      	adds	r1, #48	; 0x30
 8004084:	3b02      	subs	r3, #2
 8004086:	f802 1c01 	strb.w	r1, [r2, #-1]
 800408a:	42bb      	cmp	r3, r7
 800408c:	4622      	mov	r2, r4
 800408e:	d304      	bcc.n	800409a <__exponent+0x54>
 8004090:	1a10      	subs	r0, r2, r0
 8004092:	b003      	add	sp, #12
 8004094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004096:	4613      	mov	r3, r2
 8004098:	e7e6      	b.n	8004068 <__exponent+0x22>
 800409a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800409e:	f804 2b01 	strb.w	r2, [r4], #1
 80040a2:	e7f2      	b.n	800408a <__exponent+0x44>
 80040a4:	2330      	movs	r3, #48	; 0x30
 80040a6:	4419      	add	r1, r3
 80040a8:	7083      	strb	r3, [r0, #2]
 80040aa:	1d02      	adds	r2, r0, #4
 80040ac:	70c1      	strb	r1, [r0, #3]
 80040ae:	e7ef      	b.n	8004090 <__exponent+0x4a>

080040b0 <_printf_float>:
 80040b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b4:	b091      	sub	sp, #68	; 0x44
 80040b6:	460c      	mov	r4, r1
 80040b8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80040ba:	4693      	mov	fp, r2
 80040bc:	461e      	mov	r6, r3
 80040be:	4605      	mov	r5, r0
 80040c0:	f001 fb36 	bl	8005730 <_localeconv_r>
 80040c4:	6803      	ldr	r3, [r0, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	9309      	str	r3, [sp, #36]	; 0x24
 80040ca:	f7fc f841 	bl	8000150 <strlen>
 80040ce:	2300      	movs	r3, #0
 80040d0:	930e      	str	r3, [sp, #56]	; 0x38
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	900a      	str	r0, [sp, #40]	; 0x28
 80040d6:	3307      	adds	r3, #7
 80040d8:	f023 0307 	bic.w	r3, r3, #7
 80040dc:	f103 0208 	add.w	r2, r3, #8
 80040e0:	f894 8018 	ldrb.w	r8, [r4, #24]
 80040e4:	f8d4 a000 	ldr.w	sl, [r4]
 80040e8:	603a      	str	r2, [r7, #0]
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80040f2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80040f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80040fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80040fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004100:	4ba6      	ldr	r3, [pc, #664]	; (800439c <_printf_float+0x2ec>)
 8004102:	4638      	mov	r0, r7
 8004104:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004106:	f7fc fc81 	bl	8000a0c <__aeabi_dcmpun>
 800410a:	bb68      	cbnz	r0, 8004168 <_printf_float+0xb8>
 800410c:	f04f 32ff 	mov.w	r2, #4294967295
 8004110:	4ba2      	ldr	r3, [pc, #648]	; (800439c <_printf_float+0x2ec>)
 8004112:	4638      	mov	r0, r7
 8004114:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004116:	f7fc fc5b 	bl	80009d0 <__aeabi_dcmple>
 800411a:	bb28      	cbnz	r0, 8004168 <_printf_float+0xb8>
 800411c:	2200      	movs	r2, #0
 800411e:	2300      	movs	r3, #0
 8004120:	4638      	mov	r0, r7
 8004122:	4649      	mov	r1, r9
 8004124:	f7fc fc4a 	bl	80009bc <__aeabi_dcmplt>
 8004128:	b110      	cbz	r0, 8004130 <_printf_float+0x80>
 800412a:	232d      	movs	r3, #45	; 0x2d
 800412c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004130:	4f9b      	ldr	r7, [pc, #620]	; (80043a0 <_printf_float+0x2f0>)
 8004132:	4b9c      	ldr	r3, [pc, #624]	; (80043a4 <_printf_float+0x2f4>)
 8004134:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004138:	bf98      	it	ls
 800413a:	461f      	movls	r7, r3
 800413c:	2303      	movs	r3, #3
 800413e:	f04f 0900 	mov.w	r9, #0
 8004142:	6123      	str	r3, [r4, #16]
 8004144:	f02a 0304 	bic.w	r3, sl, #4
 8004148:	6023      	str	r3, [r4, #0]
 800414a:	9600      	str	r6, [sp, #0]
 800414c:	465b      	mov	r3, fp
 800414e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004150:	4621      	mov	r1, r4
 8004152:	4628      	mov	r0, r5
 8004154:	f000 f9e2 	bl	800451c <_printf_common>
 8004158:	3001      	adds	r0, #1
 800415a:	f040 8090 	bne.w	800427e <_printf_float+0x1ce>
 800415e:	f04f 30ff 	mov.w	r0, #4294967295
 8004162:	b011      	add	sp, #68	; 0x44
 8004164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004168:	463a      	mov	r2, r7
 800416a:	464b      	mov	r3, r9
 800416c:	4638      	mov	r0, r7
 800416e:	4649      	mov	r1, r9
 8004170:	f7fc fc4c 	bl	8000a0c <__aeabi_dcmpun>
 8004174:	b110      	cbz	r0, 800417c <_printf_float+0xcc>
 8004176:	4f8c      	ldr	r7, [pc, #560]	; (80043a8 <_printf_float+0x2f8>)
 8004178:	4b8c      	ldr	r3, [pc, #560]	; (80043ac <_printf_float+0x2fc>)
 800417a:	e7db      	b.n	8004134 <_printf_float+0x84>
 800417c:	6863      	ldr	r3, [r4, #4]
 800417e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004182:	1c59      	adds	r1, r3, #1
 8004184:	a80d      	add	r0, sp, #52	; 0x34
 8004186:	a90e      	add	r1, sp, #56	; 0x38
 8004188:	d140      	bne.n	800420c <_printf_float+0x15c>
 800418a:	2306      	movs	r3, #6
 800418c:	6063      	str	r3, [r4, #4]
 800418e:	f04f 0c00 	mov.w	ip, #0
 8004192:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004196:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800419a:	6863      	ldr	r3, [r4, #4]
 800419c:	6022      	str	r2, [r4, #0]
 800419e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	463a      	mov	r2, r7
 80041a6:	464b      	mov	r3, r9
 80041a8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80041ac:	4628      	mov	r0, r5
 80041ae:	f7ff feee 	bl	8003f8e <__cvt>
 80041b2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80041b6:	2b47      	cmp	r3, #71	; 0x47
 80041b8:	4607      	mov	r7, r0
 80041ba:	d109      	bne.n	80041d0 <_printf_float+0x120>
 80041bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041be:	1cd8      	adds	r0, r3, #3
 80041c0:	db02      	blt.n	80041c8 <_printf_float+0x118>
 80041c2:	6862      	ldr	r2, [r4, #4]
 80041c4:	4293      	cmp	r3, r2
 80041c6:	dd47      	ble.n	8004258 <_printf_float+0x1a8>
 80041c8:	f1a8 0802 	sub.w	r8, r8, #2
 80041cc:	fa5f f888 	uxtb.w	r8, r8
 80041d0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80041d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80041d6:	d824      	bhi.n	8004222 <_printf_float+0x172>
 80041d8:	3901      	subs	r1, #1
 80041da:	4642      	mov	r2, r8
 80041dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80041e0:	910d      	str	r1, [sp, #52]	; 0x34
 80041e2:	f7ff ff30 	bl	8004046 <__exponent>
 80041e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041e8:	4681      	mov	r9, r0
 80041ea:	1813      	adds	r3, r2, r0
 80041ec:	2a01      	cmp	r2, #1
 80041ee:	6123      	str	r3, [r4, #16]
 80041f0:	dc02      	bgt.n	80041f8 <_printf_float+0x148>
 80041f2:	6822      	ldr	r2, [r4, #0]
 80041f4:	07d1      	lsls	r1, r2, #31
 80041f6:	d501      	bpl.n	80041fc <_printf_float+0x14c>
 80041f8:	3301      	adds	r3, #1
 80041fa:	6123      	str	r3, [r4, #16]
 80041fc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0a2      	beq.n	800414a <_printf_float+0x9a>
 8004204:	232d      	movs	r3, #45	; 0x2d
 8004206:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800420a:	e79e      	b.n	800414a <_printf_float+0x9a>
 800420c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004210:	f000 816e 	beq.w	80044f0 <_printf_float+0x440>
 8004214:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004218:	d1b9      	bne.n	800418e <_printf_float+0xde>
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1b7      	bne.n	800418e <_printf_float+0xde>
 800421e:	2301      	movs	r3, #1
 8004220:	e7b4      	b.n	800418c <_printf_float+0xdc>
 8004222:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004226:	d119      	bne.n	800425c <_printf_float+0x1ac>
 8004228:	2900      	cmp	r1, #0
 800422a:	6863      	ldr	r3, [r4, #4]
 800422c:	dd0c      	ble.n	8004248 <_printf_float+0x198>
 800422e:	6121      	str	r1, [r4, #16]
 8004230:	b913      	cbnz	r3, 8004238 <_printf_float+0x188>
 8004232:	6822      	ldr	r2, [r4, #0]
 8004234:	07d2      	lsls	r2, r2, #31
 8004236:	d502      	bpl.n	800423e <_printf_float+0x18e>
 8004238:	3301      	adds	r3, #1
 800423a:	440b      	add	r3, r1
 800423c:	6123      	str	r3, [r4, #16]
 800423e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004240:	f04f 0900 	mov.w	r9, #0
 8004244:	65a3      	str	r3, [r4, #88]	; 0x58
 8004246:	e7d9      	b.n	80041fc <_printf_float+0x14c>
 8004248:	b913      	cbnz	r3, 8004250 <_printf_float+0x1a0>
 800424a:	6822      	ldr	r2, [r4, #0]
 800424c:	07d0      	lsls	r0, r2, #31
 800424e:	d501      	bpl.n	8004254 <_printf_float+0x1a4>
 8004250:	3302      	adds	r3, #2
 8004252:	e7f3      	b.n	800423c <_printf_float+0x18c>
 8004254:	2301      	movs	r3, #1
 8004256:	e7f1      	b.n	800423c <_printf_float+0x18c>
 8004258:	f04f 0867 	mov.w	r8, #103	; 0x67
 800425c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004260:	4293      	cmp	r3, r2
 8004262:	db05      	blt.n	8004270 <_printf_float+0x1c0>
 8004264:	6822      	ldr	r2, [r4, #0]
 8004266:	6123      	str	r3, [r4, #16]
 8004268:	07d1      	lsls	r1, r2, #31
 800426a:	d5e8      	bpl.n	800423e <_printf_float+0x18e>
 800426c:	3301      	adds	r3, #1
 800426e:	e7e5      	b.n	800423c <_printf_float+0x18c>
 8004270:	2b00      	cmp	r3, #0
 8004272:	bfcc      	ite	gt
 8004274:	2301      	movgt	r3, #1
 8004276:	f1c3 0302 	rsble	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	e7de      	b.n	800423c <_printf_float+0x18c>
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	055a      	lsls	r2, r3, #21
 8004282:	d407      	bmi.n	8004294 <_printf_float+0x1e4>
 8004284:	6923      	ldr	r3, [r4, #16]
 8004286:	463a      	mov	r2, r7
 8004288:	4659      	mov	r1, fp
 800428a:	4628      	mov	r0, r5
 800428c:	47b0      	blx	r6
 800428e:	3001      	adds	r0, #1
 8004290:	d129      	bne.n	80042e6 <_printf_float+0x236>
 8004292:	e764      	b.n	800415e <_printf_float+0xae>
 8004294:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004298:	f240 80d7 	bls.w	800444a <_printf_float+0x39a>
 800429c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042a0:	2200      	movs	r2, #0
 80042a2:	2300      	movs	r3, #0
 80042a4:	f7fc fb80 	bl	80009a8 <__aeabi_dcmpeq>
 80042a8:	b388      	cbz	r0, 800430e <_printf_float+0x25e>
 80042aa:	2301      	movs	r3, #1
 80042ac:	4a40      	ldr	r2, [pc, #256]	; (80043b0 <_printf_float+0x300>)
 80042ae:	4659      	mov	r1, fp
 80042b0:	4628      	mov	r0, r5
 80042b2:	47b0      	blx	r6
 80042b4:	3001      	adds	r0, #1
 80042b6:	f43f af52 	beq.w	800415e <_printf_float+0xae>
 80042ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80042be:	429a      	cmp	r2, r3
 80042c0:	db02      	blt.n	80042c8 <_printf_float+0x218>
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	07d8      	lsls	r0, r3, #31
 80042c6:	d50e      	bpl.n	80042e6 <_printf_float+0x236>
 80042c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042cc:	4659      	mov	r1, fp
 80042ce:	4628      	mov	r0, r5
 80042d0:	47b0      	blx	r6
 80042d2:	3001      	adds	r0, #1
 80042d4:	f43f af43 	beq.w	800415e <_printf_float+0xae>
 80042d8:	2700      	movs	r7, #0
 80042da:	f104 081a 	add.w	r8, r4, #26
 80042de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042e0:	3b01      	subs	r3, #1
 80042e2:	42bb      	cmp	r3, r7
 80042e4:	dc09      	bgt.n	80042fa <_printf_float+0x24a>
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	079f      	lsls	r7, r3, #30
 80042ea:	f100 80fd 	bmi.w	80044e8 <_printf_float+0x438>
 80042ee:	68e0      	ldr	r0, [r4, #12]
 80042f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042f2:	4298      	cmp	r0, r3
 80042f4:	bfb8      	it	lt
 80042f6:	4618      	movlt	r0, r3
 80042f8:	e733      	b.n	8004162 <_printf_float+0xb2>
 80042fa:	2301      	movs	r3, #1
 80042fc:	4642      	mov	r2, r8
 80042fe:	4659      	mov	r1, fp
 8004300:	4628      	mov	r0, r5
 8004302:	47b0      	blx	r6
 8004304:	3001      	adds	r0, #1
 8004306:	f43f af2a 	beq.w	800415e <_printf_float+0xae>
 800430a:	3701      	adds	r7, #1
 800430c:	e7e7      	b.n	80042de <_printf_float+0x22e>
 800430e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004310:	2b00      	cmp	r3, #0
 8004312:	dc2b      	bgt.n	800436c <_printf_float+0x2bc>
 8004314:	2301      	movs	r3, #1
 8004316:	4a26      	ldr	r2, [pc, #152]	; (80043b0 <_printf_float+0x300>)
 8004318:	4659      	mov	r1, fp
 800431a:	4628      	mov	r0, r5
 800431c:	47b0      	blx	r6
 800431e:	3001      	adds	r0, #1
 8004320:	f43f af1d 	beq.w	800415e <_printf_float+0xae>
 8004324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004326:	b923      	cbnz	r3, 8004332 <_printf_float+0x282>
 8004328:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800432a:	b913      	cbnz	r3, 8004332 <_printf_float+0x282>
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	07d9      	lsls	r1, r3, #31
 8004330:	d5d9      	bpl.n	80042e6 <_printf_float+0x236>
 8004332:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004336:	4659      	mov	r1, fp
 8004338:	4628      	mov	r0, r5
 800433a:	47b0      	blx	r6
 800433c:	3001      	adds	r0, #1
 800433e:	f43f af0e 	beq.w	800415e <_printf_float+0xae>
 8004342:	f04f 0800 	mov.w	r8, #0
 8004346:	f104 091a 	add.w	r9, r4, #26
 800434a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800434c:	425b      	negs	r3, r3
 800434e:	4543      	cmp	r3, r8
 8004350:	dc01      	bgt.n	8004356 <_printf_float+0x2a6>
 8004352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004354:	e797      	b.n	8004286 <_printf_float+0x1d6>
 8004356:	2301      	movs	r3, #1
 8004358:	464a      	mov	r2, r9
 800435a:	4659      	mov	r1, fp
 800435c:	4628      	mov	r0, r5
 800435e:	47b0      	blx	r6
 8004360:	3001      	adds	r0, #1
 8004362:	f43f aefc 	beq.w	800415e <_printf_float+0xae>
 8004366:	f108 0801 	add.w	r8, r8, #1
 800436a:	e7ee      	b.n	800434a <_printf_float+0x29a>
 800436c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800436e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004370:	429a      	cmp	r2, r3
 8004372:	bfa8      	it	ge
 8004374:	461a      	movge	r2, r3
 8004376:	2a00      	cmp	r2, #0
 8004378:	4690      	mov	r8, r2
 800437a:	dd07      	ble.n	800438c <_printf_float+0x2dc>
 800437c:	4613      	mov	r3, r2
 800437e:	4659      	mov	r1, fp
 8004380:	463a      	mov	r2, r7
 8004382:	4628      	mov	r0, r5
 8004384:	47b0      	blx	r6
 8004386:	3001      	adds	r0, #1
 8004388:	f43f aee9 	beq.w	800415e <_printf_float+0xae>
 800438c:	f104 031a 	add.w	r3, r4, #26
 8004390:	f04f 0a00 	mov.w	sl, #0
 8004394:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004398:	930b      	str	r3, [sp, #44]	; 0x2c
 800439a:	e015      	b.n	80043c8 <_printf_float+0x318>
 800439c:	7fefffff 	.word	0x7fefffff
 80043a0:	080072d8 	.word	0x080072d8
 80043a4:	080072d4 	.word	0x080072d4
 80043a8:	080072e0 	.word	0x080072e0
 80043ac:	080072dc 	.word	0x080072dc
 80043b0:	080072e4 	.word	0x080072e4
 80043b4:	2301      	movs	r3, #1
 80043b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80043b8:	4659      	mov	r1, fp
 80043ba:	4628      	mov	r0, r5
 80043bc:	47b0      	blx	r6
 80043be:	3001      	adds	r0, #1
 80043c0:	f43f aecd 	beq.w	800415e <_printf_float+0xae>
 80043c4:	f10a 0a01 	add.w	sl, sl, #1
 80043c8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80043cc:	eba9 0308 	sub.w	r3, r9, r8
 80043d0:	4553      	cmp	r3, sl
 80043d2:	dcef      	bgt.n	80043b4 <_printf_float+0x304>
 80043d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043d8:	429a      	cmp	r2, r3
 80043da:	444f      	add	r7, r9
 80043dc:	db14      	blt.n	8004408 <_printf_float+0x358>
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	07da      	lsls	r2, r3, #31
 80043e2:	d411      	bmi.n	8004408 <_printf_float+0x358>
 80043e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80043e8:	eba3 0209 	sub.w	r2, r3, r9
 80043ec:	eba3 0901 	sub.w	r9, r3, r1
 80043f0:	4591      	cmp	r9, r2
 80043f2:	bfa8      	it	ge
 80043f4:	4691      	movge	r9, r2
 80043f6:	f1b9 0f00 	cmp.w	r9, #0
 80043fa:	dc0d      	bgt.n	8004418 <_printf_float+0x368>
 80043fc:	2700      	movs	r7, #0
 80043fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004402:	f104 081a 	add.w	r8, r4, #26
 8004406:	e018      	b.n	800443a <_printf_float+0x38a>
 8004408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800440c:	4659      	mov	r1, fp
 800440e:	4628      	mov	r0, r5
 8004410:	47b0      	blx	r6
 8004412:	3001      	adds	r0, #1
 8004414:	d1e6      	bne.n	80043e4 <_printf_float+0x334>
 8004416:	e6a2      	b.n	800415e <_printf_float+0xae>
 8004418:	464b      	mov	r3, r9
 800441a:	463a      	mov	r2, r7
 800441c:	4659      	mov	r1, fp
 800441e:	4628      	mov	r0, r5
 8004420:	47b0      	blx	r6
 8004422:	3001      	adds	r0, #1
 8004424:	d1ea      	bne.n	80043fc <_printf_float+0x34c>
 8004426:	e69a      	b.n	800415e <_printf_float+0xae>
 8004428:	2301      	movs	r3, #1
 800442a:	4642      	mov	r2, r8
 800442c:	4659      	mov	r1, fp
 800442e:	4628      	mov	r0, r5
 8004430:	47b0      	blx	r6
 8004432:	3001      	adds	r0, #1
 8004434:	f43f ae93 	beq.w	800415e <_printf_float+0xae>
 8004438:	3701      	adds	r7, #1
 800443a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	eba3 0309 	sub.w	r3, r3, r9
 8004444:	42bb      	cmp	r3, r7
 8004446:	dcef      	bgt.n	8004428 <_printf_float+0x378>
 8004448:	e74d      	b.n	80042e6 <_printf_float+0x236>
 800444a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800444c:	2a01      	cmp	r2, #1
 800444e:	dc01      	bgt.n	8004454 <_printf_float+0x3a4>
 8004450:	07db      	lsls	r3, r3, #31
 8004452:	d538      	bpl.n	80044c6 <_printf_float+0x416>
 8004454:	2301      	movs	r3, #1
 8004456:	463a      	mov	r2, r7
 8004458:	4659      	mov	r1, fp
 800445a:	4628      	mov	r0, r5
 800445c:	47b0      	blx	r6
 800445e:	3001      	adds	r0, #1
 8004460:	f43f ae7d 	beq.w	800415e <_printf_float+0xae>
 8004464:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004468:	4659      	mov	r1, fp
 800446a:	4628      	mov	r0, r5
 800446c:	47b0      	blx	r6
 800446e:	3001      	adds	r0, #1
 8004470:	f107 0701 	add.w	r7, r7, #1
 8004474:	f43f ae73 	beq.w	800415e <_printf_float+0xae>
 8004478:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800447c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800447e:	2200      	movs	r2, #0
 8004480:	f103 38ff 	add.w	r8, r3, #4294967295
 8004484:	2300      	movs	r3, #0
 8004486:	f7fc fa8f 	bl	80009a8 <__aeabi_dcmpeq>
 800448a:	b9c0      	cbnz	r0, 80044be <_printf_float+0x40e>
 800448c:	4643      	mov	r3, r8
 800448e:	463a      	mov	r2, r7
 8004490:	4659      	mov	r1, fp
 8004492:	4628      	mov	r0, r5
 8004494:	47b0      	blx	r6
 8004496:	3001      	adds	r0, #1
 8004498:	d10d      	bne.n	80044b6 <_printf_float+0x406>
 800449a:	e660      	b.n	800415e <_printf_float+0xae>
 800449c:	2301      	movs	r3, #1
 800449e:	4642      	mov	r2, r8
 80044a0:	4659      	mov	r1, fp
 80044a2:	4628      	mov	r0, r5
 80044a4:	47b0      	blx	r6
 80044a6:	3001      	adds	r0, #1
 80044a8:	f43f ae59 	beq.w	800415e <_printf_float+0xae>
 80044ac:	3701      	adds	r7, #1
 80044ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044b0:	3b01      	subs	r3, #1
 80044b2:	42bb      	cmp	r3, r7
 80044b4:	dcf2      	bgt.n	800449c <_printf_float+0x3ec>
 80044b6:	464b      	mov	r3, r9
 80044b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80044bc:	e6e4      	b.n	8004288 <_printf_float+0x1d8>
 80044be:	2700      	movs	r7, #0
 80044c0:	f104 081a 	add.w	r8, r4, #26
 80044c4:	e7f3      	b.n	80044ae <_printf_float+0x3fe>
 80044c6:	2301      	movs	r3, #1
 80044c8:	e7e1      	b.n	800448e <_printf_float+0x3de>
 80044ca:	2301      	movs	r3, #1
 80044cc:	4642      	mov	r2, r8
 80044ce:	4659      	mov	r1, fp
 80044d0:	4628      	mov	r0, r5
 80044d2:	47b0      	blx	r6
 80044d4:	3001      	adds	r0, #1
 80044d6:	f43f ae42 	beq.w	800415e <_printf_float+0xae>
 80044da:	3701      	adds	r7, #1
 80044dc:	68e3      	ldr	r3, [r4, #12]
 80044de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80044e0:	1a9b      	subs	r3, r3, r2
 80044e2:	42bb      	cmp	r3, r7
 80044e4:	dcf1      	bgt.n	80044ca <_printf_float+0x41a>
 80044e6:	e702      	b.n	80042ee <_printf_float+0x23e>
 80044e8:	2700      	movs	r7, #0
 80044ea:	f104 0819 	add.w	r8, r4, #25
 80044ee:	e7f5      	b.n	80044dc <_printf_float+0x42c>
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f43f ae94 	beq.w	800421e <_printf_float+0x16e>
 80044f6:	f04f 0c00 	mov.w	ip, #0
 80044fa:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80044fe:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004502:	6022      	str	r2, [r4, #0]
 8004504:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004508:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	463a      	mov	r2, r7
 8004510:	464b      	mov	r3, r9
 8004512:	4628      	mov	r0, r5
 8004514:	f7ff fd3b 	bl	8003f8e <__cvt>
 8004518:	4607      	mov	r7, r0
 800451a:	e64f      	b.n	80041bc <_printf_float+0x10c>

0800451c <_printf_common>:
 800451c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004520:	4691      	mov	r9, r2
 8004522:	461f      	mov	r7, r3
 8004524:	688a      	ldr	r2, [r1, #8]
 8004526:	690b      	ldr	r3, [r1, #16]
 8004528:	4606      	mov	r6, r0
 800452a:	4293      	cmp	r3, r2
 800452c:	bfb8      	it	lt
 800452e:	4613      	movlt	r3, r2
 8004530:	f8c9 3000 	str.w	r3, [r9]
 8004534:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004538:	460c      	mov	r4, r1
 800453a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800453e:	b112      	cbz	r2, 8004546 <_printf_common+0x2a>
 8004540:	3301      	adds	r3, #1
 8004542:	f8c9 3000 	str.w	r3, [r9]
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	0699      	lsls	r1, r3, #26
 800454a:	bf42      	ittt	mi
 800454c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004550:	3302      	addmi	r3, #2
 8004552:	f8c9 3000 	strmi.w	r3, [r9]
 8004556:	6825      	ldr	r5, [r4, #0]
 8004558:	f015 0506 	ands.w	r5, r5, #6
 800455c:	d107      	bne.n	800456e <_printf_common+0x52>
 800455e:	f104 0a19 	add.w	sl, r4, #25
 8004562:	68e3      	ldr	r3, [r4, #12]
 8004564:	f8d9 2000 	ldr.w	r2, [r9]
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	42ab      	cmp	r3, r5
 800456c:	dc29      	bgt.n	80045c2 <_printf_common+0xa6>
 800456e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004572:	6822      	ldr	r2, [r4, #0]
 8004574:	3300      	adds	r3, #0
 8004576:	bf18      	it	ne
 8004578:	2301      	movne	r3, #1
 800457a:	0692      	lsls	r2, r2, #26
 800457c:	d42e      	bmi.n	80045dc <_printf_common+0xc0>
 800457e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004582:	4639      	mov	r1, r7
 8004584:	4630      	mov	r0, r6
 8004586:	47c0      	blx	r8
 8004588:	3001      	adds	r0, #1
 800458a:	d021      	beq.n	80045d0 <_printf_common+0xb4>
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	68e5      	ldr	r5, [r4, #12]
 8004590:	f003 0306 	and.w	r3, r3, #6
 8004594:	2b04      	cmp	r3, #4
 8004596:	bf18      	it	ne
 8004598:	2500      	movne	r5, #0
 800459a:	f8d9 2000 	ldr.w	r2, [r9]
 800459e:	f04f 0900 	mov.w	r9, #0
 80045a2:	bf08      	it	eq
 80045a4:	1aad      	subeq	r5, r5, r2
 80045a6:	68a3      	ldr	r3, [r4, #8]
 80045a8:	6922      	ldr	r2, [r4, #16]
 80045aa:	bf08      	it	eq
 80045ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045b0:	4293      	cmp	r3, r2
 80045b2:	bfc4      	itt	gt
 80045b4:	1a9b      	subgt	r3, r3, r2
 80045b6:	18ed      	addgt	r5, r5, r3
 80045b8:	341a      	adds	r4, #26
 80045ba:	454d      	cmp	r5, r9
 80045bc:	d11a      	bne.n	80045f4 <_printf_common+0xd8>
 80045be:	2000      	movs	r0, #0
 80045c0:	e008      	b.n	80045d4 <_printf_common+0xb8>
 80045c2:	2301      	movs	r3, #1
 80045c4:	4652      	mov	r2, sl
 80045c6:	4639      	mov	r1, r7
 80045c8:	4630      	mov	r0, r6
 80045ca:	47c0      	blx	r8
 80045cc:	3001      	adds	r0, #1
 80045ce:	d103      	bne.n	80045d8 <_printf_common+0xbc>
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295
 80045d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045d8:	3501      	adds	r5, #1
 80045da:	e7c2      	b.n	8004562 <_printf_common+0x46>
 80045dc:	2030      	movs	r0, #48	; 0x30
 80045de:	18e1      	adds	r1, r4, r3
 80045e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045ea:	4422      	add	r2, r4
 80045ec:	3302      	adds	r3, #2
 80045ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045f2:	e7c4      	b.n	800457e <_printf_common+0x62>
 80045f4:	2301      	movs	r3, #1
 80045f6:	4622      	mov	r2, r4
 80045f8:	4639      	mov	r1, r7
 80045fa:	4630      	mov	r0, r6
 80045fc:	47c0      	blx	r8
 80045fe:	3001      	adds	r0, #1
 8004600:	d0e6      	beq.n	80045d0 <_printf_common+0xb4>
 8004602:	f109 0901 	add.w	r9, r9, #1
 8004606:	e7d8      	b.n	80045ba <_printf_common+0x9e>

08004608 <_printf_i>:
 8004608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800460c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004610:	460c      	mov	r4, r1
 8004612:	7e09      	ldrb	r1, [r1, #24]
 8004614:	b085      	sub	sp, #20
 8004616:	296e      	cmp	r1, #110	; 0x6e
 8004618:	4617      	mov	r7, r2
 800461a:	4606      	mov	r6, r0
 800461c:	4698      	mov	r8, r3
 800461e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004620:	f000 80b3 	beq.w	800478a <_printf_i+0x182>
 8004624:	d822      	bhi.n	800466c <_printf_i+0x64>
 8004626:	2963      	cmp	r1, #99	; 0x63
 8004628:	d036      	beq.n	8004698 <_printf_i+0x90>
 800462a:	d80a      	bhi.n	8004642 <_printf_i+0x3a>
 800462c:	2900      	cmp	r1, #0
 800462e:	f000 80b9 	beq.w	80047a4 <_printf_i+0x19c>
 8004632:	2958      	cmp	r1, #88	; 0x58
 8004634:	f000 8083 	beq.w	800473e <_printf_i+0x136>
 8004638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800463c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004640:	e032      	b.n	80046a8 <_printf_i+0xa0>
 8004642:	2964      	cmp	r1, #100	; 0x64
 8004644:	d001      	beq.n	800464a <_printf_i+0x42>
 8004646:	2969      	cmp	r1, #105	; 0x69
 8004648:	d1f6      	bne.n	8004638 <_printf_i+0x30>
 800464a:	6820      	ldr	r0, [r4, #0]
 800464c:	6813      	ldr	r3, [r2, #0]
 800464e:	0605      	lsls	r5, r0, #24
 8004650:	f103 0104 	add.w	r1, r3, #4
 8004654:	d52a      	bpl.n	80046ac <_printf_i+0xa4>
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6011      	str	r1, [r2, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	da03      	bge.n	8004666 <_printf_i+0x5e>
 800465e:	222d      	movs	r2, #45	; 0x2d
 8004660:	425b      	negs	r3, r3
 8004662:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004666:	486f      	ldr	r0, [pc, #444]	; (8004824 <_printf_i+0x21c>)
 8004668:	220a      	movs	r2, #10
 800466a:	e039      	b.n	80046e0 <_printf_i+0xd8>
 800466c:	2973      	cmp	r1, #115	; 0x73
 800466e:	f000 809d 	beq.w	80047ac <_printf_i+0x1a4>
 8004672:	d808      	bhi.n	8004686 <_printf_i+0x7e>
 8004674:	296f      	cmp	r1, #111	; 0x6f
 8004676:	d020      	beq.n	80046ba <_printf_i+0xb2>
 8004678:	2970      	cmp	r1, #112	; 0x70
 800467a:	d1dd      	bne.n	8004638 <_printf_i+0x30>
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	f043 0320 	orr.w	r3, r3, #32
 8004682:	6023      	str	r3, [r4, #0]
 8004684:	e003      	b.n	800468e <_printf_i+0x86>
 8004686:	2975      	cmp	r1, #117	; 0x75
 8004688:	d017      	beq.n	80046ba <_printf_i+0xb2>
 800468a:	2978      	cmp	r1, #120	; 0x78
 800468c:	d1d4      	bne.n	8004638 <_printf_i+0x30>
 800468e:	2378      	movs	r3, #120	; 0x78
 8004690:	4865      	ldr	r0, [pc, #404]	; (8004828 <_printf_i+0x220>)
 8004692:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004696:	e055      	b.n	8004744 <_printf_i+0x13c>
 8004698:	6813      	ldr	r3, [r2, #0]
 800469a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800469e:	1d19      	adds	r1, r3, #4
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6011      	str	r1, [r2, #0]
 80046a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046a8:	2301      	movs	r3, #1
 80046aa:	e08c      	b.n	80047c6 <_printf_i+0x1be>
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046b2:	6011      	str	r1, [r2, #0]
 80046b4:	bf18      	it	ne
 80046b6:	b21b      	sxthne	r3, r3
 80046b8:	e7cf      	b.n	800465a <_printf_i+0x52>
 80046ba:	6813      	ldr	r3, [r2, #0]
 80046bc:	6825      	ldr	r5, [r4, #0]
 80046be:	1d18      	adds	r0, r3, #4
 80046c0:	6010      	str	r0, [r2, #0]
 80046c2:	0628      	lsls	r0, r5, #24
 80046c4:	d501      	bpl.n	80046ca <_printf_i+0xc2>
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	e002      	b.n	80046d0 <_printf_i+0xc8>
 80046ca:	0668      	lsls	r0, r5, #25
 80046cc:	d5fb      	bpl.n	80046c6 <_printf_i+0xbe>
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	296f      	cmp	r1, #111	; 0x6f
 80046d2:	bf14      	ite	ne
 80046d4:	220a      	movne	r2, #10
 80046d6:	2208      	moveq	r2, #8
 80046d8:	4852      	ldr	r0, [pc, #328]	; (8004824 <_printf_i+0x21c>)
 80046da:	2100      	movs	r1, #0
 80046dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046e0:	6865      	ldr	r5, [r4, #4]
 80046e2:	2d00      	cmp	r5, #0
 80046e4:	60a5      	str	r5, [r4, #8]
 80046e6:	f2c0 8095 	blt.w	8004814 <_printf_i+0x20c>
 80046ea:	6821      	ldr	r1, [r4, #0]
 80046ec:	f021 0104 	bic.w	r1, r1, #4
 80046f0:	6021      	str	r1, [r4, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d13d      	bne.n	8004772 <_printf_i+0x16a>
 80046f6:	2d00      	cmp	r5, #0
 80046f8:	f040 808e 	bne.w	8004818 <_printf_i+0x210>
 80046fc:	4665      	mov	r5, ip
 80046fe:	2a08      	cmp	r2, #8
 8004700:	d10b      	bne.n	800471a <_printf_i+0x112>
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	07db      	lsls	r3, r3, #31
 8004706:	d508      	bpl.n	800471a <_printf_i+0x112>
 8004708:	6923      	ldr	r3, [r4, #16]
 800470a:	6862      	ldr	r2, [r4, #4]
 800470c:	429a      	cmp	r2, r3
 800470e:	bfde      	ittt	le
 8004710:	2330      	movle	r3, #48	; 0x30
 8004712:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004716:	f105 35ff 	addle.w	r5, r5, #4294967295
 800471a:	ebac 0305 	sub.w	r3, ip, r5
 800471e:	6123      	str	r3, [r4, #16]
 8004720:	f8cd 8000 	str.w	r8, [sp]
 8004724:	463b      	mov	r3, r7
 8004726:	aa03      	add	r2, sp, #12
 8004728:	4621      	mov	r1, r4
 800472a:	4630      	mov	r0, r6
 800472c:	f7ff fef6 	bl	800451c <_printf_common>
 8004730:	3001      	adds	r0, #1
 8004732:	d14d      	bne.n	80047d0 <_printf_i+0x1c8>
 8004734:	f04f 30ff 	mov.w	r0, #4294967295
 8004738:	b005      	add	sp, #20
 800473a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800473e:	4839      	ldr	r0, [pc, #228]	; (8004824 <_printf_i+0x21c>)
 8004740:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004744:	6813      	ldr	r3, [r2, #0]
 8004746:	6821      	ldr	r1, [r4, #0]
 8004748:	1d1d      	adds	r5, r3, #4
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6015      	str	r5, [r2, #0]
 800474e:	060a      	lsls	r2, r1, #24
 8004750:	d50b      	bpl.n	800476a <_printf_i+0x162>
 8004752:	07ca      	lsls	r2, r1, #31
 8004754:	bf44      	itt	mi
 8004756:	f041 0120 	orrmi.w	r1, r1, #32
 800475a:	6021      	strmi	r1, [r4, #0]
 800475c:	b91b      	cbnz	r3, 8004766 <_printf_i+0x15e>
 800475e:	6822      	ldr	r2, [r4, #0]
 8004760:	f022 0220 	bic.w	r2, r2, #32
 8004764:	6022      	str	r2, [r4, #0]
 8004766:	2210      	movs	r2, #16
 8004768:	e7b7      	b.n	80046da <_printf_i+0xd2>
 800476a:	064d      	lsls	r5, r1, #25
 800476c:	bf48      	it	mi
 800476e:	b29b      	uxthmi	r3, r3
 8004770:	e7ef      	b.n	8004752 <_printf_i+0x14a>
 8004772:	4665      	mov	r5, ip
 8004774:	fbb3 f1f2 	udiv	r1, r3, r2
 8004778:	fb02 3311 	mls	r3, r2, r1, r3
 800477c:	5cc3      	ldrb	r3, [r0, r3]
 800477e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004782:	460b      	mov	r3, r1
 8004784:	2900      	cmp	r1, #0
 8004786:	d1f5      	bne.n	8004774 <_printf_i+0x16c>
 8004788:	e7b9      	b.n	80046fe <_printf_i+0xf6>
 800478a:	6813      	ldr	r3, [r2, #0]
 800478c:	6825      	ldr	r5, [r4, #0]
 800478e:	1d18      	adds	r0, r3, #4
 8004790:	6961      	ldr	r1, [r4, #20]
 8004792:	6010      	str	r0, [r2, #0]
 8004794:	0628      	lsls	r0, r5, #24
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	d501      	bpl.n	800479e <_printf_i+0x196>
 800479a:	6019      	str	r1, [r3, #0]
 800479c:	e002      	b.n	80047a4 <_printf_i+0x19c>
 800479e:	066a      	lsls	r2, r5, #25
 80047a0:	d5fb      	bpl.n	800479a <_printf_i+0x192>
 80047a2:	8019      	strh	r1, [r3, #0]
 80047a4:	2300      	movs	r3, #0
 80047a6:	4665      	mov	r5, ip
 80047a8:	6123      	str	r3, [r4, #16]
 80047aa:	e7b9      	b.n	8004720 <_printf_i+0x118>
 80047ac:	6813      	ldr	r3, [r2, #0]
 80047ae:	1d19      	adds	r1, r3, #4
 80047b0:	6011      	str	r1, [r2, #0]
 80047b2:	681d      	ldr	r5, [r3, #0]
 80047b4:	6862      	ldr	r2, [r4, #4]
 80047b6:	2100      	movs	r1, #0
 80047b8:	4628      	mov	r0, r5
 80047ba:	f000 ffe1 	bl	8005780 <memchr>
 80047be:	b108      	cbz	r0, 80047c4 <_printf_i+0x1bc>
 80047c0:	1b40      	subs	r0, r0, r5
 80047c2:	6060      	str	r0, [r4, #4]
 80047c4:	6863      	ldr	r3, [r4, #4]
 80047c6:	6123      	str	r3, [r4, #16]
 80047c8:	2300      	movs	r3, #0
 80047ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047ce:	e7a7      	b.n	8004720 <_printf_i+0x118>
 80047d0:	6923      	ldr	r3, [r4, #16]
 80047d2:	462a      	mov	r2, r5
 80047d4:	4639      	mov	r1, r7
 80047d6:	4630      	mov	r0, r6
 80047d8:	47c0      	blx	r8
 80047da:	3001      	adds	r0, #1
 80047dc:	d0aa      	beq.n	8004734 <_printf_i+0x12c>
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	079b      	lsls	r3, r3, #30
 80047e2:	d413      	bmi.n	800480c <_printf_i+0x204>
 80047e4:	68e0      	ldr	r0, [r4, #12]
 80047e6:	9b03      	ldr	r3, [sp, #12]
 80047e8:	4298      	cmp	r0, r3
 80047ea:	bfb8      	it	lt
 80047ec:	4618      	movlt	r0, r3
 80047ee:	e7a3      	b.n	8004738 <_printf_i+0x130>
 80047f0:	2301      	movs	r3, #1
 80047f2:	464a      	mov	r2, r9
 80047f4:	4639      	mov	r1, r7
 80047f6:	4630      	mov	r0, r6
 80047f8:	47c0      	blx	r8
 80047fa:	3001      	adds	r0, #1
 80047fc:	d09a      	beq.n	8004734 <_printf_i+0x12c>
 80047fe:	3501      	adds	r5, #1
 8004800:	68e3      	ldr	r3, [r4, #12]
 8004802:	9a03      	ldr	r2, [sp, #12]
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	42ab      	cmp	r3, r5
 8004808:	dcf2      	bgt.n	80047f0 <_printf_i+0x1e8>
 800480a:	e7eb      	b.n	80047e4 <_printf_i+0x1dc>
 800480c:	2500      	movs	r5, #0
 800480e:	f104 0919 	add.w	r9, r4, #25
 8004812:	e7f5      	b.n	8004800 <_printf_i+0x1f8>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1ac      	bne.n	8004772 <_printf_i+0x16a>
 8004818:	7803      	ldrb	r3, [r0, #0]
 800481a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800481e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004822:	e76c      	b.n	80046fe <_printf_i+0xf6>
 8004824:	080072e6 	.word	0x080072e6
 8004828:	080072f7 	.word	0x080072f7

0800482c <sniprintf>:
 800482c:	b40c      	push	{r2, r3}
 800482e:	b530      	push	{r4, r5, lr}
 8004830:	4b17      	ldr	r3, [pc, #92]	; (8004890 <sniprintf+0x64>)
 8004832:	1e0c      	subs	r4, r1, #0
 8004834:	b09d      	sub	sp, #116	; 0x74
 8004836:	681d      	ldr	r5, [r3, #0]
 8004838:	da08      	bge.n	800484c <sniprintf+0x20>
 800483a:	238b      	movs	r3, #139	; 0x8b
 800483c:	f04f 30ff 	mov.w	r0, #4294967295
 8004840:	602b      	str	r3, [r5, #0]
 8004842:	b01d      	add	sp, #116	; 0x74
 8004844:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004848:	b002      	add	sp, #8
 800484a:	4770      	bx	lr
 800484c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004850:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004854:	bf0c      	ite	eq
 8004856:	4623      	moveq	r3, r4
 8004858:	f104 33ff 	addne.w	r3, r4, #4294967295
 800485c:	9304      	str	r3, [sp, #16]
 800485e:	9307      	str	r3, [sp, #28]
 8004860:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004864:	9002      	str	r0, [sp, #8]
 8004866:	9006      	str	r0, [sp, #24]
 8004868:	f8ad 3016 	strh.w	r3, [sp, #22]
 800486c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800486e:	ab21      	add	r3, sp, #132	; 0x84
 8004870:	a902      	add	r1, sp, #8
 8004872:	4628      	mov	r0, r5
 8004874:	9301      	str	r3, [sp, #4]
 8004876:	f001 fb7b 	bl	8005f70 <_svfiprintf_r>
 800487a:	1c43      	adds	r3, r0, #1
 800487c:	bfbc      	itt	lt
 800487e:	238b      	movlt	r3, #139	; 0x8b
 8004880:	602b      	strlt	r3, [r5, #0]
 8004882:	2c00      	cmp	r4, #0
 8004884:	d0dd      	beq.n	8004842 <sniprintf+0x16>
 8004886:	2200      	movs	r2, #0
 8004888:	9b02      	ldr	r3, [sp, #8]
 800488a:	701a      	strb	r2, [r3, #0]
 800488c:	e7d9      	b.n	8004842 <sniprintf+0x16>
 800488e:	bf00      	nop
 8004890:	20000018 	.word	0x20000018

08004894 <siprintf>:
 8004894:	b40e      	push	{r1, r2, r3}
 8004896:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800489a:	b500      	push	{lr}
 800489c:	b09c      	sub	sp, #112	; 0x70
 800489e:	ab1d      	add	r3, sp, #116	; 0x74
 80048a0:	9002      	str	r0, [sp, #8]
 80048a2:	9006      	str	r0, [sp, #24]
 80048a4:	9107      	str	r1, [sp, #28]
 80048a6:	9104      	str	r1, [sp, #16]
 80048a8:	4808      	ldr	r0, [pc, #32]	; (80048cc <siprintf+0x38>)
 80048aa:	4909      	ldr	r1, [pc, #36]	; (80048d0 <siprintf+0x3c>)
 80048ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80048b0:	9105      	str	r1, [sp, #20]
 80048b2:	6800      	ldr	r0, [r0, #0]
 80048b4:	a902      	add	r1, sp, #8
 80048b6:	9301      	str	r3, [sp, #4]
 80048b8:	f001 fb5a 	bl	8005f70 <_svfiprintf_r>
 80048bc:	2200      	movs	r2, #0
 80048be:	9b02      	ldr	r3, [sp, #8]
 80048c0:	701a      	strb	r2, [r3, #0]
 80048c2:	b01c      	add	sp, #112	; 0x70
 80048c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80048c8:	b003      	add	sp, #12
 80048ca:	4770      	bx	lr
 80048cc:	20000018 	.word	0x20000018
 80048d0:	ffff0208 	.word	0xffff0208

080048d4 <strtok>:
 80048d4:	4b13      	ldr	r3, [pc, #76]	; (8004924 <strtok+0x50>)
 80048d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048da:	681d      	ldr	r5, [r3, #0]
 80048dc:	4606      	mov	r6, r0
 80048de:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80048e0:	460f      	mov	r7, r1
 80048e2:	b9b4      	cbnz	r4, 8004912 <strtok+0x3e>
 80048e4:	2050      	movs	r0, #80	; 0x50
 80048e6:	f000 ff31 	bl	800574c <malloc>
 80048ea:	65a8      	str	r0, [r5, #88]	; 0x58
 80048ec:	e9c0 4400 	strd	r4, r4, [r0]
 80048f0:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80048f4:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80048f8:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80048fc:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004900:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004904:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004908:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800490c:	6184      	str	r4, [r0, #24]
 800490e:	7704      	strb	r4, [r0, #28]
 8004910:	6244      	str	r4, [r0, #36]	; 0x24
 8004912:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8004914:	4639      	mov	r1, r7
 8004916:	4630      	mov	r0, r6
 8004918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800491c:	2301      	movs	r3, #1
 800491e:	f000 b803 	b.w	8004928 <__strtok_r>
 8004922:	bf00      	nop
 8004924:	20000018 	.word	0x20000018

08004928 <__strtok_r>:
 8004928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800492a:	b918      	cbnz	r0, 8004934 <__strtok_r+0xc>
 800492c:	6810      	ldr	r0, [r2, #0]
 800492e:	b908      	cbnz	r0, 8004934 <__strtok_r+0xc>
 8004930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004932:	4620      	mov	r0, r4
 8004934:	4604      	mov	r4, r0
 8004936:	460f      	mov	r7, r1
 8004938:	f814 5b01 	ldrb.w	r5, [r4], #1
 800493c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004940:	b91e      	cbnz	r6, 800494a <__strtok_r+0x22>
 8004942:	b96d      	cbnz	r5, 8004960 <__strtok_r+0x38>
 8004944:	6015      	str	r5, [r2, #0]
 8004946:	4628      	mov	r0, r5
 8004948:	e7f2      	b.n	8004930 <__strtok_r+0x8>
 800494a:	42b5      	cmp	r5, r6
 800494c:	d1f6      	bne.n	800493c <__strtok_r+0x14>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1ef      	bne.n	8004932 <__strtok_r+0xa>
 8004952:	6014      	str	r4, [r2, #0]
 8004954:	7003      	strb	r3, [r0, #0]
 8004956:	e7eb      	b.n	8004930 <__strtok_r+0x8>
 8004958:	462b      	mov	r3, r5
 800495a:	e00d      	b.n	8004978 <__strtok_r+0x50>
 800495c:	b926      	cbnz	r6, 8004968 <__strtok_r+0x40>
 800495e:	461c      	mov	r4, r3
 8004960:	4623      	mov	r3, r4
 8004962:	460f      	mov	r7, r1
 8004964:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004968:	f817 6b01 	ldrb.w	r6, [r7], #1
 800496c:	42b5      	cmp	r5, r6
 800496e:	d1f5      	bne.n	800495c <__strtok_r+0x34>
 8004970:	2d00      	cmp	r5, #0
 8004972:	d0f1      	beq.n	8004958 <__strtok_r+0x30>
 8004974:	2100      	movs	r1, #0
 8004976:	7021      	strb	r1, [r4, #0]
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	e7d9      	b.n	8004930 <__strtok_r+0x8>

0800497c <_strtol_l.isra.0>:
 800497c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004980:	4680      	mov	r8, r0
 8004982:	4689      	mov	r9, r1
 8004984:	4692      	mov	sl, r2
 8004986:	461e      	mov	r6, r3
 8004988:	460f      	mov	r7, r1
 800498a:	463d      	mov	r5, r7
 800498c:	9808      	ldr	r0, [sp, #32]
 800498e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004992:	f000 fec9 	bl	8005728 <__locale_ctype_ptr_l>
 8004996:	4420      	add	r0, r4
 8004998:	7843      	ldrb	r3, [r0, #1]
 800499a:	f013 0308 	ands.w	r3, r3, #8
 800499e:	d132      	bne.n	8004a06 <_strtol_l.isra.0+0x8a>
 80049a0:	2c2d      	cmp	r4, #45	; 0x2d
 80049a2:	d132      	bne.n	8004a0a <_strtol_l.isra.0+0x8e>
 80049a4:	2201      	movs	r2, #1
 80049a6:	787c      	ldrb	r4, [r7, #1]
 80049a8:	1cbd      	adds	r5, r7, #2
 80049aa:	2e00      	cmp	r6, #0
 80049ac:	d05d      	beq.n	8004a6a <_strtol_l.isra.0+0xee>
 80049ae:	2e10      	cmp	r6, #16
 80049b0:	d109      	bne.n	80049c6 <_strtol_l.isra.0+0x4a>
 80049b2:	2c30      	cmp	r4, #48	; 0x30
 80049b4:	d107      	bne.n	80049c6 <_strtol_l.isra.0+0x4a>
 80049b6:	782b      	ldrb	r3, [r5, #0]
 80049b8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80049bc:	2b58      	cmp	r3, #88	; 0x58
 80049be:	d14f      	bne.n	8004a60 <_strtol_l.isra.0+0xe4>
 80049c0:	2610      	movs	r6, #16
 80049c2:	786c      	ldrb	r4, [r5, #1]
 80049c4:	3502      	adds	r5, #2
 80049c6:	2a00      	cmp	r2, #0
 80049c8:	bf14      	ite	ne
 80049ca:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80049ce:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80049d2:	2700      	movs	r7, #0
 80049d4:	fbb1 fcf6 	udiv	ip, r1, r6
 80049d8:	4638      	mov	r0, r7
 80049da:	fb06 1e1c 	mls	lr, r6, ip, r1
 80049de:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80049e2:	2b09      	cmp	r3, #9
 80049e4:	d817      	bhi.n	8004a16 <_strtol_l.isra.0+0x9a>
 80049e6:	461c      	mov	r4, r3
 80049e8:	42a6      	cmp	r6, r4
 80049ea:	dd23      	ble.n	8004a34 <_strtol_l.isra.0+0xb8>
 80049ec:	1c7b      	adds	r3, r7, #1
 80049ee:	d007      	beq.n	8004a00 <_strtol_l.isra.0+0x84>
 80049f0:	4584      	cmp	ip, r0
 80049f2:	d31c      	bcc.n	8004a2e <_strtol_l.isra.0+0xb2>
 80049f4:	d101      	bne.n	80049fa <_strtol_l.isra.0+0x7e>
 80049f6:	45a6      	cmp	lr, r4
 80049f8:	db19      	blt.n	8004a2e <_strtol_l.isra.0+0xb2>
 80049fa:	2701      	movs	r7, #1
 80049fc:	fb00 4006 	mla	r0, r0, r6, r4
 8004a00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a04:	e7eb      	b.n	80049de <_strtol_l.isra.0+0x62>
 8004a06:	462f      	mov	r7, r5
 8004a08:	e7bf      	b.n	800498a <_strtol_l.isra.0+0xe>
 8004a0a:	2c2b      	cmp	r4, #43	; 0x2b
 8004a0c:	bf04      	itt	eq
 8004a0e:	1cbd      	addeq	r5, r7, #2
 8004a10:	787c      	ldrbeq	r4, [r7, #1]
 8004a12:	461a      	mov	r2, r3
 8004a14:	e7c9      	b.n	80049aa <_strtol_l.isra.0+0x2e>
 8004a16:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004a1a:	2b19      	cmp	r3, #25
 8004a1c:	d801      	bhi.n	8004a22 <_strtol_l.isra.0+0xa6>
 8004a1e:	3c37      	subs	r4, #55	; 0x37
 8004a20:	e7e2      	b.n	80049e8 <_strtol_l.isra.0+0x6c>
 8004a22:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004a26:	2b19      	cmp	r3, #25
 8004a28:	d804      	bhi.n	8004a34 <_strtol_l.isra.0+0xb8>
 8004a2a:	3c57      	subs	r4, #87	; 0x57
 8004a2c:	e7dc      	b.n	80049e8 <_strtol_l.isra.0+0x6c>
 8004a2e:	f04f 37ff 	mov.w	r7, #4294967295
 8004a32:	e7e5      	b.n	8004a00 <_strtol_l.isra.0+0x84>
 8004a34:	1c7b      	adds	r3, r7, #1
 8004a36:	d108      	bne.n	8004a4a <_strtol_l.isra.0+0xce>
 8004a38:	2322      	movs	r3, #34	; 0x22
 8004a3a:	4608      	mov	r0, r1
 8004a3c:	f8c8 3000 	str.w	r3, [r8]
 8004a40:	f1ba 0f00 	cmp.w	sl, #0
 8004a44:	d107      	bne.n	8004a56 <_strtol_l.isra.0+0xda>
 8004a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a4a:	b102      	cbz	r2, 8004a4e <_strtol_l.isra.0+0xd2>
 8004a4c:	4240      	negs	r0, r0
 8004a4e:	f1ba 0f00 	cmp.w	sl, #0
 8004a52:	d0f8      	beq.n	8004a46 <_strtol_l.isra.0+0xca>
 8004a54:	b10f      	cbz	r7, 8004a5a <_strtol_l.isra.0+0xde>
 8004a56:	f105 39ff 	add.w	r9, r5, #4294967295
 8004a5a:	f8ca 9000 	str.w	r9, [sl]
 8004a5e:	e7f2      	b.n	8004a46 <_strtol_l.isra.0+0xca>
 8004a60:	2430      	movs	r4, #48	; 0x30
 8004a62:	2e00      	cmp	r6, #0
 8004a64:	d1af      	bne.n	80049c6 <_strtol_l.isra.0+0x4a>
 8004a66:	2608      	movs	r6, #8
 8004a68:	e7ad      	b.n	80049c6 <_strtol_l.isra.0+0x4a>
 8004a6a:	2c30      	cmp	r4, #48	; 0x30
 8004a6c:	d0a3      	beq.n	80049b6 <_strtol_l.isra.0+0x3a>
 8004a6e:	260a      	movs	r6, #10
 8004a70:	e7a9      	b.n	80049c6 <_strtol_l.isra.0+0x4a>
	...

08004a74 <strtol>:
 8004a74:	4b08      	ldr	r3, [pc, #32]	; (8004a98 <strtol+0x24>)
 8004a76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a78:	681c      	ldr	r4, [r3, #0]
 8004a7a:	4d08      	ldr	r5, [pc, #32]	; (8004a9c <strtol+0x28>)
 8004a7c:	6a23      	ldr	r3, [r4, #32]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	bf08      	it	eq
 8004a82:	462b      	moveq	r3, r5
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	4613      	mov	r3, r2
 8004a88:	460a      	mov	r2, r1
 8004a8a:	4601      	mov	r1, r0
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f7ff ff75 	bl	800497c <_strtol_l.isra.0>
 8004a92:	b003      	add	sp, #12
 8004a94:	bd30      	pop	{r4, r5, pc}
 8004a96:	bf00      	nop
 8004a98:	20000018 	.word	0x20000018
 8004a9c:	2000007c 	.word	0x2000007c

08004aa0 <quorem>:
 8004aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa4:	6903      	ldr	r3, [r0, #16]
 8004aa6:	690c      	ldr	r4, [r1, #16]
 8004aa8:	4680      	mov	r8, r0
 8004aaa:	42a3      	cmp	r3, r4
 8004aac:	f2c0 8084 	blt.w	8004bb8 <quorem+0x118>
 8004ab0:	3c01      	subs	r4, #1
 8004ab2:	f101 0714 	add.w	r7, r1, #20
 8004ab6:	f100 0614 	add.w	r6, r0, #20
 8004aba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004abe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004ac2:	3501      	adds	r5, #1
 8004ac4:	fbb0 f5f5 	udiv	r5, r0, r5
 8004ac8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004acc:	eb06 030c 	add.w	r3, r6, ip
 8004ad0:	eb07 090c 	add.w	r9, r7, ip
 8004ad4:	9301      	str	r3, [sp, #4]
 8004ad6:	b39d      	cbz	r5, 8004b40 <quorem+0xa0>
 8004ad8:	f04f 0a00 	mov.w	sl, #0
 8004adc:	4638      	mov	r0, r7
 8004ade:	46b6      	mov	lr, r6
 8004ae0:	46d3      	mov	fp, sl
 8004ae2:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ae6:	b293      	uxth	r3, r2
 8004ae8:	fb05 a303 	mla	r3, r5, r3, sl
 8004aec:	0c12      	lsrs	r2, r2, #16
 8004aee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004af2:	fb05 a202 	mla	r2, r5, r2, sl
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	ebab 0303 	sub.w	r3, fp, r3
 8004afc:	f8de b000 	ldr.w	fp, [lr]
 8004b00:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004b04:	fa1f fb8b 	uxth.w	fp, fp
 8004b08:	445b      	add	r3, fp
 8004b0a:	fa1f fb82 	uxth.w	fp, r2
 8004b0e:	f8de 2000 	ldr.w	r2, [lr]
 8004b12:	4581      	cmp	r9, r0
 8004b14:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004b18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b22:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004b26:	f84e 3b04 	str.w	r3, [lr], #4
 8004b2a:	d2da      	bcs.n	8004ae2 <quorem+0x42>
 8004b2c:	f856 300c 	ldr.w	r3, [r6, ip]
 8004b30:	b933      	cbnz	r3, 8004b40 <quorem+0xa0>
 8004b32:	9b01      	ldr	r3, [sp, #4]
 8004b34:	3b04      	subs	r3, #4
 8004b36:	429e      	cmp	r6, r3
 8004b38:	461a      	mov	r2, r3
 8004b3a:	d331      	bcc.n	8004ba0 <quorem+0x100>
 8004b3c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b40:	4640      	mov	r0, r8
 8004b42:	f001 f83f 	bl	8005bc4 <__mcmp>
 8004b46:	2800      	cmp	r0, #0
 8004b48:	db26      	blt.n	8004b98 <quorem+0xf8>
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	f04f 0c00 	mov.w	ip, #0
 8004b50:	3501      	adds	r5, #1
 8004b52:	f857 1b04 	ldr.w	r1, [r7], #4
 8004b56:	f8d0 e000 	ldr.w	lr, [r0]
 8004b5a:	b28b      	uxth	r3, r1
 8004b5c:	ebac 0303 	sub.w	r3, ip, r3
 8004b60:	fa1f f28e 	uxth.w	r2, lr
 8004b64:	4413      	add	r3, r2
 8004b66:	0c0a      	lsrs	r2, r1, #16
 8004b68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004b6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b76:	45b9      	cmp	r9, r7
 8004b78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004b7c:	f840 3b04 	str.w	r3, [r0], #4
 8004b80:	d2e7      	bcs.n	8004b52 <quorem+0xb2>
 8004b82:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004b86:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004b8a:	b92a      	cbnz	r2, 8004b98 <quorem+0xf8>
 8004b8c:	3b04      	subs	r3, #4
 8004b8e:	429e      	cmp	r6, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	d30b      	bcc.n	8004bac <quorem+0x10c>
 8004b94:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b98:	4628      	mov	r0, r5
 8004b9a:	b003      	add	sp, #12
 8004b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba0:	6812      	ldr	r2, [r2, #0]
 8004ba2:	3b04      	subs	r3, #4
 8004ba4:	2a00      	cmp	r2, #0
 8004ba6:	d1c9      	bne.n	8004b3c <quorem+0x9c>
 8004ba8:	3c01      	subs	r4, #1
 8004baa:	e7c4      	b.n	8004b36 <quorem+0x96>
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	3b04      	subs	r3, #4
 8004bb0:	2a00      	cmp	r2, #0
 8004bb2:	d1ef      	bne.n	8004b94 <quorem+0xf4>
 8004bb4:	3c01      	subs	r4, #1
 8004bb6:	e7ea      	b.n	8004b8e <quorem+0xee>
 8004bb8:	2000      	movs	r0, #0
 8004bba:	e7ee      	b.n	8004b9a <quorem+0xfa>
 8004bbc:	0000      	movs	r0, r0
	...

08004bc0 <_dtoa_r>:
 8004bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc4:	4616      	mov	r6, r2
 8004bc6:	461f      	mov	r7, r3
 8004bc8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004bca:	b095      	sub	sp, #84	; 0x54
 8004bcc:	4604      	mov	r4, r0
 8004bce:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004bd2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004bd6:	b93d      	cbnz	r5, 8004be8 <_dtoa_r+0x28>
 8004bd8:	2010      	movs	r0, #16
 8004bda:	f000 fdb7 	bl	800574c <malloc>
 8004bde:	6260      	str	r0, [r4, #36]	; 0x24
 8004be0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004be4:	6005      	str	r5, [r0, #0]
 8004be6:	60c5      	str	r5, [r0, #12]
 8004be8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bea:	6819      	ldr	r1, [r3, #0]
 8004bec:	b151      	cbz	r1, 8004c04 <_dtoa_r+0x44>
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	4093      	lsls	r3, r2
 8004bf4:	604a      	str	r2, [r1, #4]
 8004bf6:	608b      	str	r3, [r1, #8]
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f000 fe03 	bl	8005804 <_Bfree>
 8004bfe:	2200      	movs	r2, #0
 8004c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	1e3b      	subs	r3, r7, #0
 8004c06:	bfaf      	iteee	ge
 8004c08:	2300      	movge	r3, #0
 8004c0a:	2201      	movlt	r2, #1
 8004c0c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004c10:	9303      	strlt	r3, [sp, #12]
 8004c12:	bfac      	ite	ge
 8004c14:	f8c8 3000 	strge.w	r3, [r8]
 8004c18:	f8c8 2000 	strlt.w	r2, [r8]
 8004c1c:	4bae      	ldr	r3, [pc, #696]	; (8004ed8 <_dtoa_r+0x318>)
 8004c1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004c22:	ea33 0308 	bics.w	r3, r3, r8
 8004c26:	d11b      	bne.n	8004c60 <_dtoa_r+0xa0>
 8004c28:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	9b02      	ldr	r3, [sp, #8]
 8004c32:	b923      	cbnz	r3, 8004c3e <_dtoa_r+0x7e>
 8004c34:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	f000 8545 	beq.w	80056c8 <_dtoa_r+0xb08>
 8004c3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c40:	b953      	cbnz	r3, 8004c58 <_dtoa_r+0x98>
 8004c42:	4ba6      	ldr	r3, [pc, #664]	; (8004edc <_dtoa_r+0x31c>)
 8004c44:	e021      	b.n	8004c8a <_dtoa_r+0xca>
 8004c46:	4ba6      	ldr	r3, [pc, #664]	; (8004ee0 <_dtoa_r+0x320>)
 8004c48:	9306      	str	r3, [sp, #24]
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	9806      	ldr	r0, [sp, #24]
 8004c52:	b015      	add	sp, #84	; 0x54
 8004c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c58:	4ba0      	ldr	r3, [pc, #640]	; (8004edc <_dtoa_r+0x31c>)
 8004c5a:	9306      	str	r3, [sp, #24]
 8004c5c:	3303      	adds	r3, #3
 8004c5e:	e7f5      	b.n	8004c4c <_dtoa_r+0x8c>
 8004c60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004c64:	2200      	movs	r2, #0
 8004c66:	2300      	movs	r3, #0
 8004c68:	4630      	mov	r0, r6
 8004c6a:	4639      	mov	r1, r7
 8004c6c:	f7fb fe9c 	bl	80009a8 <__aeabi_dcmpeq>
 8004c70:	4682      	mov	sl, r0
 8004c72:	b160      	cbz	r0, 8004c8e <_dtoa_r+0xce>
 8004c74:	2301      	movs	r3, #1
 8004c76:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 8520 	beq.w	80056c2 <_dtoa_r+0xb02>
 8004c82:	4b98      	ldr	r3, [pc, #608]	; (8004ee4 <_dtoa_r+0x324>)
 8004c84:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	9306      	str	r3, [sp, #24]
 8004c8c:	e7e0      	b.n	8004c50 <_dtoa_r+0x90>
 8004c8e:	ab12      	add	r3, sp, #72	; 0x48
 8004c90:	9301      	str	r3, [sp, #4]
 8004c92:	ab13      	add	r3, sp, #76	; 0x4c
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	4632      	mov	r2, r6
 8004c98:	463b      	mov	r3, r7
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	f001 f80a 	bl	8005cb4 <__d2b>
 8004ca0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004ca4:	4683      	mov	fp, r0
 8004ca6:	2d00      	cmp	r5, #0
 8004ca8:	d07d      	beq.n	8004da6 <_dtoa_r+0x1e6>
 8004caa:	46b0      	mov	r8, r6
 8004cac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004cb0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004cb4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004cb8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004cbc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	4b89      	ldr	r3, [pc, #548]	; (8004ee8 <_dtoa_r+0x328>)
 8004cc4:	4640      	mov	r0, r8
 8004cc6:	4649      	mov	r1, r9
 8004cc8:	f7fb fa4e 	bl	8000168 <__aeabi_dsub>
 8004ccc:	a37c      	add	r3, pc, #496	; (adr r3, 8004ec0 <_dtoa_r+0x300>)
 8004cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd2:	f7fb fc01 	bl	80004d8 <__aeabi_dmul>
 8004cd6:	a37c      	add	r3, pc, #496	; (adr r3, 8004ec8 <_dtoa_r+0x308>)
 8004cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cdc:	f7fb fa46 	bl	800016c <__adddf3>
 8004ce0:	4606      	mov	r6, r0
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	460f      	mov	r7, r1
 8004ce6:	f7fb fb8d 	bl	8000404 <__aeabi_i2d>
 8004cea:	a379      	add	r3, pc, #484	; (adr r3, 8004ed0 <_dtoa_r+0x310>)
 8004cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf0:	f7fb fbf2 	bl	80004d8 <__aeabi_dmul>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	4639      	mov	r1, r7
 8004cfc:	f7fb fa36 	bl	800016c <__adddf3>
 8004d00:	4606      	mov	r6, r0
 8004d02:	460f      	mov	r7, r1
 8004d04:	f7fb fe98 	bl	8000a38 <__aeabi_d2iz>
 8004d08:	2200      	movs	r2, #0
 8004d0a:	4682      	mov	sl, r0
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	4630      	mov	r0, r6
 8004d10:	4639      	mov	r1, r7
 8004d12:	f7fb fe53 	bl	80009bc <__aeabi_dcmplt>
 8004d16:	b148      	cbz	r0, 8004d2c <_dtoa_r+0x16c>
 8004d18:	4650      	mov	r0, sl
 8004d1a:	f7fb fb73 	bl	8000404 <__aeabi_i2d>
 8004d1e:	4632      	mov	r2, r6
 8004d20:	463b      	mov	r3, r7
 8004d22:	f7fb fe41 	bl	80009a8 <__aeabi_dcmpeq>
 8004d26:	b908      	cbnz	r0, 8004d2c <_dtoa_r+0x16c>
 8004d28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d2c:	f1ba 0f16 	cmp.w	sl, #22
 8004d30:	d85a      	bhi.n	8004de8 <_dtoa_r+0x228>
 8004d32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d36:	496d      	ldr	r1, [pc, #436]	; (8004eec <_dtoa_r+0x32c>)
 8004d38:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d40:	f7fb fe5a 	bl	80009f8 <__aeabi_dcmpgt>
 8004d44:	2800      	cmp	r0, #0
 8004d46:	d051      	beq.n	8004dec <_dtoa_r+0x22c>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d4e:	930d      	str	r3, [sp, #52]	; 0x34
 8004d50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d52:	1b5d      	subs	r5, r3, r5
 8004d54:	1e6b      	subs	r3, r5, #1
 8004d56:	9307      	str	r3, [sp, #28]
 8004d58:	bf43      	ittte	mi
 8004d5a:	2300      	movmi	r3, #0
 8004d5c:	f1c5 0901 	rsbmi	r9, r5, #1
 8004d60:	9307      	strmi	r3, [sp, #28]
 8004d62:	f04f 0900 	movpl.w	r9, #0
 8004d66:	f1ba 0f00 	cmp.w	sl, #0
 8004d6a:	db41      	blt.n	8004df0 <_dtoa_r+0x230>
 8004d6c:	9b07      	ldr	r3, [sp, #28]
 8004d6e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004d72:	4453      	add	r3, sl
 8004d74:	9307      	str	r3, [sp, #28]
 8004d76:	2300      	movs	r3, #0
 8004d78:	9308      	str	r3, [sp, #32]
 8004d7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004d7c:	2b09      	cmp	r3, #9
 8004d7e:	f200 808f 	bhi.w	8004ea0 <_dtoa_r+0x2e0>
 8004d82:	2b05      	cmp	r3, #5
 8004d84:	bfc4      	itt	gt
 8004d86:	3b04      	subgt	r3, #4
 8004d88:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004d8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004d8c:	bfc8      	it	gt
 8004d8e:	2500      	movgt	r5, #0
 8004d90:	f1a3 0302 	sub.w	r3, r3, #2
 8004d94:	bfd8      	it	le
 8004d96:	2501      	movle	r5, #1
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	f200 808d 	bhi.w	8004eb8 <_dtoa_r+0x2f8>
 8004d9e:	e8df f003 	tbb	[pc, r3]
 8004da2:	7d7b      	.short	0x7d7b
 8004da4:	6f2f      	.short	0x6f2f
 8004da6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004daa:	441d      	add	r5, r3
 8004dac:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004db0:	2820      	cmp	r0, #32
 8004db2:	dd13      	ble.n	8004ddc <_dtoa_r+0x21c>
 8004db4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004db8:	9b02      	ldr	r3, [sp, #8]
 8004dba:	fa08 f800 	lsl.w	r8, r8, r0
 8004dbe:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004dc2:	fa23 f000 	lsr.w	r0, r3, r0
 8004dc6:	ea48 0000 	orr.w	r0, r8, r0
 8004dca:	f7fb fb0b 	bl	80003e4 <__aeabi_ui2d>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	4680      	mov	r8, r0
 8004dd2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004dd6:	3d01      	subs	r5, #1
 8004dd8:	9310      	str	r3, [sp, #64]	; 0x40
 8004dda:	e771      	b.n	8004cc0 <_dtoa_r+0x100>
 8004ddc:	9b02      	ldr	r3, [sp, #8]
 8004dde:	f1c0 0020 	rsb	r0, r0, #32
 8004de2:	fa03 f000 	lsl.w	r0, r3, r0
 8004de6:	e7f0      	b.n	8004dca <_dtoa_r+0x20a>
 8004de8:	2301      	movs	r3, #1
 8004dea:	e7b0      	b.n	8004d4e <_dtoa_r+0x18e>
 8004dec:	900d      	str	r0, [sp, #52]	; 0x34
 8004dee:	e7af      	b.n	8004d50 <_dtoa_r+0x190>
 8004df0:	f1ca 0300 	rsb	r3, sl, #0
 8004df4:	9308      	str	r3, [sp, #32]
 8004df6:	2300      	movs	r3, #0
 8004df8:	eba9 090a 	sub.w	r9, r9, sl
 8004dfc:	930c      	str	r3, [sp, #48]	; 0x30
 8004dfe:	e7bc      	b.n	8004d7a <_dtoa_r+0x1ba>
 8004e00:	2301      	movs	r3, #1
 8004e02:	9309      	str	r3, [sp, #36]	; 0x24
 8004e04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	dd74      	ble.n	8004ef4 <_dtoa_r+0x334>
 8004e0a:	4698      	mov	r8, r3
 8004e0c:	9304      	str	r3, [sp, #16]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004e12:	6072      	str	r2, [r6, #4]
 8004e14:	2204      	movs	r2, #4
 8004e16:	f102 0014 	add.w	r0, r2, #20
 8004e1a:	4298      	cmp	r0, r3
 8004e1c:	6871      	ldr	r1, [r6, #4]
 8004e1e:	d96e      	bls.n	8004efe <_dtoa_r+0x33e>
 8004e20:	4620      	mov	r0, r4
 8004e22:	f000 fcbb 	bl	800579c <_Balloc>
 8004e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e28:	6030      	str	r0, [r6, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f1b8 0f0e 	cmp.w	r8, #14
 8004e30:	9306      	str	r3, [sp, #24]
 8004e32:	f200 80ed 	bhi.w	8005010 <_dtoa_r+0x450>
 8004e36:	2d00      	cmp	r5, #0
 8004e38:	f000 80ea 	beq.w	8005010 <_dtoa_r+0x450>
 8004e3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e40:	f1ba 0f00 	cmp.w	sl, #0
 8004e44:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004e48:	dd77      	ble.n	8004f3a <_dtoa_r+0x37a>
 8004e4a:	4a28      	ldr	r2, [pc, #160]	; (8004eec <_dtoa_r+0x32c>)
 8004e4c:	f00a 030f 	and.w	r3, sl, #15
 8004e50:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004e54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004e58:	06f0      	lsls	r0, r6, #27
 8004e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004e62:	d568      	bpl.n	8004f36 <_dtoa_r+0x376>
 8004e64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004e68:	4b21      	ldr	r3, [pc, #132]	; (8004ef0 <_dtoa_r+0x330>)
 8004e6a:	2503      	movs	r5, #3
 8004e6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e70:	f7fb fc5c 	bl	800072c <__aeabi_ddiv>
 8004e74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e78:	f006 060f 	and.w	r6, r6, #15
 8004e7c:	4f1c      	ldr	r7, [pc, #112]	; (8004ef0 <_dtoa_r+0x330>)
 8004e7e:	e04f      	b.n	8004f20 <_dtoa_r+0x360>
 8004e80:	2301      	movs	r3, #1
 8004e82:	9309      	str	r3, [sp, #36]	; 0x24
 8004e84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004e86:	4453      	add	r3, sl
 8004e88:	f103 0801 	add.w	r8, r3, #1
 8004e8c:	9304      	str	r3, [sp, #16]
 8004e8e:	4643      	mov	r3, r8
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	bfb8      	it	lt
 8004e94:	2301      	movlt	r3, #1
 8004e96:	e7ba      	b.n	8004e0e <_dtoa_r+0x24e>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e7b2      	b.n	8004e02 <_dtoa_r+0x242>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	e7f0      	b.n	8004e82 <_dtoa_r+0x2c2>
 8004ea0:	2501      	movs	r5, #1
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	9509      	str	r5, [sp, #36]	; 0x24
 8004ea6:	931e      	str	r3, [sp, #120]	; 0x78
 8004ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8004eac:	2200      	movs	r2, #0
 8004eae:	9304      	str	r3, [sp, #16]
 8004eb0:	4698      	mov	r8, r3
 8004eb2:	2312      	movs	r3, #18
 8004eb4:	921f      	str	r2, [sp, #124]	; 0x7c
 8004eb6:	e7aa      	b.n	8004e0e <_dtoa_r+0x24e>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	9309      	str	r3, [sp, #36]	; 0x24
 8004ebc:	e7f4      	b.n	8004ea8 <_dtoa_r+0x2e8>
 8004ebe:	bf00      	nop
 8004ec0:	636f4361 	.word	0x636f4361
 8004ec4:	3fd287a7 	.word	0x3fd287a7
 8004ec8:	8b60c8b3 	.word	0x8b60c8b3
 8004ecc:	3fc68a28 	.word	0x3fc68a28
 8004ed0:	509f79fb 	.word	0x509f79fb
 8004ed4:	3fd34413 	.word	0x3fd34413
 8004ed8:	7ff00000 	.word	0x7ff00000
 8004edc:	08007311 	.word	0x08007311
 8004ee0:	08007308 	.word	0x08007308
 8004ee4:	080072e5 	.word	0x080072e5
 8004ee8:	3ff80000 	.word	0x3ff80000
 8004eec:	08007348 	.word	0x08007348
 8004ef0:	08007320 	.word	0x08007320
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	9304      	str	r3, [sp, #16]
 8004ef8:	4698      	mov	r8, r3
 8004efa:	461a      	mov	r2, r3
 8004efc:	e7da      	b.n	8004eb4 <_dtoa_r+0x2f4>
 8004efe:	3101      	adds	r1, #1
 8004f00:	6071      	str	r1, [r6, #4]
 8004f02:	0052      	lsls	r2, r2, #1
 8004f04:	e787      	b.n	8004e16 <_dtoa_r+0x256>
 8004f06:	07f1      	lsls	r1, r6, #31
 8004f08:	d508      	bpl.n	8004f1c <_dtoa_r+0x35c>
 8004f0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f12:	f7fb fae1 	bl	80004d8 <__aeabi_dmul>
 8004f16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004f1a:	3501      	adds	r5, #1
 8004f1c:	1076      	asrs	r6, r6, #1
 8004f1e:	3708      	adds	r7, #8
 8004f20:	2e00      	cmp	r6, #0
 8004f22:	d1f0      	bne.n	8004f06 <_dtoa_r+0x346>
 8004f24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004f28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f2c:	f7fb fbfe 	bl	800072c <__aeabi_ddiv>
 8004f30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f34:	e01b      	b.n	8004f6e <_dtoa_r+0x3ae>
 8004f36:	2502      	movs	r5, #2
 8004f38:	e7a0      	b.n	8004e7c <_dtoa_r+0x2bc>
 8004f3a:	f000 80a4 	beq.w	8005086 <_dtoa_r+0x4c6>
 8004f3e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004f42:	f1ca 0600 	rsb	r6, sl, #0
 8004f46:	4ba0      	ldr	r3, [pc, #640]	; (80051c8 <_dtoa_r+0x608>)
 8004f48:	f006 020f 	and.w	r2, r6, #15
 8004f4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f54:	f7fb fac0 	bl	80004d8 <__aeabi_dmul>
 8004f58:	2502      	movs	r5, #2
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f60:	4f9a      	ldr	r7, [pc, #616]	; (80051cc <_dtoa_r+0x60c>)
 8004f62:	1136      	asrs	r6, r6, #4
 8004f64:	2e00      	cmp	r6, #0
 8004f66:	f040 8083 	bne.w	8005070 <_dtoa_r+0x4b0>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e0      	bne.n	8004f30 <_dtoa_r+0x370>
 8004f6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 808a 	beq.w	800508a <_dtoa_r+0x4ca>
 8004f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f7a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f82:	2200      	movs	r2, #0
 8004f84:	4b92      	ldr	r3, [pc, #584]	; (80051d0 <_dtoa_r+0x610>)
 8004f86:	f7fb fd19 	bl	80009bc <__aeabi_dcmplt>
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	d07d      	beq.n	800508a <_dtoa_r+0x4ca>
 8004f8e:	f1b8 0f00 	cmp.w	r8, #0
 8004f92:	d07a      	beq.n	800508a <_dtoa_r+0x4ca>
 8004f94:	9b04      	ldr	r3, [sp, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	dd36      	ble.n	8005008 <_dtoa_r+0x448>
 8004f9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	4b8c      	ldr	r3, [pc, #560]	; (80051d4 <_dtoa_r+0x614>)
 8004fa2:	f7fb fa99 	bl	80004d8 <__aeabi_dmul>
 8004fa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004faa:	9e04      	ldr	r6, [sp, #16]
 8004fac:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004fb0:	3501      	adds	r5, #1
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	f7fb fa26 	bl	8000404 <__aeabi_i2d>
 8004fb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fbc:	f7fb fa8c 	bl	80004d8 <__aeabi_dmul>
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	4b85      	ldr	r3, [pc, #532]	; (80051d8 <_dtoa_r+0x618>)
 8004fc4:	f7fb f8d2 	bl	800016c <__adddf3>
 8004fc8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004fcc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004fd0:	950b      	str	r5, [sp, #44]	; 0x2c
 8004fd2:	2e00      	cmp	r6, #0
 8004fd4:	d15c      	bne.n	8005090 <_dtoa_r+0x4d0>
 8004fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	4b7f      	ldr	r3, [pc, #508]	; (80051dc <_dtoa_r+0x61c>)
 8004fde:	f7fb f8c3 	bl	8000168 <__aeabi_dsub>
 8004fe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fe4:	462b      	mov	r3, r5
 8004fe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fea:	f7fb fd05 	bl	80009f8 <__aeabi_dcmpgt>
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	f040 8281 	bne.w	80054f6 <_dtoa_r+0x936>
 8004ff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ffa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004ffe:	f7fb fcdd 	bl	80009bc <__aeabi_dcmplt>
 8005002:	2800      	cmp	r0, #0
 8005004:	f040 8275 	bne.w	80054f2 <_dtoa_r+0x932>
 8005008:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800500c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005010:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005012:	2b00      	cmp	r3, #0
 8005014:	f2c0 814b 	blt.w	80052ae <_dtoa_r+0x6ee>
 8005018:	f1ba 0f0e 	cmp.w	sl, #14
 800501c:	f300 8147 	bgt.w	80052ae <_dtoa_r+0x6ee>
 8005020:	4b69      	ldr	r3, [pc, #420]	; (80051c8 <_dtoa_r+0x608>)
 8005022:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800502e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005030:	2b00      	cmp	r3, #0
 8005032:	f280 80d7 	bge.w	80051e4 <_dtoa_r+0x624>
 8005036:	f1b8 0f00 	cmp.w	r8, #0
 800503a:	f300 80d3 	bgt.w	80051e4 <_dtoa_r+0x624>
 800503e:	f040 8257 	bne.w	80054f0 <_dtoa_r+0x930>
 8005042:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005046:	2200      	movs	r2, #0
 8005048:	4b64      	ldr	r3, [pc, #400]	; (80051dc <_dtoa_r+0x61c>)
 800504a:	f7fb fa45 	bl	80004d8 <__aeabi_dmul>
 800504e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005052:	f7fb fcc7 	bl	80009e4 <__aeabi_dcmpge>
 8005056:	4646      	mov	r6, r8
 8005058:	4647      	mov	r7, r8
 800505a:	2800      	cmp	r0, #0
 800505c:	f040 822d 	bne.w	80054ba <_dtoa_r+0x8fa>
 8005060:	9b06      	ldr	r3, [sp, #24]
 8005062:	9a06      	ldr	r2, [sp, #24]
 8005064:	1c5d      	adds	r5, r3, #1
 8005066:	2331      	movs	r3, #49	; 0x31
 8005068:	f10a 0a01 	add.w	sl, sl, #1
 800506c:	7013      	strb	r3, [r2, #0]
 800506e:	e228      	b.n	80054c2 <_dtoa_r+0x902>
 8005070:	07f2      	lsls	r2, r6, #31
 8005072:	d505      	bpl.n	8005080 <_dtoa_r+0x4c0>
 8005074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005078:	f7fb fa2e 	bl	80004d8 <__aeabi_dmul>
 800507c:	2301      	movs	r3, #1
 800507e:	3501      	adds	r5, #1
 8005080:	1076      	asrs	r6, r6, #1
 8005082:	3708      	adds	r7, #8
 8005084:	e76e      	b.n	8004f64 <_dtoa_r+0x3a4>
 8005086:	2502      	movs	r5, #2
 8005088:	e771      	b.n	8004f6e <_dtoa_r+0x3ae>
 800508a:	4657      	mov	r7, sl
 800508c:	4646      	mov	r6, r8
 800508e:	e790      	b.n	8004fb2 <_dtoa_r+0x3f2>
 8005090:	4b4d      	ldr	r3, [pc, #308]	; (80051c8 <_dtoa_r+0x608>)
 8005092:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005096:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800509a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800509c:	2b00      	cmp	r3, #0
 800509e:	d048      	beq.n	8005132 <_dtoa_r+0x572>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	2000      	movs	r0, #0
 80050a6:	494e      	ldr	r1, [pc, #312]	; (80051e0 <_dtoa_r+0x620>)
 80050a8:	f7fb fb40 	bl	800072c <__aeabi_ddiv>
 80050ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050b0:	f7fb f85a 	bl	8000168 <__aeabi_dsub>
 80050b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80050b8:	9d06      	ldr	r5, [sp, #24]
 80050ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050be:	f7fb fcbb 	bl	8000a38 <__aeabi_d2iz>
 80050c2:	9011      	str	r0, [sp, #68]	; 0x44
 80050c4:	f7fb f99e 	bl	8000404 <__aeabi_i2d>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050d0:	f7fb f84a 	bl	8000168 <__aeabi_dsub>
 80050d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050da:	3330      	adds	r3, #48	; 0x30
 80050dc:	f805 3b01 	strb.w	r3, [r5], #1
 80050e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050e4:	f7fb fc6a 	bl	80009bc <__aeabi_dcmplt>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d163      	bne.n	80051b4 <_dtoa_r+0x5f4>
 80050ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050f0:	2000      	movs	r0, #0
 80050f2:	4937      	ldr	r1, [pc, #220]	; (80051d0 <_dtoa_r+0x610>)
 80050f4:	f7fb f838 	bl	8000168 <__aeabi_dsub>
 80050f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050fc:	f7fb fc5e 	bl	80009bc <__aeabi_dcmplt>
 8005100:	2800      	cmp	r0, #0
 8005102:	f040 80b5 	bne.w	8005270 <_dtoa_r+0x6b0>
 8005106:	9b06      	ldr	r3, [sp, #24]
 8005108:	1aeb      	subs	r3, r5, r3
 800510a:	429e      	cmp	r6, r3
 800510c:	f77f af7c 	ble.w	8005008 <_dtoa_r+0x448>
 8005110:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005114:	2200      	movs	r2, #0
 8005116:	4b2f      	ldr	r3, [pc, #188]	; (80051d4 <_dtoa_r+0x614>)
 8005118:	f7fb f9de 	bl	80004d8 <__aeabi_dmul>
 800511c:	2200      	movs	r2, #0
 800511e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005126:	4b2b      	ldr	r3, [pc, #172]	; (80051d4 <_dtoa_r+0x614>)
 8005128:	f7fb f9d6 	bl	80004d8 <__aeabi_dmul>
 800512c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005130:	e7c3      	b.n	80050ba <_dtoa_r+0x4fa>
 8005132:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005136:	f7fb f9cf 	bl	80004d8 <__aeabi_dmul>
 800513a:	9b06      	ldr	r3, [sp, #24]
 800513c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005140:	199d      	adds	r5, r3, r6
 8005142:	461e      	mov	r6, r3
 8005144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005148:	f7fb fc76 	bl	8000a38 <__aeabi_d2iz>
 800514c:	9011      	str	r0, [sp, #68]	; 0x44
 800514e:	f7fb f959 	bl	8000404 <__aeabi_i2d>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800515a:	f7fb f805 	bl	8000168 <__aeabi_dsub>
 800515e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005164:	3330      	adds	r3, #48	; 0x30
 8005166:	f806 3b01 	strb.w	r3, [r6], #1
 800516a:	42ae      	cmp	r6, r5
 800516c:	f04f 0200 	mov.w	r2, #0
 8005170:	d124      	bne.n	80051bc <_dtoa_r+0x5fc>
 8005172:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005176:	4b1a      	ldr	r3, [pc, #104]	; (80051e0 <_dtoa_r+0x620>)
 8005178:	f7fa fff8 	bl	800016c <__adddf3>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005184:	f7fb fc38 	bl	80009f8 <__aeabi_dcmpgt>
 8005188:	2800      	cmp	r0, #0
 800518a:	d171      	bne.n	8005270 <_dtoa_r+0x6b0>
 800518c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005190:	2000      	movs	r0, #0
 8005192:	4913      	ldr	r1, [pc, #76]	; (80051e0 <_dtoa_r+0x620>)
 8005194:	f7fa ffe8 	bl	8000168 <__aeabi_dsub>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051a0:	f7fb fc0c 	bl	80009bc <__aeabi_dcmplt>
 80051a4:	2800      	cmp	r0, #0
 80051a6:	f43f af2f 	beq.w	8005008 <_dtoa_r+0x448>
 80051aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80051ae:	1e6a      	subs	r2, r5, #1
 80051b0:	2b30      	cmp	r3, #48	; 0x30
 80051b2:	d001      	beq.n	80051b8 <_dtoa_r+0x5f8>
 80051b4:	46ba      	mov	sl, r7
 80051b6:	e04a      	b.n	800524e <_dtoa_r+0x68e>
 80051b8:	4615      	mov	r5, r2
 80051ba:	e7f6      	b.n	80051aa <_dtoa_r+0x5ea>
 80051bc:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <_dtoa_r+0x614>)
 80051be:	f7fb f98b 	bl	80004d8 <__aeabi_dmul>
 80051c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051c6:	e7bd      	b.n	8005144 <_dtoa_r+0x584>
 80051c8:	08007348 	.word	0x08007348
 80051cc:	08007320 	.word	0x08007320
 80051d0:	3ff00000 	.word	0x3ff00000
 80051d4:	40240000 	.word	0x40240000
 80051d8:	401c0000 	.word	0x401c0000
 80051dc:	40140000 	.word	0x40140000
 80051e0:	3fe00000 	.word	0x3fe00000
 80051e4:	9d06      	ldr	r5, [sp, #24]
 80051e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80051ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051ee:	4630      	mov	r0, r6
 80051f0:	4639      	mov	r1, r7
 80051f2:	f7fb fa9b 	bl	800072c <__aeabi_ddiv>
 80051f6:	f7fb fc1f 	bl	8000a38 <__aeabi_d2iz>
 80051fa:	4681      	mov	r9, r0
 80051fc:	f7fb f902 	bl	8000404 <__aeabi_i2d>
 8005200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005204:	f7fb f968 	bl	80004d8 <__aeabi_dmul>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4630      	mov	r0, r6
 800520e:	4639      	mov	r1, r7
 8005210:	f7fa ffaa 	bl	8000168 <__aeabi_dsub>
 8005214:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005218:	f805 6b01 	strb.w	r6, [r5], #1
 800521c:	9e06      	ldr	r6, [sp, #24]
 800521e:	4602      	mov	r2, r0
 8005220:	1bae      	subs	r6, r5, r6
 8005222:	45b0      	cmp	r8, r6
 8005224:	460b      	mov	r3, r1
 8005226:	d135      	bne.n	8005294 <_dtoa_r+0x6d4>
 8005228:	f7fa ffa0 	bl	800016c <__adddf3>
 800522c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005230:	4606      	mov	r6, r0
 8005232:	460f      	mov	r7, r1
 8005234:	f7fb fbe0 	bl	80009f8 <__aeabi_dcmpgt>
 8005238:	b9c8      	cbnz	r0, 800526e <_dtoa_r+0x6ae>
 800523a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800523e:	4630      	mov	r0, r6
 8005240:	4639      	mov	r1, r7
 8005242:	f7fb fbb1 	bl	80009a8 <__aeabi_dcmpeq>
 8005246:	b110      	cbz	r0, 800524e <_dtoa_r+0x68e>
 8005248:	f019 0f01 	tst.w	r9, #1
 800524c:	d10f      	bne.n	800526e <_dtoa_r+0x6ae>
 800524e:	4659      	mov	r1, fp
 8005250:	4620      	mov	r0, r4
 8005252:	f000 fad7 	bl	8005804 <_Bfree>
 8005256:	2300      	movs	r3, #0
 8005258:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800525a:	702b      	strb	r3, [r5, #0]
 800525c:	f10a 0301 	add.w	r3, sl, #1
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005264:	2b00      	cmp	r3, #0
 8005266:	f43f acf3 	beq.w	8004c50 <_dtoa_r+0x90>
 800526a:	601d      	str	r5, [r3, #0]
 800526c:	e4f0      	b.n	8004c50 <_dtoa_r+0x90>
 800526e:	4657      	mov	r7, sl
 8005270:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005274:	1e6b      	subs	r3, r5, #1
 8005276:	2a39      	cmp	r2, #57	; 0x39
 8005278:	d106      	bne.n	8005288 <_dtoa_r+0x6c8>
 800527a:	9a06      	ldr	r2, [sp, #24]
 800527c:	429a      	cmp	r2, r3
 800527e:	d107      	bne.n	8005290 <_dtoa_r+0x6d0>
 8005280:	2330      	movs	r3, #48	; 0x30
 8005282:	7013      	strb	r3, [r2, #0]
 8005284:	4613      	mov	r3, r2
 8005286:	3701      	adds	r7, #1
 8005288:	781a      	ldrb	r2, [r3, #0]
 800528a:	3201      	adds	r2, #1
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	e791      	b.n	80051b4 <_dtoa_r+0x5f4>
 8005290:	461d      	mov	r5, r3
 8005292:	e7ed      	b.n	8005270 <_dtoa_r+0x6b0>
 8005294:	2200      	movs	r2, #0
 8005296:	4b99      	ldr	r3, [pc, #612]	; (80054fc <_dtoa_r+0x93c>)
 8005298:	f7fb f91e 	bl	80004d8 <__aeabi_dmul>
 800529c:	2200      	movs	r2, #0
 800529e:	2300      	movs	r3, #0
 80052a0:	4606      	mov	r6, r0
 80052a2:	460f      	mov	r7, r1
 80052a4:	f7fb fb80 	bl	80009a8 <__aeabi_dcmpeq>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d09e      	beq.n	80051ea <_dtoa_r+0x62a>
 80052ac:	e7cf      	b.n	800524e <_dtoa_r+0x68e>
 80052ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052b0:	2a00      	cmp	r2, #0
 80052b2:	f000 8088 	beq.w	80053c6 <_dtoa_r+0x806>
 80052b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80052b8:	2a01      	cmp	r2, #1
 80052ba:	dc6d      	bgt.n	8005398 <_dtoa_r+0x7d8>
 80052bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052be:	2a00      	cmp	r2, #0
 80052c0:	d066      	beq.n	8005390 <_dtoa_r+0x7d0>
 80052c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80052c6:	464d      	mov	r5, r9
 80052c8:	9e08      	ldr	r6, [sp, #32]
 80052ca:	9a07      	ldr	r2, [sp, #28]
 80052cc:	2101      	movs	r1, #1
 80052ce:	441a      	add	r2, r3
 80052d0:	4620      	mov	r0, r4
 80052d2:	4499      	add	r9, r3
 80052d4:	9207      	str	r2, [sp, #28]
 80052d6:	f000 fb35 	bl	8005944 <__i2b>
 80052da:	4607      	mov	r7, r0
 80052dc:	2d00      	cmp	r5, #0
 80052de:	dd0b      	ble.n	80052f8 <_dtoa_r+0x738>
 80052e0:	9b07      	ldr	r3, [sp, #28]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	dd08      	ble.n	80052f8 <_dtoa_r+0x738>
 80052e6:	42ab      	cmp	r3, r5
 80052e8:	bfa8      	it	ge
 80052ea:	462b      	movge	r3, r5
 80052ec:	9a07      	ldr	r2, [sp, #28]
 80052ee:	eba9 0903 	sub.w	r9, r9, r3
 80052f2:	1aed      	subs	r5, r5, r3
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	9307      	str	r3, [sp, #28]
 80052f8:	9b08      	ldr	r3, [sp, #32]
 80052fa:	b1eb      	cbz	r3, 8005338 <_dtoa_r+0x778>
 80052fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d065      	beq.n	80053ce <_dtoa_r+0x80e>
 8005302:	b18e      	cbz	r6, 8005328 <_dtoa_r+0x768>
 8005304:	4639      	mov	r1, r7
 8005306:	4632      	mov	r2, r6
 8005308:	4620      	mov	r0, r4
 800530a:	f000 fbb9 	bl	8005a80 <__pow5mult>
 800530e:	465a      	mov	r2, fp
 8005310:	4601      	mov	r1, r0
 8005312:	4607      	mov	r7, r0
 8005314:	4620      	mov	r0, r4
 8005316:	f000 fb1e 	bl	8005956 <__multiply>
 800531a:	4659      	mov	r1, fp
 800531c:	900a      	str	r0, [sp, #40]	; 0x28
 800531e:	4620      	mov	r0, r4
 8005320:	f000 fa70 	bl	8005804 <_Bfree>
 8005324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005326:	469b      	mov	fp, r3
 8005328:	9b08      	ldr	r3, [sp, #32]
 800532a:	1b9a      	subs	r2, r3, r6
 800532c:	d004      	beq.n	8005338 <_dtoa_r+0x778>
 800532e:	4659      	mov	r1, fp
 8005330:	4620      	mov	r0, r4
 8005332:	f000 fba5 	bl	8005a80 <__pow5mult>
 8005336:	4683      	mov	fp, r0
 8005338:	2101      	movs	r1, #1
 800533a:	4620      	mov	r0, r4
 800533c:	f000 fb02 	bl	8005944 <__i2b>
 8005340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005342:	4606      	mov	r6, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 81c6 	beq.w	80056d6 <_dtoa_r+0xb16>
 800534a:	461a      	mov	r2, r3
 800534c:	4601      	mov	r1, r0
 800534e:	4620      	mov	r0, r4
 8005350:	f000 fb96 	bl	8005a80 <__pow5mult>
 8005354:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005356:	4606      	mov	r6, r0
 8005358:	2b01      	cmp	r3, #1
 800535a:	dc3e      	bgt.n	80053da <_dtoa_r+0x81a>
 800535c:	9b02      	ldr	r3, [sp, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d137      	bne.n	80053d2 <_dtoa_r+0x812>
 8005362:	9b03      	ldr	r3, [sp, #12]
 8005364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005368:	2b00      	cmp	r3, #0
 800536a:	d134      	bne.n	80053d6 <_dtoa_r+0x816>
 800536c:	9b03      	ldr	r3, [sp, #12]
 800536e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005372:	0d1b      	lsrs	r3, r3, #20
 8005374:	051b      	lsls	r3, r3, #20
 8005376:	b12b      	cbz	r3, 8005384 <_dtoa_r+0x7c4>
 8005378:	9b07      	ldr	r3, [sp, #28]
 800537a:	f109 0901 	add.w	r9, r9, #1
 800537e:	3301      	adds	r3, #1
 8005380:	9307      	str	r3, [sp, #28]
 8005382:	2301      	movs	r3, #1
 8005384:	9308      	str	r3, [sp, #32]
 8005386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005388:	2b00      	cmp	r3, #0
 800538a:	d128      	bne.n	80053de <_dtoa_r+0x81e>
 800538c:	2001      	movs	r0, #1
 800538e:	e02e      	b.n	80053ee <_dtoa_r+0x82e>
 8005390:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005392:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005396:	e796      	b.n	80052c6 <_dtoa_r+0x706>
 8005398:	9b08      	ldr	r3, [sp, #32]
 800539a:	f108 36ff 	add.w	r6, r8, #4294967295
 800539e:	42b3      	cmp	r3, r6
 80053a0:	bfb7      	itett	lt
 80053a2:	9b08      	ldrlt	r3, [sp, #32]
 80053a4:	1b9e      	subge	r6, r3, r6
 80053a6:	1af2      	sublt	r2, r6, r3
 80053a8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80053aa:	bfbf      	itttt	lt
 80053ac:	9608      	strlt	r6, [sp, #32]
 80053ae:	189b      	addlt	r3, r3, r2
 80053b0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80053b2:	2600      	movlt	r6, #0
 80053b4:	f1b8 0f00 	cmp.w	r8, #0
 80053b8:	bfb9      	ittee	lt
 80053ba:	eba9 0508 	sublt.w	r5, r9, r8
 80053be:	2300      	movlt	r3, #0
 80053c0:	464d      	movge	r5, r9
 80053c2:	4643      	movge	r3, r8
 80053c4:	e781      	b.n	80052ca <_dtoa_r+0x70a>
 80053c6:	9e08      	ldr	r6, [sp, #32]
 80053c8:	464d      	mov	r5, r9
 80053ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80053cc:	e786      	b.n	80052dc <_dtoa_r+0x71c>
 80053ce:	9a08      	ldr	r2, [sp, #32]
 80053d0:	e7ad      	b.n	800532e <_dtoa_r+0x76e>
 80053d2:	2300      	movs	r3, #0
 80053d4:	e7d6      	b.n	8005384 <_dtoa_r+0x7c4>
 80053d6:	9b02      	ldr	r3, [sp, #8]
 80053d8:	e7d4      	b.n	8005384 <_dtoa_r+0x7c4>
 80053da:	2300      	movs	r3, #0
 80053dc:	9308      	str	r3, [sp, #32]
 80053de:	6933      	ldr	r3, [r6, #16]
 80053e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80053e4:	6918      	ldr	r0, [r3, #16]
 80053e6:	f000 fa5f 	bl	80058a8 <__hi0bits>
 80053ea:	f1c0 0020 	rsb	r0, r0, #32
 80053ee:	9b07      	ldr	r3, [sp, #28]
 80053f0:	4418      	add	r0, r3
 80053f2:	f010 001f 	ands.w	r0, r0, #31
 80053f6:	d047      	beq.n	8005488 <_dtoa_r+0x8c8>
 80053f8:	f1c0 0320 	rsb	r3, r0, #32
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	dd3b      	ble.n	8005478 <_dtoa_r+0x8b8>
 8005400:	9b07      	ldr	r3, [sp, #28]
 8005402:	f1c0 001c 	rsb	r0, r0, #28
 8005406:	4481      	add	r9, r0
 8005408:	4405      	add	r5, r0
 800540a:	4403      	add	r3, r0
 800540c:	9307      	str	r3, [sp, #28]
 800540e:	f1b9 0f00 	cmp.w	r9, #0
 8005412:	dd05      	ble.n	8005420 <_dtoa_r+0x860>
 8005414:	4659      	mov	r1, fp
 8005416:	464a      	mov	r2, r9
 8005418:	4620      	mov	r0, r4
 800541a:	f000 fb7f 	bl	8005b1c <__lshift>
 800541e:	4683      	mov	fp, r0
 8005420:	9b07      	ldr	r3, [sp, #28]
 8005422:	2b00      	cmp	r3, #0
 8005424:	dd05      	ble.n	8005432 <_dtoa_r+0x872>
 8005426:	4631      	mov	r1, r6
 8005428:	461a      	mov	r2, r3
 800542a:	4620      	mov	r0, r4
 800542c:	f000 fb76 	bl	8005b1c <__lshift>
 8005430:	4606      	mov	r6, r0
 8005432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005434:	b353      	cbz	r3, 800548c <_dtoa_r+0x8cc>
 8005436:	4631      	mov	r1, r6
 8005438:	4658      	mov	r0, fp
 800543a:	f000 fbc3 	bl	8005bc4 <__mcmp>
 800543e:	2800      	cmp	r0, #0
 8005440:	da24      	bge.n	800548c <_dtoa_r+0x8cc>
 8005442:	2300      	movs	r3, #0
 8005444:	4659      	mov	r1, fp
 8005446:	220a      	movs	r2, #10
 8005448:	4620      	mov	r0, r4
 800544a:	f000 f9f2 	bl	8005832 <__multadd>
 800544e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005450:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005454:	4683      	mov	fp, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 8144 	beq.w	80056e4 <_dtoa_r+0xb24>
 800545c:	2300      	movs	r3, #0
 800545e:	4639      	mov	r1, r7
 8005460:	220a      	movs	r2, #10
 8005462:	4620      	mov	r0, r4
 8005464:	f000 f9e5 	bl	8005832 <__multadd>
 8005468:	9b04      	ldr	r3, [sp, #16]
 800546a:	4607      	mov	r7, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	dc4d      	bgt.n	800550c <_dtoa_r+0x94c>
 8005470:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005472:	2b02      	cmp	r3, #2
 8005474:	dd4a      	ble.n	800550c <_dtoa_r+0x94c>
 8005476:	e011      	b.n	800549c <_dtoa_r+0x8dc>
 8005478:	d0c9      	beq.n	800540e <_dtoa_r+0x84e>
 800547a:	9a07      	ldr	r2, [sp, #28]
 800547c:	331c      	adds	r3, #28
 800547e:	441a      	add	r2, r3
 8005480:	4499      	add	r9, r3
 8005482:	441d      	add	r5, r3
 8005484:	4613      	mov	r3, r2
 8005486:	e7c1      	b.n	800540c <_dtoa_r+0x84c>
 8005488:	4603      	mov	r3, r0
 800548a:	e7f6      	b.n	800547a <_dtoa_r+0x8ba>
 800548c:	f1b8 0f00 	cmp.w	r8, #0
 8005490:	dc36      	bgt.n	8005500 <_dtoa_r+0x940>
 8005492:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005494:	2b02      	cmp	r3, #2
 8005496:	dd33      	ble.n	8005500 <_dtoa_r+0x940>
 8005498:	f8cd 8010 	str.w	r8, [sp, #16]
 800549c:	9b04      	ldr	r3, [sp, #16]
 800549e:	b963      	cbnz	r3, 80054ba <_dtoa_r+0x8fa>
 80054a0:	4631      	mov	r1, r6
 80054a2:	2205      	movs	r2, #5
 80054a4:	4620      	mov	r0, r4
 80054a6:	f000 f9c4 	bl	8005832 <__multadd>
 80054aa:	4601      	mov	r1, r0
 80054ac:	4606      	mov	r6, r0
 80054ae:	4658      	mov	r0, fp
 80054b0:	f000 fb88 	bl	8005bc4 <__mcmp>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	f73f add3 	bgt.w	8005060 <_dtoa_r+0x4a0>
 80054ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80054bc:	9d06      	ldr	r5, [sp, #24]
 80054be:	ea6f 0a03 	mvn.w	sl, r3
 80054c2:	f04f 0900 	mov.w	r9, #0
 80054c6:	4631      	mov	r1, r6
 80054c8:	4620      	mov	r0, r4
 80054ca:	f000 f99b 	bl	8005804 <_Bfree>
 80054ce:	2f00      	cmp	r7, #0
 80054d0:	f43f aebd 	beq.w	800524e <_dtoa_r+0x68e>
 80054d4:	f1b9 0f00 	cmp.w	r9, #0
 80054d8:	d005      	beq.n	80054e6 <_dtoa_r+0x926>
 80054da:	45b9      	cmp	r9, r7
 80054dc:	d003      	beq.n	80054e6 <_dtoa_r+0x926>
 80054de:	4649      	mov	r1, r9
 80054e0:	4620      	mov	r0, r4
 80054e2:	f000 f98f 	bl	8005804 <_Bfree>
 80054e6:	4639      	mov	r1, r7
 80054e8:	4620      	mov	r0, r4
 80054ea:	f000 f98b 	bl	8005804 <_Bfree>
 80054ee:	e6ae      	b.n	800524e <_dtoa_r+0x68e>
 80054f0:	2600      	movs	r6, #0
 80054f2:	4637      	mov	r7, r6
 80054f4:	e7e1      	b.n	80054ba <_dtoa_r+0x8fa>
 80054f6:	46ba      	mov	sl, r7
 80054f8:	4637      	mov	r7, r6
 80054fa:	e5b1      	b.n	8005060 <_dtoa_r+0x4a0>
 80054fc:	40240000 	.word	0x40240000
 8005500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005502:	f8cd 8010 	str.w	r8, [sp, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 80f3 	beq.w	80056f2 <_dtoa_r+0xb32>
 800550c:	2d00      	cmp	r5, #0
 800550e:	dd05      	ble.n	800551c <_dtoa_r+0x95c>
 8005510:	4639      	mov	r1, r7
 8005512:	462a      	mov	r2, r5
 8005514:	4620      	mov	r0, r4
 8005516:	f000 fb01 	bl	8005b1c <__lshift>
 800551a:	4607      	mov	r7, r0
 800551c:	9b08      	ldr	r3, [sp, #32]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d04c      	beq.n	80055bc <_dtoa_r+0x9fc>
 8005522:	6879      	ldr	r1, [r7, #4]
 8005524:	4620      	mov	r0, r4
 8005526:	f000 f939 	bl	800579c <_Balloc>
 800552a:	4605      	mov	r5, r0
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	f107 010c 	add.w	r1, r7, #12
 8005532:	3202      	adds	r2, #2
 8005534:	0092      	lsls	r2, r2, #2
 8005536:	300c      	adds	r0, #12
 8005538:	f7fe fd16 	bl	8003f68 <memcpy>
 800553c:	2201      	movs	r2, #1
 800553e:	4629      	mov	r1, r5
 8005540:	4620      	mov	r0, r4
 8005542:	f000 faeb 	bl	8005b1c <__lshift>
 8005546:	46b9      	mov	r9, r7
 8005548:	4607      	mov	r7, r0
 800554a:	9b06      	ldr	r3, [sp, #24]
 800554c:	9307      	str	r3, [sp, #28]
 800554e:	9b02      	ldr	r3, [sp, #8]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	9308      	str	r3, [sp, #32]
 8005556:	4631      	mov	r1, r6
 8005558:	4658      	mov	r0, fp
 800555a:	f7ff faa1 	bl	8004aa0 <quorem>
 800555e:	4649      	mov	r1, r9
 8005560:	4605      	mov	r5, r0
 8005562:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005566:	4658      	mov	r0, fp
 8005568:	f000 fb2c 	bl	8005bc4 <__mcmp>
 800556c:	463a      	mov	r2, r7
 800556e:	9002      	str	r0, [sp, #8]
 8005570:	4631      	mov	r1, r6
 8005572:	4620      	mov	r0, r4
 8005574:	f000 fb40 	bl	8005bf8 <__mdiff>
 8005578:	68c3      	ldr	r3, [r0, #12]
 800557a:	4602      	mov	r2, r0
 800557c:	bb03      	cbnz	r3, 80055c0 <_dtoa_r+0xa00>
 800557e:	4601      	mov	r1, r0
 8005580:	9009      	str	r0, [sp, #36]	; 0x24
 8005582:	4658      	mov	r0, fp
 8005584:	f000 fb1e 	bl	8005bc4 <__mcmp>
 8005588:	4603      	mov	r3, r0
 800558a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800558c:	4611      	mov	r1, r2
 800558e:	4620      	mov	r0, r4
 8005590:	9309      	str	r3, [sp, #36]	; 0x24
 8005592:	f000 f937 	bl	8005804 <_Bfree>
 8005596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005598:	b9a3      	cbnz	r3, 80055c4 <_dtoa_r+0xa04>
 800559a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800559c:	b992      	cbnz	r2, 80055c4 <_dtoa_r+0xa04>
 800559e:	9a08      	ldr	r2, [sp, #32]
 80055a0:	b982      	cbnz	r2, 80055c4 <_dtoa_r+0xa04>
 80055a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80055a6:	d029      	beq.n	80055fc <_dtoa_r+0xa3c>
 80055a8:	9b02      	ldr	r3, [sp, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	dd01      	ble.n	80055b2 <_dtoa_r+0x9f2>
 80055ae:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80055b2:	9b07      	ldr	r3, [sp, #28]
 80055b4:	1c5d      	adds	r5, r3, #1
 80055b6:	f883 8000 	strb.w	r8, [r3]
 80055ba:	e784      	b.n	80054c6 <_dtoa_r+0x906>
 80055bc:	4638      	mov	r0, r7
 80055be:	e7c2      	b.n	8005546 <_dtoa_r+0x986>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e7e3      	b.n	800558c <_dtoa_r+0x9cc>
 80055c4:	9a02      	ldr	r2, [sp, #8]
 80055c6:	2a00      	cmp	r2, #0
 80055c8:	db04      	blt.n	80055d4 <_dtoa_r+0xa14>
 80055ca:	d123      	bne.n	8005614 <_dtoa_r+0xa54>
 80055cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80055ce:	bb0a      	cbnz	r2, 8005614 <_dtoa_r+0xa54>
 80055d0:	9a08      	ldr	r2, [sp, #32]
 80055d2:	b9fa      	cbnz	r2, 8005614 <_dtoa_r+0xa54>
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	ddec      	ble.n	80055b2 <_dtoa_r+0x9f2>
 80055d8:	4659      	mov	r1, fp
 80055da:	2201      	movs	r2, #1
 80055dc:	4620      	mov	r0, r4
 80055de:	f000 fa9d 	bl	8005b1c <__lshift>
 80055e2:	4631      	mov	r1, r6
 80055e4:	4683      	mov	fp, r0
 80055e6:	f000 faed 	bl	8005bc4 <__mcmp>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	dc03      	bgt.n	80055f6 <_dtoa_r+0xa36>
 80055ee:	d1e0      	bne.n	80055b2 <_dtoa_r+0x9f2>
 80055f0:	f018 0f01 	tst.w	r8, #1
 80055f4:	d0dd      	beq.n	80055b2 <_dtoa_r+0x9f2>
 80055f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80055fa:	d1d8      	bne.n	80055ae <_dtoa_r+0x9ee>
 80055fc:	9b07      	ldr	r3, [sp, #28]
 80055fe:	9a07      	ldr	r2, [sp, #28]
 8005600:	1c5d      	adds	r5, r3, #1
 8005602:	2339      	movs	r3, #57	; 0x39
 8005604:	7013      	strb	r3, [r2, #0]
 8005606:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800560a:	1e6a      	subs	r2, r5, #1
 800560c:	2b39      	cmp	r3, #57	; 0x39
 800560e:	d04d      	beq.n	80056ac <_dtoa_r+0xaec>
 8005610:	3301      	adds	r3, #1
 8005612:	e052      	b.n	80056ba <_dtoa_r+0xafa>
 8005614:	9a07      	ldr	r2, [sp, #28]
 8005616:	2b00      	cmp	r3, #0
 8005618:	f102 0501 	add.w	r5, r2, #1
 800561c:	dd06      	ble.n	800562c <_dtoa_r+0xa6c>
 800561e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005622:	d0eb      	beq.n	80055fc <_dtoa_r+0xa3c>
 8005624:	f108 0801 	add.w	r8, r8, #1
 8005628:	9b07      	ldr	r3, [sp, #28]
 800562a:	e7c4      	b.n	80055b6 <_dtoa_r+0x9f6>
 800562c:	9b06      	ldr	r3, [sp, #24]
 800562e:	9a04      	ldr	r2, [sp, #16]
 8005630:	1aeb      	subs	r3, r5, r3
 8005632:	4293      	cmp	r3, r2
 8005634:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005638:	d021      	beq.n	800567e <_dtoa_r+0xabe>
 800563a:	4659      	mov	r1, fp
 800563c:	2300      	movs	r3, #0
 800563e:	220a      	movs	r2, #10
 8005640:	4620      	mov	r0, r4
 8005642:	f000 f8f6 	bl	8005832 <__multadd>
 8005646:	45b9      	cmp	r9, r7
 8005648:	4683      	mov	fp, r0
 800564a:	f04f 0300 	mov.w	r3, #0
 800564e:	f04f 020a 	mov.w	r2, #10
 8005652:	4649      	mov	r1, r9
 8005654:	4620      	mov	r0, r4
 8005656:	d105      	bne.n	8005664 <_dtoa_r+0xaa4>
 8005658:	f000 f8eb 	bl	8005832 <__multadd>
 800565c:	4681      	mov	r9, r0
 800565e:	4607      	mov	r7, r0
 8005660:	9507      	str	r5, [sp, #28]
 8005662:	e778      	b.n	8005556 <_dtoa_r+0x996>
 8005664:	f000 f8e5 	bl	8005832 <__multadd>
 8005668:	4639      	mov	r1, r7
 800566a:	4681      	mov	r9, r0
 800566c:	2300      	movs	r3, #0
 800566e:	220a      	movs	r2, #10
 8005670:	4620      	mov	r0, r4
 8005672:	f000 f8de 	bl	8005832 <__multadd>
 8005676:	4607      	mov	r7, r0
 8005678:	e7f2      	b.n	8005660 <_dtoa_r+0xaa0>
 800567a:	f04f 0900 	mov.w	r9, #0
 800567e:	4659      	mov	r1, fp
 8005680:	2201      	movs	r2, #1
 8005682:	4620      	mov	r0, r4
 8005684:	f000 fa4a 	bl	8005b1c <__lshift>
 8005688:	4631      	mov	r1, r6
 800568a:	4683      	mov	fp, r0
 800568c:	f000 fa9a 	bl	8005bc4 <__mcmp>
 8005690:	2800      	cmp	r0, #0
 8005692:	dcb8      	bgt.n	8005606 <_dtoa_r+0xa46>
 8005694:	d102      	bne.n	800569c <_dtoa_r+0xadc>
 8005696:	f018 0f01 	tst.w	r8, #1
 800569a:	d1b4      	bne.n	8005606 <_dtoa_r+0xa46>
 800569c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80056a0:	1e6a      	subs	r2, r5, #1
 80056a2:	2b30      	cmp	r3, #48	; 0x30
 80056a4:	f47f af0f 	bne.w	80054c6 <_dtoa_r+0x906>
 80056a8:	4615      	mov	r5, r2
 80056aa:	e7f7      	b.n	800569c <_dtoa_r+0xadc>
 80056ac:	9b06      	ldr	r3, [sp, #24]
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d105      	bne.n	80056be <_dtoa_r+0xafe>
 80056b2:	2331      	movs	r3, #49	; 0x31
 80056b4:	9a06      	ldr	r2, [sp, #24]
 80056b6:	f10a 0a01 	add.w	sl, sl, #1
 80056ba:	7013      	strb	r3, [r2, #0]
 80056bc:	e703      	b.n	80054c6 <_dtoa_r+0x906>
 80056be:	4615      	mov	r5, r2
 80056c0:	e7a1      	b.n	8005606 <_dtoa_r+0xa46>
 80056c2:	4b17      	ldr	r3, [pc, #92]	; (8005720 <_dtoa_r+0xb60>)
 80056c4:	f7ff bae1 	b.w	8004c8a <_dtoa_r+0xca>
 80056c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f47f aabb 	bne.w	8004c46 <_dtoa_r+0x86>
 80056d0:	4b14      	ldr	r3, [pc, #80]	; (8005724 <_dtoa_r+0xb64>)
 80056d2:	f7ff bada 	b.w	8004c8a <_dtoa_r+0xca>
 80056d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80056d8:	2b01      	cmp	r3, #1
 80056da:	f77f ae3f 	ble.w	800535c <_dtoa_r+0x79c>
 80056de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056e0:	9308      	str	r3, [sp, #32]
 80056e2:	e653      	b.n	800538c <_dtoa_r+0x7cc>
 80056e4:	9b04      	ldr	r3, [sp, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	dc03      	bgt.n	80056f2 <_dtoa_r+0xb32>
 80056ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	f73f aed5 	bgt.w	800549c <_dtoa_r+0x8dc>
 80056f2:	9d06      	ldr	r5, [sp, #24]
 80056f4:	4631      	mov	r1, r6
 80056f6:	4658      	mov	r0, fp
 80056f8:	f7ff f9d2 	bl	8004aa0 <quorem>
 80056fc:	9b06      	ldr	r3, [sp, #24]
 80056fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005702:	f805 8b01 	strb.w	r8, [r5], #1
 8005706:	9a04      	ldr	r2, [sp, #16]
 8005708:	1aeb      	subs	r3, r5, r3
 800570a:	429a      	cmp	r2, r3
 800570c:	ddb5      	ble.n	800567a <_dtoa_r+0xaba>
 800570e:	4659      	mov	r1, fp
 8005710:	2300      	movs	r3, #0
 8005712:	220a      	movs	r2, #10
 8005714:	4620      	mov	r0, r4
 8005716:	f000 f88c 	bl	8005832 <__multadd>
 800571a:	4683      	mov	fp, r0
 800571c:	e7ea      	b.n	80056f4 <_dtoa_r+0xb34>
 800571e:	bf00      	nop
 8005720:	080072e4 	.word	0x080072e4
 8005724:	08007308 	.word	0x08007308

08005728 <__locale_ctype_ptr_l>:
 8005728:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800572c:	4770      	bx	lr
	...

08005730 <_localeconv_r>:
 8005730:	4b04      	ldr	r3, [pc, #16]	; (8005744 <_localeconv_r+0x14>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6a18      	ldr	r0, [r3, #32]
 8005736:	4b04      	ldr	r3, [pc, #16]	; (8005748 <_localeconv_r+0x18>)
 8005738:	2800      	cmp	r0, #0
 800573a:	bf08      	it	eq
 800573c:	4618      	moveq	r0, r3
 800573e:	30f0      	adds	r0, #240	; 0xf0
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	20000018 	.word	0x20000018
 8005748:	2000007c 	.word	0x2000007c

0800574c <malloc>:
 800574c:	4b02      	ldr	r3, [pc, #8]	; (8005758 <malloc+0xc>)
 800574e:	4601      	mov	r1, r0
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	f000 bb59 	b.w	8005e08 <_malloc_r>
 8005756:	bf00      	nop
 8005758:	20000018 	.word	0x20000018

0800575c <__ascii_mbtowc>:
 800575c:	b082      	sub	sp, #8
 800575e:	b901      	cbnz	r1, 8005762 <__ascii_mbtowc+0x6>
 8005760:	a901      	add	r1, sp, #4
 8005762:	b142      	cbz	r2, 8005776 <__ascii_mbtowc+0x1a>
 8005764:	b14b      	cbz	r3, 800577a <__ascii_mbtowc+0x1e>
 8005766:	7813      	ldrb	r3, [r2, #0]
 8005768:	600b      	str	r3, [r1, #0]
 800576a:	7812      	ldrb	r2, [r2, #0]
 800576c:	1c10      	adds	r0, r2, #0
 800576e:	bf18      	it	ne
 8005770:	2001      	movne	r0, #1
 8005772:	b002      	add	sp, #8
 8005774:	4770      	bx	lr
 8005776:	4610      	mov	r0, r2
 8005778:	e7fb      	b.n	8005772 <__ascii_mbtowc+0x16>
 800577a:	f06f 0001 	mvn.w	r0, #1
 800577e:	e7f8      	b.n	8005772 <__ascii_mbtowc+0x16>

08005780 <memchr>:
 8005780:	b510      	push	{r4, lr}
 8005782:	b2c9      	uxtb	r1, r1
 8005784:	4402      	add	r2, r0
 8005786:	4290      	cmp	r0, r2
 8005788:	4603      	mov	r3, r0
 800578a:	d101      	bne.n	8005790 <memchr+0x10>
 800578c:	2300      	movs	r3, #0
 800578e:	e003      	b.n	8005798 <memchr+0x18>
 8005790:	781c      	ldrb	r4, [r3, #0]
 8005792:	3001      	adds	r0, #1
 8005794:	428c      	cmp	r4, r1
 8005796:	d1f6      	bne.n	8005786 <memchr+0x6>
 8005798:	4618      	mov	r0, r3
 800579a:	bd10      	pop	{r4, pc}

0800579c <_Balloc>:
 800579c:	b570      	push	{r4, r5, r6, lr}
 800579e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80057a0:	4604      	mov	r4, r0
 80057a2:	460e      	mov	r6, r1
 80057a4:	b93d      	cbnz	r5, 80057b6 <_Balloc+0x1a>
 80057a6:	2010      	movs	r0, #16
 80057a8:	f7ff ffd0 	bl	800574c <malloc>
 80057ac:	6260      	str	r0, [r4, #36]	; 0x24
 80057ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80057b2:	6005      	str	r5, [r0, #0]
 80057b4:	60c5      	str	r5, [r0, #12]
 80057b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80057b8:	68eb      	ldr	r3, [r5, #12]
 80057ba:	b183      	cbz	r3, 80057de <_Balloc+0x42>
 80057bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80057c4:	b9b8      	cbnz	r0, 80057f6 <_Balloc+0x5a>
 80057c6:	2101      	movs	r1, #1
 80057c8:	fa01 f506 	lsl.w	r5, r1, r6
 80057cc:	1d6a      	adds	r2, r5, #5
 80057ce:	0092      	lsls	r2, r2, #2
 80057d0:	4620      	mov	r0, r4
 80057d2:	f000 fabe 	bl	8005d52 <_calloc_r>
 80057d6:	b160      	cbz	r0, 80057f2 <_Balloc+0x56>
 80057d8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80057dc:	e00e      	b.n	80057fc <_Balloc+0x60>
 80057de:	2221      	movs	r2, #33	; 0x21
 80057e0:	2104      	movs	r1, #4
 80057e2:	4620      	mov	r0, r4
 80057e4:	f000 fab5 	bl	8005d52 <_calloc_r>
 80057e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057ea:	60e8      	str	r0, [r5, #12]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1e4      	bne.n	80057bc <_Balloc+0x20>
 80057f2:	2000      	movs	r0, #0
 80057f4:	bd70      	pop	{r4, r5, r6, pc}
 80057f6:	6802      	ldr	r2, [r0, #0]
 80057f8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80057fc:	2300      	movs	r3, #0
 80057fe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005802:	e7f7      	b.n	80057f4 <_Balloc+0x58>

08005804 <_Bfree>:
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005808:	4606      	mov	r6, r0
 800580a:	460d      	mov	r5, r1
 800580c:	b93c      	cbnz	r4, 800581e <_Bfree+0x1a>
 800580e:	2010      	movs	r0, #16
 8005810:	f7ff ff9c 	bl	800574c <malloc>
 8005814:	6270      	str	r0, [r6, #36]	; 0x24
 8005816:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800581a:	6004      	str	r4, [r0, #0]
 800581c:	60c4      	str	r4, [r0, #12]
 800581e:	b13d      	cbz	r5, 8005830 <_Bfree+0x2c>
 8005820:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005822:	686a      	ldr	r2, [r5, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800582a:	6029      	str	r1, [r5, #0]
 800582c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005830:	bd70      	pop	{r4, r5, r6, pc}

08005832 <__multadd>:
 8005832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005836:	461f      	mov	r7, r3
 8005838:	4606      	mov	r6, r0
 800583a:	460c      	mov	r4, r1
 800583c:	2300      	movs	r3, #0
 800583e:	690d      	ldr	r5, [r1, #16]
 8005840:	f101 0c14 	add.w	ip, r1, #20
 8005844:	f8dc 0000 	ldr.w	r0, [ip]
 8005848:	3301      	adds	r3, #1
 800584a:	b281      	uxth	r1, r0
 800584c:	fb02 7101 	mla	r1, r2, r1, r7
 8005850:	0c00      	lsrs	r0, r0, #16
 8005852:	0c0f      	lsrs	r7, r1, #16
 8005854:	fb02 7000 	mla	r0, r2, r0, r7
 8005858:	b289      	uxth	r1, r1
 800585a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800585e:	429d      	cmp	r5, r3
 8005860:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005864:	f84c 1b04 	str.w	r1, [ip], #4
 8005868:	dcec      	bgt.n	8005844 <__multadd+0x12>
 800586a:	b1d7      	cbz	r7, 80058a2 <__multadd+0x70>
 800586c:	68a3      	ldr	r3, [r4, #8]
 800586e:	42ab      	cmp	r3, r5
 8005870:	dc12      	bgt.n	8005898 <__multadd+0x66>
 8005872:	6861      	ldr	r1, [r4, #4]
 8005874:	4630      	mov	r0, r6
 8005876:	3101      	adds	r1, #1
 8005878:	f7ff ff90 	bl	800579c <_Balloc>
 800587c:	4680      	mov	r8, r0
 800587e:	6922      	ldr	r2, [r4, #16]
 8005880:	f104 010c 	add.w	r1, r4, #12
 8005884:	3202      	adds	r2, #2
 8005886:	0092      	lsls	r2, r2, #2
 8005888:	300c      	adds	r0, #12
 800588a:	f7fe fb6d 	bl	8003f68 <memcpy>
 800588e:	4621      	mov	r1, r4
 8005890:	4630      	mov	r0, r6
 8005892:	f7ff ffb7 	bl	8005804 <_Bfree>
 8005896:	4644      	mov	r4, r8
 8005898:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800589c:	3501      	adds	r5, #1
 800589e:	615f      	str	r7, [r3, #20]
 80058a0:	6125      	str	r5, [r4, #16]
 80058a2:	4620      	mov	r0, r4
 80058a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080058a8 <__hi0bits>:
 80058a8:	0c02      	lsrs	r2, r0, #16
 80058aa:	0412      	lsls	r2, r2, #16
 80058ac:	4603      	mov	r3, r0
 80058ae:	b9b2      	cbnz	r2, 80058de <__hi0bits+0x36>
 80058b0:	0403      	lsls	r3, r0, #16
 80058b2:	2010      	movs	r0, #16
 80058b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80058b8:	bf04      	itt	eq
 80058ba:	021b      	lsleq	r3, r3, #8
 80058bc:	3008      	addeq	r0, #8
 80058be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80058c2:	bf04      	itt	eq
 80058c4:	011b      	lsleq	r3, r3, #4
 80058c6:	3004      	addeq	r0, #4
 80058c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80058cc:	bf04      	itt	eq
 80058ce:	009b      	lsleq	r3, r3, #2
 80058d0:	3002      	addeq	r0, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	db06      	blt.n	80058e4 <__hi0bits+0x3c>
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	d503      	bpl.n	80058e2 <__hi0bits+0x3a>
 80058da:	3001      	adds	r0, #1
 80058dc:	4770      	bx	lr
 80058de:	2000      	movs	r0, #0
 80058e0:	e7e8      	b.n	80058b4 <__hi0bits+0xc>
 80058e2:	2020      	movs	r0, #32
 80058e4:	4770      	bx	lr

080058e6 <__lo0bits>:
 80058e6:	6803      	ldr	r3, [r0, #0]
 80058e8:	4601      	mov	r1, r0
 80058ea:	f013 0207 	ands.w	r2, r3, #7
 80058ee:	d00b      	beq.n	8005908 <__lo0bits+0x22>
 80058f0:	07da      	lsls	r2, r3, #31
 80058f2:	d423      	bmi.n	800593c <__lo0bits+0x56>
 80058f4:	0798      	lsls	r0, r3, #30
 80058f6:	bf49      	itett	mi
 80058f8:	085b      	lsrmi	r3, r3, #1
 80058fa:	089b      	lsrpl	r3, r3, #2
 80058fc:	2001      	movmi	r0, #1
 80058fe:	600b      	strmi	r3, [r1, #0]
 8005900:	bf5c      	itt	pl
 8005902:	600b      	strpl	r3, [r1, #0]
 8005904:	2002      	movpl	r0, #2
 8005906:	4770      	bx	lr
 8005908:	b298      	uxth	r0, r3
 800590a:	b9a8      	cbnz	r0, 8005938 <__lo0bits+0x52>
 800590c:	2010      	movs	r0, #16
 800590e:	0c1b      	lsrs	r3, r3, #16
 8005910:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005914:	bf04      	itt	eq
 8005916:	0a1b      	lsreq	r3, r3, #8
 8005918:	3008      	addeq	r0, #8
 800591a:	071a      	lsls	r2, r3, #28
 800591c:	bf04      	itt	eq
 800591e:	091b      	lsreq	r3, r3, #4
 8005920:	3004      	addeq	r0, #4
 8005922:	079a      	lsls	r2, r3, #30
 8005924:	bf04      	itt	eq
 8005926:	089b      	lsreq	r3, r3, #2
 8005928:	3002      	addeq	r0, #2
 800592a:	07da      	lsls	r2, r3, #31
 800592c:	d402      	bmi.n	8005934 <__lo0bits+0x4e>
 800592e:	085b      	lsrs	r3, r3, #1
 8005930:	d006      	beq.n	8005940 <__lo0bits+0x5a>
 8005932:	3001      	adds	r0, #1
 8005934:	600b      	str	r3, [r1, #0]
 8005936:	4770      	bx	lr
 8005938:	4610      	mov	r0, r2
 800593a:	e7e9      	b.n	8005910 <__lo0bits+0x2a>
 800593c:	2000      	movs	r0, #0
 800593e:	4770      	bx	lr
 8005940:	2020      	movs	r0, #32
 8005942:	4770      	bx	lr

08005944 <__i2b>:
 8005944:	b510      	push	{r4, lr}
 8005946:	460c      	mov	r4, r1
 8005948:	2101      	movs	r1, #1
 800594a:	f7ff ff27 	bl	800579c <_Balloc>
 800594e:	2201      	movs	r2, #1
 8005950:	6144      	str	r4, [r0, #20]
 8005952:	6102      	str	r2, [r0, #16]
 8005954:	bd10      	pop	{r4, pc}

08005956 <__multiply>:
 8005956:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595a:	4614      	mov	r4, r2
 800595c:	690a      	ldr	r2, [r1, #16]
 800595e:	6923      	ldr	r3, [r4, #16]
 8005960:	4688      	mov	r8, r1
 8005962:	429a      	cmp	r2, r3
 8005964:	bfbe      	ittt	lt
 8005966:	460b      	movlt	r3, r1
 8005968:	46a0      	movlt	r8, r4
 800596a:	461c      	movlt	r4, r3
 800596c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005970:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005974:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005978:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800597c:	eb07 0609 	add.w	r6, r7, r9
 8005980:	42b3      	cmp	r3, r6
 8005982:	bfb8      	it	lt
 8005984:	3101      	addlt	r1, #1
 8005986:	f7ff ff09 	bl	800579c <_Balloc>
 800598a:	f100 0514 	add.w	r5, r0, #20
 800598e:	462b      	mov	r3, r5
 8005990:	2200      	movs	r2, #0
 8005992:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005996:	4573      	cmp	r3, lr
 8005998:	d316      	bcc.n	80059c8 <__multiply+0x72>
 800599a:	f104 0214 	add.w	r2, r4, #20
 800599e:	f108 0114 	add.w	r1, r8, #20
 80059a2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80059a6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	9b00      	ldr	r3, [sp, #0]
 80059ae:	9201      	str	r2, [sp, #4]
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d80c      	bhi.n	80059ce <__multiply+0x78>
 80059b4:	2e00      	cmp	r6, #0
 80059b6:	dd03      	ble.n	80059c0 <__multiply+0x6a>
 80059b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d05d      	beq.n	8005a7c <__multiply+0x126>
 80059c0:	6106      	str	r6, [r0, #16]
 80059c2:	b003      	add	sp, #12
 80059c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c8:	f843 2b04 	str.w	r2, [r3], #4
 80059cc:	e7e3      	b.n	8005996 <__multiply+0x40>
 80059ce:	f8b2 b000 	ldrh.w	fp, [r2]
 80059d2:	f1bb 0f00 	cmp.w	fp, #0
 80059d6:	d023      	beq.n	8005a20 <__multiply+0xca>
 80059d8:	4689      	mov	r9, r1
 80059da:	46ac      	mov	ip, r5
 80059dc:	f04f 0800 	mov.w	r8, #0
 80059e0:	f859 4b04 	ldr.w	r4, [r9], #4
 80059e4:	f8dc a000 	ldr.w	sl, [ip]
 80059e8:	b2a3      	uxth	r3, r4
 80059ea:	fa1f fa8a 	uxth.w	sl, sl
 80059ee:	fb0b a303 	mla	r3, fp, r3, sl
 80059f2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80059f6:	f8dc 4000 	ldr.w	r4, [ip]
 80059fa:	4443      	add	r3, r8
 80059fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005a00:	fb0b 840a 	mla	r4, fp, sl, r8
 8005a04:	46e2      	mov	sl, ip
 8005a06:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005a10:	454f      	cmp	r7, r9
 8005a12:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005a16:	f84a 3b04 	str.w	r3, [sl], #4
 8005a1a:	d82b      	bhi.n	8005a74 <__multiply+0x11e>
 8005a1c:	f8cc 8004 	str.w	r8, [ip, #4]
 8005a20:	9b01      	ldr	r3, [sp, #4]
 8005a22:	3204      	adds	r2, #4
 8005a24:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005a28:	f1ba 0f00 	cmp.w	sl, #0
 8005a2c:	d020      	beq.n	8005a70 <__multiply+0x11a>
 8005a2e:	4689      	mov	r9, r1
 8005a30:	46a8      	mov	r8, r5
 8005a32:	f04f 0b00 	mov.w	fp, #0
 8005a36:	682b      	ldr	r3, [r5, #0]
 8005a38:	f8b9 c000 	ldrh.w	ip, [r9]
 8005a3c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	fb0a 440c 	mla	r4, sl, ip, r4
 8005a46:	46c4      	mov	ip, r8
 8005a48:	445c      	add	r4, fp
 8005a4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005a4e:	f84c 3b04 	str.w	r3, [ip], #4
 8005a52:	f859 3b04 	ldr.w	r3, [r9], #4
 8005a56:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005a5a:	0c1b      	lsrs	r3, r3, #16
 8005a5c:	fb0a b303 	mla	r3, sl, r3, fp
 8005a60:	454f      	cmp	r7, r9
 8005a62:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005a66:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005a6a:	d805      	bhi.n	8005a78 <__multiply+0x122>
 8005a6c:	f8c8 3004 	str.w	r3, [r8, #4]
 8005a70:	3504      	adds	r5, #4
 8005a72:	e79b      	b.n	80059ac <__multiply+0x56>
 8005a74:	46d4      	mov	ip, sl
 8005a76:	e7b3      	b.n	80059e0 <__multiply+0x8a>
 8005a78:	46e0      	mov	r8, ip
 8005a7a:	e7dd      	b.n	8005a38 <__multiply+0xe2>
 8005a7c:	3e01      	subs	r6, #1
 8005a7e:	e799      	b.n	80059b4 <__multiply+0x5e>

08005a80 <__pow5mult>:
 8005a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a84:	4615      	mov	r5, r2
 8005a86:	f012 0203 	ands.w	r2, r2, #3
 8005a8a:	4606      	mov	r6, r0
 8005a8c:	460f      	mov	r7, r1
 8005a8e:	d007      	beq.n	8005aa0 <__pow5mult+0x20>
 8005a90:	4c21      	ldr	r4, [pc, #132]	; (8005b18 <__pow5mult+0x98>)
 8005a92:	3a01      	subs	r2, #1
 8005a94:	2300      	movs	r3, #0
 8005a96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a9a:	f7ff feca 	bl	8005832 <__multadd>
 8005a9e:	4607      	mov	r7, r0
 8005aa0:	10ad      	asrs	r5, r5, #2
 8005aa2:	d035      	beq.n	8005b10 <__pow5mult+0x90>
 8005aa4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005aa6:	b93c      	cbnz	r4, 8005ab8 <__pow5mult+0x38>
 8005aa8:	2010      	movs	r0, #16
 8005aaa:	f7ff fe4f 	bl	800574c <malloc>
 8005aae:	6270      	str	r0, [r6, #36]	; 0x24
 8005ab0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ab4:	6004      	str	r4, [r0, #0]
 8005ab6:	60c4      	str	r4, [r0, #12]
 8005ab8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005abc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ac0:	b94c      	cbnz	r4, 8005ad6 <__pow5mult+0x56>
 8005ac2:	f240 2171 	movw	r1, #625	; 0x271
 8005ac6:	4630      	mov	r0, r6
 8005ac8:	f7ff ff3c 	bl	8005944 <__i2b>
 8005acc:	2300      	movs	r3, #0
 8005ace:	4604      	mov	r4, r0
 8005ad0:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ad4:	6003      	str	r3, [r0, #0]
 8005ad6:	f04f 0800 	mov.w	r8, #0
 8005ada:	07eb      	lsls	r3, r5, #31
 8005adc:	d50a      	bpl.n	8005af4 <__pow5mult+0x74>
 8005ade:	4639      	mov	r1, r7
 8005ae0:	4622      	mov	r2, r4
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	f7ff ff37 	bl	8005956 <__multiply>
 8005ae8:	4681      	mov	r9, r0
 8005aea:	4639      	mov	r1, r7
 8005aec:	4630      	mov	r0, r6
 8005aee:	f7ff fe89 	bl	8005804 <_Bfree>
 8005af2:	464f      	mov	r7, r9
 8005af4:	106d      	asrs	r5, r5, #1
 8005af6:	d00b      	beq.n	8005b10 <__pow5mult+0x90>
 8005af8:	6820      	ldr	r0, [r4, #0]
 8005afa:	b938      	cbnz	r0, 8005b0c <__pow5mult+0x8c>
 8005afc:	4622      	mov	r2, r4
 8005afe:	4621      	mov	r1, r4
 8005b00:	4630      	mov	r0, r6
 8005b02:	f7ff ff28 	bl	8005956 <__multiply>
 8005b06:	6020      	str	r0, [r4, #0]
 8005b08:	f8c0 8000 	str.w	r8, [r0]
 8005b0c:	4604      	mov	r4, r0
 8005b0e:	e7e4      	b.n	8005ada <__pow5mult+0x5a>
 8005b10:	4638      	mov	r0, r7
 8005b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b16:	bf00      	nop
 8005b18:	08007410 	.word	0x08007410

08005b1c <__lshift>:
 8005b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b20:	460c      	mov	r4, r1
 8005b22:	4607      	mov	r7, r0
 8005b24:	4616      	mov	r6, r2
 8005b26:	6923      	ldr	r3, [r4, #16]
 8005b28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005b2c:	eb0a 0903 	add.w	r9, sl, r3
 8005b30:	6849      	ldr	r1, [r1, #4]
 8005b32:	68a3      	ldr	r3, [r4, #8]
 8005b34:	f109 0501 	add.w	r5, r9, #1
 8005b38:	42ab      	cmp	r3, r5
 8005b3a:	db32      	blt.n	8005ba2 <__lshift+0x86>
 8005b3c:	4638      	mov	r0, r7
 8005b3e:	f7ff fe2d 	bl	800579c <_Balloc>
 8005b42:	2300      	movs	r3, #0
 8005b44:	4680      	mov	r8, r0
 8005b46:	461a      	mov	r2, r3
 8005b48:	f100 0114 	add.w	r1, r0, #20
 8005b4c:	4553      	cmp	r3, sl
 8005b4e:	db2b      	blt.n	8005ba8 <__lshift+0x8c>
 8005b50:	6920      	ldr	r0, [r4, #16]
 8005b52:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b56:	f104 0314 	add.w	r3, r4, #20
 8005b5a:	f016 021f 	ands.w	r2, r6, #31
 8005b5e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b62:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b66:	d025      	beq.n	8005bb4 <__lshift+0x98>
 8005b68:	2000      	movs	r0, #0
 8005b6a:	f1c2 0e20 	rsb	lr, r2, #32
 8005b6e:	468a      	mov	sl, r1
 8005b70:	681e      	ldr	r6, [r3, #0]
 8005b72:	4096      	lsls	r6, r2
 8005b74:	4330      	orrs	r0, r6
 8005b76:	f84a 0b04 	str.w	r0, [sl], #4
 8005b7a:	f853 0b04 	ldr.w	r0, [r3], #4
 8005b7e:	459c      	cmp	ip, r3
 8005b80:	fa20 f00e 	lsr.w	r0, r0, lr
 8005b84:	d814      	bhi.n	8005bb0 <__lshift+0x94>
 8005b86:	6048      	str	r0, [r1, #4]
 8005b88:	b108      	cbz	r0, 8005b8e <__lshift+0x72>
 8005b8a:	f109 0502 	add.w	r5, r9, #2
 8005b8e:	3d01      	subs	r5, #1
 8005b90:	4638      	mov	r0, r7
 8005b92:	f8c8 5010 	str.w	r5, [r8, #16]
 8005b96:	4621      	mov	r1, r4
 8005b98:	f7ff fe34 	bl	8005804 <_Bfree>
 8005b9c:	4640      	mov	r0, r8
 8005b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba2:	3101      	adds	r1, #1
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	e7c7      	b.n	8005b38 <__lshift+0x1c>
 8005ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005bac:	3301      	adds	r3, #1
 8005bae:	e7cd      	b.n	8005b4c <__lshift+0x30>
 8005bb0:	4651      	mov	r1, sl
 8005bb2:	e7dc      	b.n	8005b6e <__lshift+0x52>
 8005bb4:	3904      	subs	r1, #4
 8005bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bba:	459c      	cmp	ip, r3
 8005bbc:	f841 2f04 	str.w	r2, [r1, #4]!
 8005bc0:	d8f9      	bhi.n	8005bb6 <__lshift+0x9a>
 8005bc2:	e7e4      	b.n	8005b8e <__lshift+0x72>

08005bc4 <__mcmp>:
 8005bc4:	6903      	ldr	r3, [r0, #16]
 8005bc6:	690a      	ldr	r2, [r1, #16]
 8005bc8:	b530      	push	{r4, r5, lr}
 8005bca:	1a9b      	subs	r3, r3, r2
 8005bcc:	d10c      	bne.n	8005be8 <__mcmp+0x24>
 8005bce:	0092      	lsls	r2, r2, #2
 8005bd0:	3014      	adds	r0, #20
 8005bd2:	3114      	adds	r1, #20
 8005bd4:	1884      	adds	r4, r0, r2
 8005bd6:	4411      	add	r1, r2
 8005bd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005bdc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005be0:	4295      	cmp	r5, r2
 8005be2:	d003      	beq.n	8005bec <__mcmp+0x28>
 8005be4:	d305      	bcc.n	8005bf2 <__mcmp+0x2e>
 8005be6:	2301      	movs	r3, #1
 8005be8:	4618      	mov	r0, r3
 8005bea:	bd30      	pop	{r4, r5, pc}
 8005bec:	42a0      	cmp	r0, r4
 8005bee:	d3f3      	bcc.n	8005bd8 <__mcmp+0x14>
 8005bf0:	e7fa      	b.n	8005be8 <__mcmp+0x24>
 8005bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf6:	e7f7      	b.n	8005be8 <__mcmp+0x24>

08005bf8 <__mdiff>:
 8005bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bfc:	460d      	mov	r5, r1
 8005bfe:	4607      	mov	r7, r0
 8005c00:	4611      	mov	r1, r2
 8005c02:	4628      	mov	r0, r5
 8005c04:	4614      	mov	r4, r2
 8005c06:	f7ff ffdd 	bl	8005bc4 <__mcmp>
 8005c0a:	1e06      	subs	r6, r0, #0
 8005c0c:	d108      	bne.n	8005c20 <__mdiff+0x28>
 8005c0e:	4631      	mov	r1, r6
 8005c10:	4638      	mov	r0, r7
 8005c12:	f7ff fdc3 	bl	800579c <_Balloc>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c20:	bfa4      	itt	ge
 8005c22:	4623      	movge	r3, r4
 8005c24:	462c      	movge	r4, r5
 8005c26:	4638      	mov	r0, r7
 8005c28:	6861      	ldr	r1, [r4, #4]
 8005c2a:	bfa6      	itte	ge
 8005c2c:	461d      	movge	r5, r3
 8005c2e:	2600      	movge	r6, #0
 8005c30:	2601      	movlt	r6, #1
 8005c32:	f7ff fdb3 	bl	800579c <_Balloc>
 8005c36:	f04f 0e00 	mov.w	lr, #0
 8005c3a:	60c6      	str	r6, [r0, #12]
 8005c3c:	692b      	ldr	r3, [r5, #16]
 8005c3e:	6926      	ldr	r6, [r4, #16]
 8005c40:	f104 0214 	add.w	r2, r4, #20
 8005c44:	f105 0914 	add.w	r9, r5, #20
 8005c48:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005c4c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005c50:	f100 0114 	add.w	r1, r0, #20
 8005c54:	f852 ab04 	ldr.w	sl, [r2], #4
 8005c58:	f859 5b04 	ldr.w	r5, [r9], #4
 8005c5c:	fa1f f38a 	uxth.w	r3, sl
 8005c60:	4473      	add	r3, lr
 8005c62:	b2ac      	uxth	r4, r5
 8005c64:	1b1b      	subs	r3, r3, r4
 8005c66:	0c2c      	lsrs	r4, r5, #16
 8005c68:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005c6c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005c76:	45c8      	cmp	r8, r9
 8005c78:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005c7c:	4694      	mov	ip, r2
 8005c7e:	f841 4b04 	str.w	r4, [r1], #4
 8005c82:	d8e7      	bhi.n	8005c54 <__mdiff+0x5c>
 8005c84:	45bc      	cmp	ip, r7
 8005c86:	d304      	bcc.n	8005c92 <__mdiff+0x9a>
 8005c88:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005c8c:	b183      	cbz	r3, 8005cb0 <__mdiff+0xb8>
 8005c8e:	6106      	str	r6, [r0, #16]
 8005c90:	e7c4      	b.n	8005c1c <__mdiff+0x24>
 8005c92:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005c96:	b2a2      	uxth	r2, r4
 8005c98:	4472      	add	r2, lr
 8005c9a:	1413      	asrs	r3, r2, #16
 8005c9c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005ca0:	b292      	uxth	r2, r2
 8005ca2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005ca6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005caa:	f841 2b04 	str.w	r2, [r1], #4
 8005cae:	e7e9      	b.n	8005c84 <__mdiff+0x8c>
 8005cb0:	3e01      	subs	r6, #1
 8005cb2:	e7e9      	b.n	8005c88 <__mdiff+0x90>

08005cb4 <__d2b>:
 8005cb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005cb8:	461c      	mov	r4, r3
 8005cba:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	4690      	mov	r8, r2
 8005cc2:	f7ff fd6b 	bl	800579c <_Balloc>
 8005cc6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005cca:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005cce:	4607      	mov	r7, r0
 8005cd0:	bb34      	cbnz	r4, 8005d20 <__d2b+0x6c>
 8005cd2:	9201      	str	r2, [sp, #4]
 8005cd4:	f1b8 0200 	subs.w	r2, r8, #0
 8005cd8:	d027      	beq.n	8005d2a <__d2b+0x76>
 8005cda:	a802      	add	r0, sp, #8
 8005cdc:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005ce0:	f7ff fe01 	bl	80058e6 <__lo0bits>
 8005ce4:	9900      	ldr	r1, [sp, #0]
 8005ce6:	b1f0      	cbz	r0, 8005d26 <__d2b+0x72>
 8005ce8:	9a01      	ldr	r2, [sp, #4]
 8005cea:	f1c0 0320 	rsb	r3, r0, #32
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf2:	430b      	orrs	r3, r1
 8005cf4:	40c2      	lsrs	r2, r0
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	9201      	str	r2, [sp, #4]
 8005cfa:	9b01      	ldr	r3, [sp, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	bf14      	ite	ne
 8005d00:	2102      	movne	r1, #2
 8005d02:	2101      	moveq	r1, #1
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	6139      	str	r1, [r7, #16]
 8005d08:	b1c4      	cbz	r4, 8005d3c <__d2b+0x88>
 8005d0a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005d0e:	4404      	add	r4, r0
 8005d10:	6034      	str	r4, [r6, #0]
 8005d12:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d16:	6028      	str	r0, [r5, #0]
 8005d18:	4638      	mov	r0, r7
 8005d1a:	b002      	add	sp, #8
 8005d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d20:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005d24:	e7d5      	b.n	8005cd2 <__d2b+0x1e>
 8005d26:	6179      	str	r1, [r7, #20]
 8005d28:	e7e7      	b.n	8005cfa <__d2b+0x46>
 8005d2a:	a801      	add	r0, sp, #4
 8005d2c:	f7ff fddb 	bl	80058e6 <__lo0bits>
 8005d30:	2101      	movs	r1, #1
 8005d32:	9b01      	ldr	r3, [sp, #4]
 8005d34:	6139      	str	r1, [r7, #16]
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	3020      	adds	r0, #32
 8005d3a:	e7e5      	b.n	8005d08 <__d2b+0x54>
 8005d3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005d40:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005d44:	6030      	str	r0, [r6, #0]
 8005d46:	6918      	ldr	r0, [r3, #16]
 8005d48:	f7ff fdae 	bl	80058a8 <__hi0bits>
 8005d4c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005d50:	e7e1      	b.n	8005d16 <__d2b+0x62>

08005d52 <_calloc_r>:
 8005d52:	b538      	push	{r3, r4, r5, lr}
 8005d54:	fb02 f401 	mul.w	r4, r2, r1
 8005d58:	4621      	mov	r1, r4
 8005d5a:	f000 f855 	bl	8005e08 <_malloc_r>
 8005d5e:	4605      	mov	r5, r0
 8005d60:	b118      	cbz	r0, 8005d6a <_calloc_r+0x18>
 8005d62:	4622      	mov	r2, r4
 8005d64:	2100      	movs	r1, #0
 8005d66:	f7fe f90a 	bl	8003f7e <memset>
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	bd38      	pop	{r3, r4, r5, pc}
	...

08005d70 <_free_r>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	4605      	mov	r5, r0
 8005d74:	2900      	cmp	r1, #0
 8005d76:	d043      	beq.n	8005e00 <_free_r+0x90>
 8005d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d7c:	1f0c      	subs	r4, r1, #4
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	bfb8      	it	lt
 8005d82:	18e4      	addlt	r4, r4, r3
 8005d84:	f000 fa22 	bl	80061cc <__malloc_lock>
 8005d88:	4a1e      	ldr	r2, [pc, #120]	; (8005e04 <_free_r+0x94>)
 8005d8a:	6813      	ldr	r3, [r2, #0]
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	b933      	cbnz	r3, 8005d9e <_free_r+0x2e>
 8005d90:	6063      	str	r3, [r4, #4]
 8005d92:	6014      	str	r4, [r2, #0]
 8005d94:	4628      	mov	r0, r5
 8005d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d9a:	f000 ba18 	b.w	80061ce <__malloc_unlock>
 8005d9e:	42a3      	cmp	r3, r4
 8005da0:	d90b      	bls.n	8005dba <_free_r+0x4a>
 8005da2:	6821      	ldr	r1, [r4, #0]
 8005da4:	1862      	adds	r2, r4, r1
 8005da6:	4293      	cmp	r3, r2
 8005da8:	bf01      	itttt	eq
 8005daa:	681a      	ldreq	r2, [r3, #0]
 8005dac:	685b      	ldreq	r3, [r3, #4]
 8005dae:	1852      	addeq	r2, r2, r1
 8005db0:	6022      	streq	r2, [r4, #0]
 8005db2:	6063      	str	r3, [r4, #4]
 8005db4:	6004      	str	r4, [r0, #0]
 8005db6:	e7ed      	b.n	8005d94 <_free_r+0x24>
 8005db8:	4613      	mov	r3, r2
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	b10a      	cbz	r2, 8005dc2 <_free_r+0x52>
 8005dbe:	42a2      	cmp	r2, r4
 8005dc0:	d9fa      	bls.n	8005db8 <_free_r+0x48>
 8005dc2:	6819      	ldr	r1, [r3, #0]
 8005dc4:	1858      	adds	r0, r3, r1
 8005dc6:	42a0      	cmp	r0, r4
 8005dc8:	d10b      	bne.n	8005de2 <_free_r+0x72>
 8005dca:	6820      	ldr	r0, [r4, #0]
 8005dcc:	4401      	add	r1, r0
 8005dce:	1858      	adds	r0, r3, r1
 8005dd0:	4282      	cmp	r2, r0
 8005dd2:	6019      	str	r1, [r3, #0]
 8005dd4:	d1de      	bne.n	8005d94 <_free_r+0x24>
 8005dd6:	6810      	ldr	r0, [r2, #0]
 8005dd8:	6852      	ldr	r2, [r2, #4]
 8005dda:	4401      	add	r1, r0
 8005ddc:	6019      	str	r1, [r3, #0]
 8005dde:	605a      	str	r2, [r3, #4]
 8005de0:	e7d8      	b.n	8005d94 <_free_r+0x24>
 8005de2:	d902      	bls.n	8005dea <_free_r+0x7a>
 8005de4:	230c      	movs	r3, #12
 8005de6:	602b      	str	r3, [r5, #0]
 8005de8:	e7d4      	b.n	8005d94 <_free_r+0x24>
 8005dea:	6820      	ldr	r0, [r4, #0]
 8005dec:	1821      	adds	r1, r4, r0
 8005dee:	428a      	cmp	r2, r1
 8005df0:	bf01      	itttt	eq
 8005df2:	6811      	ldreq	r1, [r2, #0]
 8005df4:	6852      	ldreq	r2, [r2, #4]
 8005df6:	1809      	addeq	r1, r1, r0
 8005df8:	6021      	streq	r1, [r4, #0]
 8005dfa:	6062      	str	r2, [r4, #4]
 8005dfc:	605c      	str	r4, [r3, #4]
 8005dfe:	e7c9      	b.n	8005d94 <_free_r+0x24>
 8005e00:	bd38      	pop	{r3, r4, r5, pc}
 8005e02:	bf00      	nop
 8005e04:	2000023c 	.word	0x2000023c

08005e08 <_malloc_r>:
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	1ccd      	adds	r5, r1, #3
 8005e0c:	f025 0503 	bic.w	r5, r5, #3
 8005e10:	3508      	adds	r5, #8
 8005e12:	2d0c      	cmp	r5, #12
 8005e14:	bf38      	it	cc
 8005e16:	250c      	movcc	r5, #12
 8005e18:	2d00      	cmp	r5, #0
 8005e1a:	4606      	mov	r6, r0
 8005e1c:	db01      	blt.n	8005e22 <_malloc_r+0x1a>
 8005e1e:	42a9      	cmp	r1, r5
 8005e20:	d903      	bls.n	8005e2a <_malloc_r+0x22>
 8005e22:	230c      	movs	r3, #12
 8005e24:	6033      	str	r3, [r6, #0]
 8005e26:	2000      	movs	r0, #0
 8005e28:	bd70      	pop	{r4, r5, r6, pc}
 8005e2a:	f000 f9cf 	bl	80061cc <__malloc_lock>
 8005e2e:	4a21      	ldr	r2, [pc, #132]	; (8005eb4 <_malloc_r+0xac>)
 8005e30:	6814      	ldr	r4, [r2, #0]
 8005e32:	4621      	mov	r1, r4
 8005e34:	b991      	cbnz	r1, 8005e5c <_malloc_r+0x54>
 8005e36:	4c20      	ldr	r4, [pc, #128]	; (8005eb8 <_malloc_r+0xb0>)
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	b91b      	cbnz	r3, 8005e44 <_malloc_r+0x3c>
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	f000 f98f 	bl	8006160 <_sbrk_r>
 8005e42:	6020      	str	r0, [r4, #0]
 8005e44:	4629      	mov	r1, r5
 8005e46:	4630      	mov	r0, r6
 8005e48:	f000 f98a 	bl	8006160 <_sbrk_r>
 8005e4c:	1c43      	adds	r3, r0, #1
 8005e4e:	d124      	bne.n	8005e9a <_malloc_r+0x92>
 8005e50:	230c      	movs	r3, #12
 8005e52:	4630      	mov	r0, r6
 8005e54:	6033      	str	r3, [r6, #0]
 8005e56:	f000 f9ba 	bl	80061ce <__malloc_unlock>
 8005e5a:	e7e4      	b.n	8005e26 <_malloc_r+0x1e>
 8005e5c:	680b      	ldr	r3, [r1, #0]
 8005e5e:	1b5b      	subs	r3, r3, r5
 8005e60:	d418      	bmi.n	8005e94 <_malloc_r+0x8c>
 8005e62:	2b0b      	cmp	r3, #11
 8005e64:	d90f      	bls.n	8005e86 <_malloc_r+0x7e>
 8005e66:	600b      	str	r3, [r1, #0]
 8005e68:	18cc      	adds	r4, r1, r3
 8005e6a:	50cd      	str	r5, [r1, r3]
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	f000 f9ae 	bl	80061ce <__malloc_unlock>
 8005e72:	f104 000b 	add.w	r0, r4, #11
 8005e76:	1d23      	adds	r3, r4, #4
 8005e78:	f020 0007 	bic.w	r0, r0, #7
 8005e7c:	1ac3      	subs	r3, r0, r3
 8005e7e:	d0d3      	beq.n	8005e28 <_malloc_r+0x20>
 8005e80:	425a      	negs	r2, r3
 8005e82:	50e2      	str	r2, [r4, r3]
 8005e84:	e7d0      	b.n	8005e28 <_malloc_r+0x20>
 8005e86:	684b      	ldr	r3, [r1, #4]
 8005e88:	428c      	cmp	r4, r1
 8005e8a:	bf16      	itet	ne
 8005e8c:	6063      	strne	r3, [r4, #4]
 8005e8e:	6013      	streq	r3, [r2, #0]
 8005e90:	460c      	movne	r4, r1
 8005e92:	e7eb      	b.n	8005e6c <_malloc_r+0x64>
 8005e94:	460c      	mov	r4, r1
 8005e96:	6849      	ldr	r1, [r1, #4]
 8005e98:	e7cc      	b.n	8005e34 <_malloc_r+0x2c>
 8005e9a:	1cc4      	adds	r4, r0, #3
 8005e9c:	f024 0403 	bic.w	r4, r4, #3
 8005ea0:	42a0      	cmp	r0, r4
 8005ea2:	d005      	beq.n	8005eb0 <_malloc_r+0xa8>
 8005ea4:	1a21      	subs	r1, r4, r0
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	f000 f95a 	bl	8006160 <_sbrk_r>
 8005eac:	3001      	adds	r0, #1
 8005eae:	d0cf      	beq.n	8005e50 <_malloc_r+0x48>
 8005eb0:	6025      	str	r5, [r4, #0]
 8005eb2:	e7db      	b.n	8005e6c <_malloc_r+0x64>
 8005eb4:	2000023c 	.word	0x2000023c
 8005eb8:	20000240 	.word	0x20000240

08005ebc <__ssputs_r>:
 8005ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec0:	688e      	ldr	r6, [r1, #8]
 8005ec2:	4682      	mov	sl, r0
 8005ec4:	429e      	cmp	r6, r3
 8005ec6:	460c      	mov	r4, r1
 8005ec8:	4690      	mov	r8, r2
 8005eca:	4699      	mov	r9, r3
 8005ecc:	d837      	bhi.n	8005f3e <__ssputs_r+0x82>
 8005ece:	898a      	ldrh	r2, [r1, #12]
 8005ed0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ed4:	d031      	beq.n	8005f3a <__ssputs_r+0x7e>
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	6825      	ldr	r5, [r4, #0]
 8005eda:	6909      	ldr	r1, [r1, #16]
 8005edc:	1a6f      	subs	r7, r5, r1
 8005ede:	6965      	ldr	r5, [r4, #20]
 8005ee0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ee4:	fb95 f5f3 	sdiv	r5, r5, r3
 8005ee8:	f109 0301 	add.w	r3, r9, #1
 8005eec:	443b      	add	r3, r7
 8005eee:	429d      	cmp	r5, r3
 8005ef0:	bf38      	it	cc
 8005ef2:	461d      	movcc	r5, r3
 8005ef4:	0553      	lsls	r3, r2, #21
 8005ef6:	d530      	bpl.n	8005f5a <__ssputs_r+0x9e>
 8005ef8:	4629      	mov	r1, r5
 8005efa:	f7ff ff85 	bl	8005e08 <_malloc_r>
 8005efe:	4606      	mov	r6, r0
 8005f00:	b950      	cbnz	r0, 8005f18 <__ssputs_r+0x5c>
 8005f02:	230c      	movs	r3, #12
 8005f04:	f04f 30ff 	mov.w	r0, #4294967295
 8005f08:	f8ca 3000 	str.w	r3, [sl]
 8005f0c:	89a3      	ldrh	r3, [r4, #12]
 8005f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f12:	81a3      	strh	r3, [r4, #12]
 8005f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f18:	463a      	mov	r2, r7
 8005f1a:	6921      	ldr	r1, [r4, #16]
 8005f1c:	f7fe f824 	bl	8003f68 <memcpy>
 8005f20:	89a3      	ldrh	r3, [r4, #12]
 8005f22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f2a:	81a3      	strh	r3, [r4, #12]
 8005f2c:	6126      	str	r6, [r4, #16]
 8005f2e:	443e      	add	r6, r7
 8005f30:	6026      	str	r6, [r4, #0]
 8005f32:	464e      	mov	r6, r9
 8005f34:	6165      	str	r5, [r4, #20]
 8005f36:	1bed      	subs	r5, r5, r7
 8005f38:	60a5      	str	r5, [r4, #8]
 8005f3a:	454e      	cmp	r6, r9
 8005f3c:	d900      	bls.n	8005f40 <__ssputs_r+0x84>
 8005f3e:	464e      	mov	r6, r9
 8005f40:	4632      	mov	r2, r6
 8005f42:	4641      	mov	r1, r8
 8005f44:	6820      	ldr	r0, [r4, #0]
 8005f46:	f000 f928 	bl	800619a <memmove>
 8005f4a:	68a3      	ldr	r3, [r4, #8]
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	1b9b      	subs	r3, r3, r6
 8005f50:	60a3      	str	r3, [r4, #8]
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	441e      	add	r6, r3
 8005f56:	6026      	str	r6, [r4, #0]
 8005f58:	e7dc      	b.n	8005f14 <__ssputs_r+0x58>
 8005f5a:	462a      	mov	r2, r5
 8005f5c:	f000 f938 	bl	80061d0 <_realloc_r>
 8005f60:	4606      	mov	r6, r0
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d1e2      	bne.n	8005f2c <__ssputs_r+0x70>
 8005f66:	6921      	ldr	r1, [r4, #16]
 8005f68:	4650      	mov	r0, sl
 8005f6a:	f7ff ff01 	bl	8005d70 <_free_r>
 8005f6e:	e7c8      	b.n	8005f02 <__ssputs_r+0x46>

08005f70 <_svfiprintf_r>:
 8005f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f74:	461d      	mov	r5, r3
 8005f76:	898b      	ldrh	r3, [r1, #12]
 8005f78:	b09d      	sub	sp, #116	; 0x74
 8005f7a:	061f      	lsls	r7, r3, #24
 8005f7c:	4680      	mov	r8, r0
 8005f7e:	460c      	mov	r4, r1
 8005f80:	4616      	mov	r6, r2
 8005f82:	d50f      	bpl.n	8005fa4 <_svfiprintf_r+0x34>
 8005f84:	690b      	ldr	r3, [r1, #16]
 8005f86:	b96b      	cbnz	r3, 8005fa4 <_svfiprintf_r+0x34>
 8005f88:	2140      	movs	r1, #64	; 0x40
 8005f8a:	f7ff ff3d 	bl	8005e08 <_malloc_r>
 8005f8e:	6020      	str	r0, [r4, #0]
 8005f90:	6120      	str	r0, [r4, #16]
 8005f92:	b928      	cbnz	r0, 8005fa0 <_svfiprintf_r+0x30>
 8005f94:	230c      	movs	r3, #12
 8005f96:	f8c8 3000 	str.w	r3, [r8]
 8005f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f9e:	e0c8      	b.n	8006132 <_svfiprintf_r+0x1c2>
 8005fa0:	2340      	movs	r3, #64	; 0x40
 8005fa2:	6163      	str	r3, [r4, #20]
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa8:	2320      	movs	r3, #32
 8005faa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fae:	2330      	movs	r3, #48	; 0x30
 8005fb0:	f04f 0b01 	mov.w	fp, #1
 8005fb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fb8:	9503      	str	r5, [sp, #12]
 8005fba:	4637      	mov	r7, r6
 8005fbc:	463d      	mov	r5, r7
 8005fbe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005fc2:	b10b      	cbz	r3, 8005fc8 <_svfiprintf_r+0x58>
 8005fc4:	2b25      	cmp	r3, #37	; 0x25
 8005fc6:	d13e      	bne.n	8006046 <_svfiprintf_r+0xd6>
 8005fc8:	ebb7 0a06 	subs.w	sl, r7, r6
 8005fcc:	d00b      	beq.n	8005fe6 <_svfiprintf_r+0x76>
 8005fce:	4653      	mov	r3, sl
 8005fd0:	4632      	mov	r2, r6
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	4640      	mov	r0, r8
 8005fd6:	f7ff ff71 	bl	8005ebc <__ssputs_r>
 8005fda:	3001      	adds	r0, #1
 8005fdc:	f000 80a4 	beq.w	8006128 <_svfiprintf_r+0x1b8>
 8005fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fe2:	4453      	add	r3, sl
 8005fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8005fe6:	783b      	ldrb	r3, [r7, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 809d 	beq.w	8006128 <_svfiprintf_r+0x1b8>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ff8:	9304      	str	r3, [sp, #16]
 8005ffa:	9307      	str	r3, [sp, #28]
 8005ffc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006000:	931a      	str	r3, [sp, #104]	; 0x68
 8006002:	462f      	mov	r7, r5
 8006004:	2205      	movs	r2, #5
 8006006:	f817 1b01 	ldrb.w	r1, [r7], #1
 800600a:	4850      	ldr	r0, [pc, #320]	; (800614c <_svfiprintf_r+0x1dc>)
 800600c:	f7ff fbb8 	bl	8005780 <memchr>
 8006010:	9b04      	ldr	r3, [sp, #16]
 8006012:	b9d0      	cbnz	r0, 800604a <_svfiprintf_r+0xda>
 8006014:	06d9      	lsls	r1, r3, #27
 8006016:	bf44      	itt	mi
 8006018:	2220      	movmi	r2, #32
 800601a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800601e:	071a      	lsls	r2, r3, #28
 8006020:	bf44      	itt	mi
 8006022:	222b      	movmi	r2, #43	; 0x2b
 8006024:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006028:	782a      	ldrb	r2, [r5, #0]
 800602a:	2a2a      	cmp	r2, #42	; 0x2a
 800602c:	d015      	beq.n	800605a <_svfiprintf_r+0xea>
 800602e:	462f      	mov	r7, r5
 8006030:	2000      	movs	r0, #0
 8006032:	250a      	movs	r5, #10
 8006034:	9a07      	ldr	r2, [sp, #28]
 8006036:	4639      	mov	r1, r7
 8006038:	f811 3b01 	ldrb.w	r3, [r1], #1
 800603c:	3b30      	subs	r3, #48	; 0x30
 800603e:	2b09      	cmp	r3, #9
 8006040:	d94d      	bls.n	80060de <_svfiprintf_r+0x16e>
 8006042:	b1b8      	cbz	r0, 8006074 <_svfiprintf_r+0x104>
 8006044:	e00f      	b.n	8006066 <_svfiprintf_r+0xf6>
 8006046:	462f      	mov	r7, r5
 8006048:	e7b8      	b.n	8005fbc <_svfiprintf_r+0x4c>
 800604a:	4a40      	ldr	r2, [pc, #256]	; (800614c <_svfiprintf_r+0x1dc>)
 800604c:	463d      	mov	r5, r7
 800604e:	1a80      	subs	r0, r0, r2
 8006050:	fa0b f000 	lsl.w	r0, fp, r0
 8006054:	4318      	orrs	r0, r3
 8006056:	9004      	str	r0, [sp, #16]
 8006058:	e7d3      	b.n	8006002 <_svfiprintf_r+0x92>
 800605a:	9a03      	ldr	r2, [sp, #12]
 800605c:	1d11      	adds	r1, r2, #4
 800605e:	6812      	ldr	r2, [r2, #0]
 8006060:	9103      	str	r1, [sp, #12]
 8006062:	2a00      	cmp	r2, #0
 8006064:	db01      	blt.n	800606a <_svfiprintf_r+0xfa>
 8006066:	9207      	str	r2, [sp, #28]
 8006068:	e004      	b.n	8006074 <_svfiprintf_r+0x104>
 800606a:	4252      	negs	r2, r2
 800606c:	f043 0302 	orr.w	r3, r3, #2
 8006070:	9207      	str	r2, [sp, #28]
 8006072:	9304      	str	r3, [sp, #16]
 8006074:	783b      	ldrb	r3, [r7, #0]
 8006076:	2b2e      	cmp	r3, #46	; 0x2e
 8006078:	d10c      	bne.n	8006094 <_svfiprintf_r+0x124>
 800607a:	787b      	ldrb	r3, [r7, #1]
 800607c:	2b2a      	cmp	r3, #42	; 0x2a
 800607e:	d133      	bne.n	80060e8 <_svfiprintf_r+0x178>
 8006080:	9b03      	ldr	r3, [sp, #12]
 8006082:	3702      	adds	r7, #2
 8006084:	1d1a      	adds	r2, r3, #4
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	9203      	str	r2, [sp, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	bfb8      	it	lt
 800608e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006092:	9305      	str	r3, [sp, #20]
 8006094:	4d2e      	ldr	r5, [pc, #184]	; (8006150 <_svfiprintf_r+0x1e0>)
 8006096:	2203      	movs	r2, #3
 8006098:	7839      	ldrb	r1, [r7, #0]
 800609a:	4628      	mov	r0, r5
 800609c:	f7ff fb70 	bl	8005780 <memchr>
 80060a0:	b138      	cbz	r0, 80060b2 <_svfiprintf_r+0x142>
 80060a2:	2340      	movs	r3, #64	; 0x40
 80060a4:	1b40      	subs	r0, r0, r5
 80060a6:	fa03 f000 	lsl.w	r0, r3, r0
 80060aa:	9b04      	ldr	r3, [sp, #16]
 80060ac:	3701      	adds	r7, #1
 80060ae:	4303      	orrs	r3, r0
 80060b0:	9304      	str	r3, [sp, #16]
 80060b2:	7839      	ldrb	r1, [r7, #0]
 80060b4:	2206      	movs	r2, #6
 80060b6:	4827      	ldr	r0, [pc, #156]	; (8006154 <_svfiprintf_r+0x1e4>)
 80060b8:	1c7e      	adds	r6, r7, #1
 80060ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060be:	f7ff fb5f 	bl	8005780 <memchr>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	d038      	beq.n	8006138 <_svfiprintf_r+0x1c8>
 80060c6:	4b24      	ldr	r3, [pc, #144]	; (8006158 <_svfiprintf_r+0x1e8>)
 80060c8:	bb13      	cbnz	r3, 8006110 <_svfiprintf_r+0x1a0>
 80060ca:	9b03      	ldr	r3, [sp, #12]
 80060cc:	3307      	adds	r3, #7
 80060ce:	f023 0307 	bic.w	r3, r3, #7
 80060d2:	3308      	adds	r3, #8
 80060d4:	9303      	str	r3, [sp, #12]
 80060d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d8:	444b      	add	r3, r9
 80060da:	9309      	str	r3, [sp, #36]	; 0x24
 80060dc:	e76d      	b.n	8005fba <_svfiprintf_r+0x4a>
 80060de:	fb05 3202 	mla	r2, r5, r2, r3
 80060e2:	2001      	movs	r0, #1
 80060e4:	460f      	mov	r7, r1
 80060e6:	e7a6      	b.n	8006036 <_svfiprintf_r+0xc6>
 80060e8:	2300      	movs	r3, #0
 80060ea:	250a      	movs	r5, #10
 80060ec:	4619      	mov	r1, r3
 80060ee:	3701      	adds	r7, #1
 80060f0:	9305      	str	r3, [sp, #20]
 80060f2:	4638      	mov	r0, r7
 80060f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060f8:	3a30      	subs	r2, #48	; 0x30
 80060fa:	2a09      	cmp	r2, #9
 80060fc:	d903      	bls.n	8006106 <_svfiprintf_r+0x196>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0c8      	beq.n	8006094 <_svfiprintf_r+0x124>
 8006102:	9105      	str	r1, [sp, #20]
 8006104:	e7c6      	b.n	8006094 <_svfiprintf_r+0x124>
 8006106:	fb05 2101 	mla	r1, r5, r1, r2
 800610a:	2301      	movs	r3, #1
 800610c:	4607      	mov	r7, r0
 800610e:	e7f0      	b.n	80060f2 <_svfiprintf_r+0x182>
 8006110:	ab03      	add	r3, sp, #12
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	4622      	mov	r2, r4
 8006116:	4b11      	ldr	r3, [pc, #68]	; (800615c <_svfiprintf_r+0x1ec>)
 8006118:	a904      	add	r1, sp, #16
 800611a:	4640      	mov	r0, r8
 800611c:	f7fd ffc8 	bl	80040b0 <_printf_float>
 8006120:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006124:	4681      	mov	r9, r0
 8006126:	d1d6      	bne.n	80060d6 <_svfiprintf_r+0x166>
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	065b      	lsls	r3, r3, #25
 800612c:	f53f af35 	bmi.w	8005f9a <_svfiprintf_r+0x2a>
 8006130:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006132:	b01d      	add	sp, #116	; 0x74
 8006134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006138:	ab03      	add	r3, sp, #12
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	4622      	mov	r2, r4
 800613e:	4b07      	ldr	r3, [pc, #28]	; (800615c <_svfiprintf_r+0x1ec>)
 8006140:	a904      	add	r1, sp, #16
 8006142:	4640      	mov	r0, r8
 8006144:	f7fe fa60 	bl	8004608 <_printf_i>
 8006148:	e7ea      	b.n	8006120 <_svfiprintf_r+0x1b0>
 800614a:	bf00      	nop
 800614c:	0800741c 	.word	0x0800741c
 8006150:	08007422 	.word	0x08007422
 8006154:	08007426 	.word	0x08007426
 8006158:	080040b1 	.word	0x080040b1
 800615c:	08005ebd 	.word	0x08005ebd

08006160 <_sbrk_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	2300      	movs	r3, #0
 8006164:	4c05      	ldr	r4, [pc, #20]	; (800617c <_sbrk_r+0x1c>)
 8006166:	4605      	mov	r5, r0
 8006168:	4608      	mov	r0, r1
 800616a:	6023      	str	r3, [r4, #0]
 800616c:	f7fb feda 	bl	8001f24 <_sbrk>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d102      	bne.n	800617a <_sbrk_r+0x1a>
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	b103      	cbz	r3, 800617a <_sbrk_r+0x1a>
 8006178:	602b      	str	r3, [r5, #0]
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	200007b0 	.word	0x200007b0

08006180 <__ascii_wctomb>:
 8006180:	b149      	cbz	r1, 8006196 <__ascii_wctomb+0x16>
 8006182:	2aff      	cmp	r2, #255	; 0xff
 8006184:	bf8b      	itete	hi
 8006186:	238a      	movhi	r3, #138	; 0x8a
 8006188:	700a      	strbls	r2, [r1, #0]
 800618a:	6003      	strhi	r3, [r0, #0]
 800618c:	2001      	movls	r0, #1
 800618e:	bf88      	it	hi
 8006190:	f04f 30ff 	movhi.w	r0, #4294967295
 8006194:	4770      	bx	lr
 8006196:	4608      	mov	r0, r1
 8006198:	4770      	bx	lr

0800619a <memmove>:
 800619a:	4288      	cmp	r0, r1
 800619c:	b510      	push	{r4, lr}
 800619e:	eb01 0302 	add.w	r3, r1, r2
 80061a2:	d807      	bhi.n	80061b4 <memmove+0x1a>
 80061a4:	1e42      	subs	r2, r0, #1
 80061a6:	4299      	cmp	r1, r3
 80061a8:	d00a      	beq.n	80061c0 <memmove+0x26>
 80061aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061ae:	f802 4f01 	strb.w	r4, [r2, #1]!
 80061b2:	e7f8      	b.n	80061a6 <memmove+0xc>
 80061b4:	4283      	cmp	r3, r0
 80061b6:	d9f5      	bls.n	80061a4 <memmove+0xa>
 80061b8:	1881      	adds	r1, r0, r2
 80061ba:	1ad2      	subs	r2, r2, r3
 80061bc:	42d3      	cmn	r3, r2
 80061be:	d100      	bne.n	80061c2 <memmove+0x28>
 80061c0:	bd10      	pop	{r4, pc}
 80061c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061c6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80061ca:	e7f7      	b.n	80061bc <memmove+0x22>

080061cc <__malloc_lock>:
 80061cc:	4770      	bx	lr

080061ce <__malloc_unlock>:
 80061ce:	4770      	bx	lr

080061d0 <_realloc_r>:
 80061d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d2:	4607      	mov	r7, r0
 80061d4:	4614      	mov	r4, r2
 80061d6:	460e      	mov	r6, r1
 80061d8:	b921      	cbnz	r1, 80061e4 <_realloc_r+0x14>
 80061da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80061de:	4611      	mov	r1, r2
 80061e0:	f7ff be12 	b.w	8005e08 <_malloc_r>
 80061e4:	b922      	cbnz	r2, 80061f0 <_realloc_r+0x20>
 80061e6:	f7ff fdc3 	bl	8005d70 <_free_r>
 80061ea:	4625      	mov	r5, r4
 80061ec:	4628      	mov	r0, r5
 80061ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061f0:	f000 f814 	bl	800621c <_malloc_usable_size_r>
 80061f4:	42a0      	cmp	r0, r4
 80061f6:	d20f      	bcs.n	8006218 <_realloc_r+0x48>
 80061f8:	4621      	mov	r1, r4
 80061fa:	4638      	mov	r0, r7
 80061fc:	f7ff fe04 	bl	8005e08 <_malloc_r>
 8006200:	4605      	mov	r5, r0
 8006202:	2800      	cmp	r0, #0
 8006204:	d0f2      	beq.n	80061ec <_realloc_r+0x1c>
 8006206:	4631      	mov	r1, r6
 8006208:	4622      	mov	r2, r4
 800620a:	f7fd fead 	bl	8003f68 <memcpy>
 800620e:	4631      	mov	r1, r6
 8006210:	4638      	mov	r0, r7
 8006212:	f7ff fdad 	bl	8005d70 <_free_r>
 8006216:	e7e9      	b.n	80061ec <_realloc_r+0x1c>
 8006218:	4635      	mov	r5, r6
 800621a:	e7e7      	b.n	80061ec <_realloc_r+0x1c>

0800621c <_malloc_usable_size_r>:
 800621c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006220:	1f18      	subs	r0, r3, #4
 8006222:	2b00      	cmp	r3, #0
 8006224:	bfbc      	itt	lt
 8006226:	580b      	ldrlt	r3, [r1, r0]
 8006228:	18c0      	addlt	r0, r0, r3
 800622a:	4770      	bx	lr

0800622c <_init>:
 800622c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622e:	bf00      	nop
 8006230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006232:	bc08      	pop	{r3}
 8006234:	469e      	mov	lr, r3
 8006236:	4770      	bx	lr

08006238 <_fini>:
 8006238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623a:	bf00      	nop
 800623c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800623e:	bc08      	pop	{r3}
 8006240:	469e      	mov	lr, r3
 8006242:	4770      	bx	lr
