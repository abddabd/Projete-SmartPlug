
Projete 2024 v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000609c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012e0  080061b0  080061b0  000161b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007490  08007490  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007490  08007490  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007490  08007490  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007490  08007490  00017490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007494  08007494  00017494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000550  200001e8  0800767c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  0800767c  00020738  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a504  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b87  00000000  00000000  0002a711  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a20  00000000  00000000  0002c298  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00017fb4  00000000  00000000  0002ccb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008a49  00000000  00000000  00044c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00089ca2  00000000  00000000  0004d6b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000d7357  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000950  00000000  00000000  000d73d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00003430  00000000  00000000  000d7d28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006194 	.word	0x08006194

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08006194 	.word	0x08006194

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000a92:	2200      	movs	r2, #0
 8000a94:	2110      	movs	r1, #16
 8000a96:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <ST7789_WriteCommand+0x40>)
 8000a98:	f002 f842 	bl	8002b20 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	480a      	ldr	r0, [pc, #40]	; (8000acc <ST7789_WriteCommand+0x44>)
 8000aa2:	f002 f83d 	bl	8002b20 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000aa6:	1df9      	adds	r1, r7, #7
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aac:	2201      	movs	r2, #1
 8000aae:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <ST7789_WriteCommand+0x48>)
 8000ab0:	f002 fda4 	bl	80035fc <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2110      	movs	r1, #16
 8000ab8:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <ST7789_WriteCommand+0x40>)
 8000aba:	f002 f831 	bl	8002b20 <HAL_GPIO_WritePin>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40010800 	.word	0x40010800
 8000acc:	40010c00 	.word	0x40010c00
 8000ad0:	20000578 	.word	0x20000578

08000ad4 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2110      	movs	r1, #16
 8000ae2:	4815      	ldr	r0, [pc, #84]	; (8000b38 <ST7789_WriteData+0x64>)
 8000ae4:	f002 f81c 	bl	8002b20 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2101      	movs	r1, #1
 8000aec:	4813      	ldr	r0, [pc, #76]	; (8000b3c <ST7789_WriteData+0x68>)
 8000aee:	f002 f817 	bl	8002b20 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8000af2:	e015      	b.n	8000b20 <ST7789_WriteData+0x4c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000afa:	4293      	cmp	r3, r2
 8000afc:	bf28      	it	cs
 8000afe:	4613      	movcs	r3, r2
 8000b00:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000b02:	89fa      	ldrh	r2, [r7, #14]
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	6879      	ldr	r1, [r7, #4]
 8000b0a:	480d      	ldr	r0, [pc, #52]	; (8000b40 <ST7789_WriteData+0x6c>)
 8000b0c:	f002 fd76 	bl	80035fc <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 8000b10:	89fb      	ldrh	r3, [r7, #14]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8000b18:	89fb      	ldrh	r3, [r7, #14]
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1e6      	bne.n	8000af4 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 8000b26:	2201      	movs	r2, #1
 8000b28:	2110      	movs	r1, #16
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <ST7789_WriteData+0x64>)
 8000b2c:	f001 fff8 	bl	8002b20 <HAL_GPIO_WritePin>
}
 8000b30:	bf00      	nop
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40010800 	.word	0x40010800
 8000b3c:	40010c00 	.word	0x40010c00
 8000b40:	20000578 	.word	0x20000578

08000b44 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2110      	movs	r1, #16
 8000b52:	480c      	ldr	r0, [pc, #48]	; (8000b84 <ST7789_WriteSmallData+0x40>)
 8000b54:	f001 ffe4 	bl	8002b20 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	480a      	ldr	r0, [pc, #40]	; (8000b88 <ST7789_WriteSmallData+0x44>)
 8000b5e:	f001 ffdf 	bl	8002b20 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000b62:	1df9      	adds	r1, r7, #7
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4808      	ldr	r0, [pc, #32]	; (8000b8c <ST7789_WriteSmallData+0x48>)
 8000b6c:	f002 fd46 	bl	80035fc <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000b70:	2201      	movs	r2, #1
 8000b72:	2110      	movs	r1, #16
 8000b74:	4803      	ldr	r0, [pc, #12]	; (8000b84 <ST7789_WriteSmallData+0x40>)
 8000b76:	f001 ffd3 	bl	8002b20 <HAL_GPIO_WritePin>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40010800 	.word	0x40010800
 8000b88:	40010c00 	.word	0x40010c00
 8000b8c:	20000578 	.word	0x20000578

08000b90 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8000b9a:	2036      	movs	r0, #54	; 0x36
 8000b9c:	f7ff ff74 	bl	8000a88 <ST7789_WriteCommand>
	switch (m) {
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d81a      	bhi.n	8000bdc <ST7789_SetRotation+0x4c>
 8000ba6:	a201      	add	r2, pc, #4	; (adr r2, 8000bac <ST7789_SetRotation+0x1c>)
 8000ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bac:	08000bbd 	.word	0x08000bbd
 8000bb0:	08000bc5 	.word	0x08000bc5
 8000bb4:	08000bcd 	.word	0x08000bcd
 8000bb8:	08000bd5 	.word	0x08000bd5
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8000bbc:	20c0      	movs	r0, #192	; 0xc0
 8000bbe:	f7ff ffc1 	bl	8000b44 <ST7789_WriteSmallData>
		break;
 8000bc2:	e00c      	b.n	8000bde <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000bc4:	20a0      	movs	r0, #160	; 0xa0
 8000bc6:	f7ff ffbd 	bl	8000b44 <ST7789_WriteSmallData>
		break;
 8000bca:	e008      	b.n	8000bde <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f7ff ffb9 	bl	8000b44 <ST7789_WriteSmallData>
		break;
 8000bd2:	e004      	b.n	8000bde <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000bd4:	2060      	movs	r0, #96	; 0x60
 8000bd6:	f7ff ffb5 	bl	8000b44 <ST7789_WriteSmallData>
		break;
 8000bda:	e000      	b.n	8000bde <ST7789_SetRotation+0x4e>
	default:
		break;
 8000bdc:	bf00      	nop
	}
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop

08000be8 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b087      	sub	sp, #28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4623      	mov	r3, r4
 8000bf8:	80fb      	strh	r3, [r7, #6]
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	80bb      	strh	r3, [r7, #4]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	807b      	strh	r3, [r7, #2]
 8000c02:	4613      	mov	r3, r2
 8000c04:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000c06:	2200      	movs	r2, #0
 8000c08:	2110      	movs	r1, #16
 8000c0a:	4824      	ldr	r0, [pc, #144]	; (8000c9c <ST7789_SetAddressWindow+0xb4>)
 8000c0c:	f001 ff88 	bl	8002b20 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8000c10:	88fb      	ldrh	r3, [r7, #6]
 8000c12:	82fb      	strh	r3, [r7, #22]
 8000c14:	887b      	ldrh	r3, [r7, #2]
 8000c16:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8000c18:	88bb      	ldrh	r3, [r7, #4]
 8000c1a:	827b      	strh	r3, [r7, #18]
 8000c1c:	883b      	ldrh	r3, [r7, #0]
 8000c1e:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8000c20:	202a      	movs	r0, #42	; 0x2a
 8000c22:	f7ff ff31 	bl	8000a88 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8000c26:	8afb      	ldrh	r3, [r7, #22]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	733b      	strb	r3, [r7, #12]
 8000c30:	8afb      	ldrh	r3, [r7, #22]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	737b      	strb	r3, [r7, #13]
 8000c36:	8abb      	ldrh	r3, [r7, #20]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	73bb      	strb	r3, [r7, #14]
 8000c40:	8abb      	ldrh	r3, [r7, #20]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	2104      	movs	r1, #4
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff41 	bl	8000ad4 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8000c52:	202b      	movs	r0, #43	; 0x2b
 8000c54:	f7ff ff18 	bl	8000a88 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8000c58:	8a7b      	ldrh	r3, [r7, #18]
 8000c5a:	0a1b      	lsrs	r3, r3, #8
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	723b      	strb	r3, [r7, #8]
 8000c62:	8a7b      	ldrh	r3, [r7, #18]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	727b      	strb	r3, [r7, #9]
 8000c68:	8a3b      	ldrh	r3, [r7, #16]
 8000c6a:	0a1b      	lsrs	r3, r3, #8
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	72bb      	strb	r3, [r7, #10]
 8000c72:	8a3b      	ldrh	r3, [r7, #16]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	2104      	movs	r1, #4
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff28 	bl	8000ad4 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000c84:	202c      	movs	r0, #44	; 0x2c
 8000c86:	f7ff feff 	bl	8000a88 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2110      	movs	r1, #16
 8000c8e:	4803      	ldr	r0, [pc, #12]	; (8000c9c <ST7789_SetAddressWindow+0xb4>)
 8000c90:	f001 ff46 	bl	8002b20 <HAL_GPIO_WritePin>
}
 8000c94:	bf00      	nop
 8000c96:	371c      	adds	r7, #28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd90      	pop	{r4, r7, pc}
 8000c9c:	40010800 	.word	0x40010800

08000ca0 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b08b      	sub	sp, #44	; 0x2c
 8000ca4:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(10);
 8000ca6:	200a      	movs	r0, #10
 8000ca8:	f001 f9b4 	bl	8002014 <HAL_Delay>
    ST7789_RST_Clr();
 8000cac:	2200      	movs	r2, #0
 8000cae:	2102      	movs	r1, #2
 8000cb0:	4846      	ldr	r0, [pc, #280]	; (8000dcc <ST7789_Init+0x12c>)
 8000cb2:	f001 ff35 	bl	8002b20 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000cb6:	200a      	movs	r0, #10
 8000cb8:	f001 f9ac 	bl	8002014 <HAL_Delay>
    ST7789_RST_Set();
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	4842      	ldr	r0, [pc, #264]	; (8000dcc <ST7789_Init+0x12c>)
 8000cc2:	f001 ff2d 	bl	8002b20 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000cc6:	2014      	movs	r0, #20
 8000cc8:	f001 f9a4 	bl	8002014 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8000ccc:	203a      	movs	r0, #58	; 0x3a
 8000cce:	f7ff fedb 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8000cd2:	2055      	movs	r0, #85	; 0x55
 8000cd4:	f7ff ff36 	bl	8000b44 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8000cd8:	20b2      	movs	r0, #178	; 0xb2
 8000cda:	f7ff fed5 	bl	8000a88 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8000cde:	4a3c      	ldr	r2, [pc, #240]	; (8000dd0 <ST7789_Init+0x130>)
 8000ce0:	f107 0320 	add.w	r3, r7, #32
 8000ce4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ce8:	6018      	str	r0, [r3, #0]
 8000cea:	3304      	adds	r3, #4
 8000cec:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8000cee:	f107 0320 	add.w	r3, r7, #32
 8000cf2:	2105      	movs	r1, #5
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff feed 	bl	8000ad4 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8000cfa:	2002      	movs	r0, #2
 8000cfc:	f7ff ff48 	bl	8000b90 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8000d00:	20b7      	movs	r0, #183	; 0xb7
 8000d02:	f7ff fec1 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8000d06:	2035      	movs	r0, #53	; 0x35
 8000d08:	f7ff ff1c 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8000d0c:	20bb      	movs	r0, #187	; 0xbb
 8000d0e:	f7ff febb 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8000d12:	2019      	movs	r0, #25
 8000d14:	f7ff ff16 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8000d18:	20c0      	movs	r0, #192	; 0xc0
 8000d1a:	f7ff feb5 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8000d1e:	202c      	movs	r0, #44	; 0x2c
 8000d20:	f7ff ff10 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8000d24:	20c2      	movs	r0, #194	; 0xc2
 8000d26:	f7ff feaf 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff ff0a 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8000d30:	20c3      	movs	r0, #195	; 0xc3
 8000d32:	f7ff fea9 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8000d36:	2012      	movs	r0, #18
 8000d38:	f7ff ff04 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8000d3c:	20c4      	movs	r0, #196	; 0xc4
 8000d3e:	f7ff fea3 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8000d42:	2020      	movs	r0, #32
 8000d44:	f7ff fefe 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8000d48:	20c6      	movs	r0, #198	; 0xc6
 8000d4a:	f7ff fe9d 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8000d4e:	200f      	movs	r0, #15
 8000d50:	f7ff fef8 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8000d54:	20d0      	movs	r0, #208	; 0xd0
 8000d56:	f7ff fe97 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8000d5a:	20a4      	movs	r0, #164	; 0xa4
 8000d5c:	f7ff fef2 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000d60:	20a1      	movs	r0, #161	; 0xa1
 8000d62:	f7ff feef 	bl	8000b44 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8000d66:	20e0      	movs	r0, #224	; 0xe0
 8000d68:	f7ff fe8e 	bl	8000a88 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <ST7789_Init+0x134>)
 8000d6e:	f107 0410 	add.w	r4, r7, #16
 8000d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d74:	c407      	stmia	r4!, {r0, r1, r2}
 8000d76:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	210e      	movs	r1, #14
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fea8 	bl	8000ad4 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8000d84:	20e1      	movs	r0, #225	; 0xe1
 8000d86:	f7ff fe7f 	bl	8000a88 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <ST7789_Init+0x138>)
 8000d8c:	463c      	mov	r4, r7
 8000d8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d90:	c407      	stmia	r4!, {r0, r1, r2}
 8000d92:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000d94:	463b      	mov	r3, r7
 8000d96:	210e      	movs	r1, #14
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe9b 	bl	8000ad4 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8000d9e:	2021      	movs	r0, #33	; 0x21
 8000da0:	f7ff fe72 	bl	8000a88 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000da4:	2011      	movs	r0, #17
 8000da6:	f7ff fe6f 	bl	8000a88 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8000daa:	2013      	movs	r0, #19
 8000dac:	f7ff fe6c 	bl	8000a88 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8000db0:	2029      	movs	r0, #41	; 0x29
 8000db2:	f7ff fe69 	bl	8000a88 <ST7789_WriteCommand>

	HAL_Delay(50);
 8000db6:	2032      	movs	r0, #50	; 0x32
 8000db8:	f001 f92c 	bl	8002014 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f000 f80d 	bl	8000ddc <ST7789_Fill_Color>
}
 8000dc2:	bf00      	nop
 8000dc4:	372c      	adds	r7, #44	; 0x2c
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd90      	pop	{r4, r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40010c00 	.word	0x40010c00
 8000dd0:	080061b0 	.word	0x080061b0
 8000dd4:	080061b8 	.word	0x080061b8
 8000dd8:	080061c8 	.word	0x080061c8

08000ddc <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8000de6:	23ef      	movs	r3, #239	; 0xef
 8000de8:	22ef      	movs	r2, #239	; 0xef
 8000dea:	2100      	movs	r1, #0
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff fefb 	bl	8000be8 <ST7789_SetAddressWindow>
	ST7789_Select();
 8000df2:	2200      	movs	r2, #0
 8000df4:	2110      	movs	r1, #16
 8000df6:	4816      	ldr	r0, [pc, #88]	; (8000e50 <ST7789_Fill_Color+0x74>)
 8000df8:	f001 fe92 	bl	8002b20 <HAL_GPIO_WritePin>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	81fb      	strh	r3, [r7, #14]
 8000e00:	e019      	b.n	8000e36 <ST7789_Fill_Color+0x5a>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8000e02:	2300      	movs	r3, #0
 8000e04:	81bb      	strh	r3, [r7, #12]
 8000e06:	e010      	b.n	8000e2a <ST7789_Fill_Color+0x4e>
					uint8_t data[] = {color >> 8, color & 0xFF};
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	0a1b      	lsrs	r3, r3, #8
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	723b      	strb	r3, [r7, #8]
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fe58 	bl	8000ad4 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8000e24:	89bb      	ldrh	r3, [r7, #12]
 8000e26:	3301      	adds	r3, #1
 8000e28:	81bb      	strh	r3, [r7, #12]
 8000e2a:	89bb      	ldrh	r3, [r7, #12]
 8000e2c:	2bef      	cmp	r3, #239	; 0xef
 8000e2e:	d9eb      	bls.n	8000e08 <ST7789_Fill_Color+0x2c>
		for (i = 0; i < ST7789_WIDTH; i++)
 8000e30:	89fb      	ldrh	r3, [r7, #14]
 8000e32:	3301      	adds	r3, #1
 8000e34:	81fb      	strh	r3, [r7, #14]
 8000e36:	89fb      	ldrh	r3, [r7, #14]
 8000e38:	2bef      	cmp	r3, #239	; 0xef
 8000e3a:	d9e2      	bls.n	8000e02 <ST7789_Fill_Color+0x26>
				}
	#endif
	ST7789_UnSelect();
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2110      	movs	r1, #16
 8000e40:	4803      	ldr	r0, [pc, #12]	; (8000e50 <ST7789_Fill_Color+0x74>)
 8000e42:	f001 fe6d 	bl	8002b20 <HAL_GPIO_WritePin>
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40010800 	.word	0x40010800

08000e54 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000e54:	b082      	sub	sp, #8
 8000e56:	b590      	push	{r4, r7, lr}
 8000e58:	b089      	sub	sp, #36	; 0x24
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80fb      	strh	r3, [r7, #6]
 8000e62:	460b      	mov	r3, r1
 8000e64:	80bb      	strh	r3, [r7, #4]
 8000e66:	4613      	mov	r3, r2
 8000e68:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2110      	movs	r1, #16
 8000e6e:	4838      	ldr	r0, [pc, #224]	; (8000f50 <ST7789_WriteChar+0xfc>)
 8000e70:	f001 fe56 	bl	8002b20 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8000e74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	3b01      	subs	r3, #1
 8000e82:	b29c      	uxth	r4, r3
 8000e84:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	88bb      	ldrh	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	3b01      	subs	r3, #1
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	88b9      	ldrh	r1, [r7, #4]
 8000e96:	88f8      	ldrh	r0, [r7, #6]
 8000e98:	4622      	mov	r2, r4
 8000e9a:	f7ff fea5 	bl	8000be8 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
 8000ea2:	e043      	b.n	8000f2c <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 8000ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ea6:	78fb      	ldrb	r3, [r7, #3]
 8000ea8:	3b20      	subs	r3, #32
 8000eaa:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000eae:	fb01 f303 	mul.w	r3, r1, r3
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	440b      	add	r3, r1
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	4413      	add	r3, r2
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	e029      	b.n	8000f1a <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00e      	beq.n	8000ef4 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8000ed6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	743b      	strb	r3, [r7, #16]
 8000ee0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	2102      	movs	r1, #2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fdf1 	bl	8000ad4 <ST7789_WriteData>
 8000ef2:	e00f      	b.n	8000f14 <ST7789_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8000ef4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	733b      	strb	r3, [r7, #12]
 8000f00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fde0 	bl	8000ad4 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	3301      	adds	r3, #1
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f1e:	461a      	mov	r2, r3
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d3cf      	bcc.n	8000ec6 <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	61fb      	str	r3, [r7, #28]
 8000f2c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000f30:	461a      	mov	r2, r3
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d3b5      	bcc.n	8000ea4 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2110      	movs	r1, #16
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <ST7789_WriteChar+0xfc>)
 8000f3e:	f001 fdef 	bl	8002b20 <HAL_GPIO_WritePin>
}
 8000f42:	bf00      	nop
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000f4c:	b002      	add	sp, #8
 8000f4e:	4770      	bx	lr
 8000f50:	40010800 	.word	0x40010800

08000f54 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000f54:	b082      	sub	sp, #8
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af04      	add	r7, sp, #16
 8000f5c:	603a      	str	r2, [r7, #0]
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	4603      	mov	r3, r0
 8000f62:	80fb      	strh	r3, [r7, #6]
 8000f64:	460b      	mov	r3, r1
 8000f66:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2110      	movs	r1, #16
 8000f6c:	4821      	ldr	r0, [pc, #132]	; (8000ff4 <ST7789_WriteString+0xa0>)
 8000f6e:	f001 fdd7 	bl	8002b20 <HAL_GPIO_WritePin>
	while (*str) {
 8000f72:	e02d      	b.n	8000fd0 <ST7789_WriteString+0x7c>
		if (x + font.width >= ST7789_WIDTH) {
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	7d3a      	ldrb	r2, [r7, #20]
 8000f78:	4413      	add	r3, r2
 8000f7a:	2bef      	cmp	r3, #239	; 0xef
 8000f7c:	dd13      	ble.n	8000fa6 <ST7789_WriteString+0x52>
			x = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8000f82:	7d7b      	ldrb	r3, [r7, #21]
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	88bb      	ldrh	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8000f8c:	88bb      	ldrh	r3, [r7, #4]
 8000f8e:	7d7a      	ldrb	r2, [r7, #21]
 8000f90:	4413      	add	r3, r2
 8000f92:	2bef      	cmp	r3, #239	; 0xef
 8000f94:	dc21      	bgt.n	8000fda <ST7789_WriteString+0x86>
				break;
			}

			if (*str == ' ') {
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b20      	cmp	r3, #32
 8000f9c:	d103      	bne.n	8000fa6 <ST7789_WriteString+0x52>
				// skip spaces in the beginning of the new line
				str++;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	603b      	str	r3, [r7, #0]
				continue;
 8000fa4:	e014      	b.n	8000fd0 <ST7789_WriteString+0x7c>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	781a      	ldrb	r2, [r3, #0]
 8000faa:	88b9      	ldrh	r1, [r7, #4]
 8000fac:	88f8      	ldrh	r0, [r7, #6]
 8000fae:	8c3b      	ldrh	r3, [r7, #32]
 8000fb0:	9302      	str	r3, [sp, #8]
 8000fb2:	8bbb      	ldrh	r3, [r7, #28]
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f7ff ff4a 	bl	8000e54 <ST7789_WriteChar>
		x += font.width;
 8000fc0:	7d3b      	ldrb	r3, [r7, #20]
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	80fb      	strh	r3, [r7, #6]
		str++;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1cd      	bne.n	8000f74 <ST7789_WriteString+0x20>
 8000fd8:	e000      	b.n	8000fdc <ST7789_WriteString+0x88>
				break;
 8000fda:	bf00      	nop
	}
	ST7789_UnSelect();
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2110      	movs	r1, #16
 8000fe0:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <ST7789_WriteString+0xa0>)
 8000fe2:	f001 fd9d 	bl	8002b20 <HAL_GPIO_WritePin>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ff0:	b002      	add	sp, #8
 8000ff2:	4770      	bx	lr
 8000ff4:	40010800 	.word	0x40010800

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffe:	f000 ffa7 	bl	8001f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001002:	f000 fb9f 	bl	8001744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001006:	f000 fcd1 	bl	80019ac <MX_GPIO_Init>
  MX_SPI1_Init();
 800100a:	f000 fc6f 	bl	80018ec <MX_SPI1_Init>
  MX_ADC1_Init();
 800100e:	f000 fbf1 	bl	80017f4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001012:	f000 fc2d 	bl	8001870 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8001016:	f000 fc9f 	bl	8001958 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 800101a:	f7ff fe41 	bl	8000ca0 <ST7789_Init>

  ST7789_Fill_Color(WHITE);
 800101e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001022:	f7ff fedb 	bl	8000ddc <ST7789_Fill_Color>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001026:	2201      	movs	r2, #1
 8001028:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800102c:	4890      	ldr	r0, [pc, #576]	; (8001270 <main+0x278>)
 800102e:	f001 fd77 	bl	8002b20 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001032:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001036:	f000 ffed 	bl	8002014 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001040:	488b      	ldr	r0, [pc, #556]	; (8001270 <main+0x278>)
 8001042:	f001 fd6d 	bl	8002b20 <HAL_GPIO_WritePin>
  HAL_Delay(12500);
 8001046:	f243 00d4 	movw	r0, #12500	; 0x30d4
 800104a:	f000 ffe3 	bl	8002014 <HAL_Delay>

//  sprintf(TxData, "ATE0\r\n");
//  	    HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
//		HAL_Delay(2000);
  sprintf(TxData, "AT+GSMBUSY=1\r\n");
 800104e:	4a89      	ldr	r2, [pc, #548]	; (8001274 <main+0x27c>)
 8001050:	4b89      	ldr	r3, [pc, #548]	; (8001278 <main+0x280>)
 8001052:	4614      	mov	r4, r2
 8001054:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001056:	6020      	str	r0, [r4, #0]
 8001058:	6061      	str	r1, [r4, #4]
 800105a:	60a2      	str	r2, [r4, #8]
 800105c:	881a      	ldrh	r2, [r3, #0]
 800105e:	789b      	ldrb	r3, [r3, #2]
 8001060:	81a2      	strh	r2, [r4, #12]
 8001062:	73a3      	strb	r3, [r4, #14]
      	HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001064:	4883      	ldr	r0, [pc, #524]	; (8001274 <main+0x27c>)
 8001066:	f7ff f873 	bl	8000150 <strlen>
 800106a:	4603      	mov	r3, r0
 800106c:	b29a      	uxth	r2, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	4980      	ldr	r1, [pc, #512]	; (8001274 <main+0x27c>)
 8001074:	4881      	ldr	r0, [pc, #516]	; (800127c <main+0x284>)
 8001076:	f002 fcf0 	bl	8003a5a <HAL_UART_Transmit>
      	HAL_Delay(2000);
 800107a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800107e:	f000 ffc9 	bl	8002014 <HAL_Delay>
  sprintf(TxData, "AT+CGATT=1\r\n");
 8001082:	4a7c      	ldr	r2, [pc, #496]	; (8001274 <main+0x27c>)
 8001084:	4b7e      	ldr	r3, [pc, #504]	; (8001280 <main+0x288>)
 8001086:	4614      	mov	r4, r2
 8001088:	cb07      	ldmia	r3!, {r0, r1, r2}
 800108a:	6020      	str	r0, [r4, #0]
 800108c:	6061      	str	r1, [r4, #4]
 800108e:	60a2      	str	r2, [r4, #8]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	7323      	strb	r3, [r4, #12]
    	HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001094:	4877      	ldr	r0, [pc, #476]	; (8001274 <main+0x27c>)
 8001096:	f7ff f85b 	bl	8000150 <strlen>
 800109a:	4603      	mov	r3, r0
 800109c:	b29a      	uxth	r2, r3
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	4974      	ldr	r1, [pc, #464]	; (8001274 <main+0x27c>)
 80010a4:	4875      	ldr	r0, [pc, #468]	; (800127c <main+0x284>)
 80010a6:	f002 fcd8 	bl	8003a5a <HAL_UART_Transmit>
    	HAL_Delay(2000);
 80010aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010ae:	f000 ffb1 	bl	8002014 <HAL_Delay>
  sprintf(TxData, "AT+CIPMUX=0\r\n");
 80010b2:	4a70      	ldr	r2, [pc, #448]	; (8001274 <main+0x27c>)
 80010b4:	4b73      	ldr	r3, [pc, #460]	; (8001284 <main+0x28c>)
 80010b6:	4614      	mov	r4, r2
 80010b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80010ba:	6020      	str	r0, [r4, #0]
 80010bc:	6061      	str	r1, [r4, #4]
 80010be:	60a2      	str	r2, [r4, #8]
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	81a3      	strh	r3, [r4, #12]
  	  	HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 80010c4:	486b      	ldr	r0, [pc, #428]	; (8001274 <main+0x27c>)
 80010c6:	f7ff f843 	bl	8000150 <strlen>
 80010ca:	4603      	mov	r3, r0
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d2:	4968      	ldr	r1, [pc, #416]	; (8001274 <main+0x27c>)
 80010d4:	4869      	ldr	r0, [pc, #420]	; (800127c <main+0x284>)
 80010d6:	f002 fcc0 	bl	8003a5a <HAL_UART_Transmit>
    	HAL_Delay(2000);
 80010da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010de:	f000 ff99 	bl	8002014 <HAL_Delay>
  sprintf(TxData, "AT+CSTT=\"zap.vivo.com.br\",\"vivo\",\"vivo\"\r\n");
 80010e2:	4b64      	ldr	r3, [pc, #400]	; (8001274 <main+0x27c>)
 80010e4:	4a68      	ldr	r2, [pc, #416]	; (8001288 <main+0x290>)
 80010e6:	4614      	mov	r4, r2
 80010e8:	469c      	mov	ip, r3
 80010ea:	f104 0e20 	add.w	lr, r4, #32
 80010ee:	4665      	mov	r5, ip
 80010f0:	4626      	mov	r6, r4
 80010f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010f4:	6028      	str	r0, [r5, #0]
 80010f6:	6069      	str	r1, [r5, #4]
 80010f8:	60aa      	str	r2, [r5, #8]
 80010fa:	60eb      	str	r3, [r5, #12]
 80010fc:	3410      	adds	r4, #16
 80010fe:	f10c 0c10 	add.w	ip, ip, #16
 8001102:	4574      	cmp	r4, lr
 8001104:	d1f3      	bne.n	80010ee <main+0xf6>
 8001106:	4662      	mov	r2, ip
 8001108:	4623      	mov	r3, r4
 800110a:	cb03      	ldmia	r3!, {r0, r1}
 800110c:	6010      	str	r0, [r2, #0]
 800110e:	6051      	str	r1, [r2, #4]
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	8113      	strh	r3, [r2, #8]
        HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001114:	4857      	ldr	r0, [pc, #348]	; (8001274 <main+0x27c>)
 8001116:	f7ff f81b 	bl	8000150 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	4954      	ldr	r1, [pc, #336]	; (8001274 <main+0x27c>)
 8001124:	4855      	ldr	r0, [pc, #340]	; (800127c <main+0x284>)
 8001126:	f002 fc98 	bl	8003a5a <HAL_UART_Transmit>
        HAL_Delay(5000);
 800112a:	f241 3088 	movw	r0, #5000	; 0x1388
 800112e:	f000 ff71 	bl	8002014 <HAL_Delay>
  sprintf(TxData, "AT+CIICR\r\n");
 8001132:	4a50      	ldr	r2, [pc, #320]	; (8001274 <main+0x27c>)
 8001134:	4b55      	ldr	r3, [pc, #340]	; (800128c <main+0x294>)
 8001136:	cb03      	ldmia	r3!, {r0, r1}
 8001138:	6010      	str	r0, [r2, #0]
 800113a:	6051      	str	r1, [r2, #4]
 800113c:	8819      	ldrh	r1, [r3, #0]
 800113e:	789b      	ldrb	r3, [r3, #2]
 8001140:	8111      	strh	r1, [r2, #8]
 8001142:	7293      	strb	r3, [r2, #10]
        HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001144:	484b      	ldr	r0, [pc, #300]	; (8001274 <main+0x27c>)
 8001146:	f7ff f803 	bl	8000150 <strlen>
 800114a:	4603      	mov	r3, r0
 800114c:	b29a      	uxth	r2, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	4948      	ldr	r1, [pc, #288]	; (8001274 <main+0x27c>)
 8001154:	4849      	ldr	r0, [pc, #292]	; (800127c <main+0x284>)
 8001156:	f002 fc80 	bl	8003a5a <HAL_UART_Transmit>
        HAL_Delay(2000);
 800115a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800115e:	f000 ff59 	bl	8002014 <HAL_Delay>
  sprintf(TxData, "AT+CIFSR\r\n");
 8001162:	4a44      	ldr	r2, [pc, #272]	; (8001274 <main+0x27c>)
 8001164:	4b4a      	ldr	r3, [pc, #296]	; (8001290 <main+0x298>)
 8001166:	cb03      	ldmia	r3!, {r0, r1}
 8001168:	6010      	str	r0, [r2, #0]
 800116a:	6051      	str	r1, [r2, #4]
 800116c:	8819      	ldrh	r1, [r3, #0]
 800116e:	789b      	ldrb	r3, [r3, #2]
 8001170:	8111      	strh	r1, [r2, #8]
 8001172:	7293      	strb	r3, [r2, #10]
        HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001174:	483f      	ldr	r0, [pc, #252]	; (8001274 <main+0x27c>)
 8001176:	f7fe ffeb 	bl	8000150 <strlen>
 800117a:	4603      	mov	r3, r0
 800117c:	b29a      	uxth	r2, r3
 800117e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001182:	493c      	ldr	r1, [pc, #240]	; (8001274 <main+0x27c>)
 8001184:	483d      	ldr	r0, [pc, #244]	; (800127c <main+0x284>)
 8001186:	f002 fc68 	bl	8003a5a <HAL_UART_Transmit>
        HAL_Delay(2000);
 800118a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800118e:	f000 ff41 	bl	8002014 <HAL_Delay>
  sprintf(TxData, "AT+CIPSHUT\r\n");
 8001192:	4a38      	ldr	r2, [pc, #224]	; (8001274 <main+0x27c>)
 8001194:	4b3f      	ldr	r3, [pc, #252]	; (8001294 <main+0x29c>)
 8001196:	4614      	mov	r4, r2
 8001198:	cb07      	ldmia	r3!, {r0, r1, r2}
 800119a:	6020      	str	r0, [r4, #0]
 800119c:	6061      	str	r1, [r4, #4]
 800119e:	60a2      	str	r2, [r4, #8]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	7323      	strb	r3, [r4, #12]
        HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 80011a4:	4833      	ldr	r0, [pc, #204]	; (8001274 <main+0x27c>)
 80011a6:	f7fe ffd3 	bl	8000150 <strlen>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b2:	4930      	ldr	r1, [pc, #192]	; (8001274 <main+0x27c>)
 80011b4:	4831      	ldr	r0, [pc, #196]	; (800127c <main+0x284>)
 80011b6:	f002 fc50 	bl	8003a5a <HAL_UART_Transmit>
        HAL_Delay(2000);
 80011ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011be:	f000 ff29 	bl	8002014 <HAL_Delay>

  sprintf(TxData, "AT+CIPSTART=\"TCP\",\"industrial.api.ubidots.com\",\"80\"\r\n");
 80011c2:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <main+0x27c>)
 80011c4:	4a34      	ldr	r2, [pc, #208]	; (8001298 <main+0x2a0>)
 80011c6:	4614      	mov	r4, r2
 80011c8:	469c      	mov	ip, r3
 80011ca:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80011ce:	4665      	mov	r5, ip
 80011d0:	4626      	mov	r6, r4
 80011d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011d4:	6028      	str	r0, [r5, #0]
 80011d6:	6069      	str	r1, [r5, #4]
 80011d8:	60aa      	str	r2, [r5, #8]
 80011da:	60eb      	str	r3, [r5, #12]
 80011dc:	3410      	adds	r4, #16
 80011de:	f10c 0c10 	add.w	ip, ip, #16
 80011e2:	4574      	cmp	r4, lr
 80011e4:	d1f3      	bne.n	80011ce <main+0x1d6>
 80011e6:	4663      	mov	r3, ip
 80011e8:	4622      	mov	r2, r4
 80011ea:	6810      	ldr	r0, [r2, #0]
 80011ec:	6018      	str	r0, [r3, #0]
 80011ee:	8892      	ldrh	r2, [r2, #4]
 80011f0:	809a      	strh	r2, [r3, #4]
        HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 80011f2:	4820      	ldr	r0, [pc, #128]	; (8001274 <main+0x27c>)
 80011f4:	f7fe ffac 	bl	8000150 <strlen>
 80011f8:	4603      	mov	r3, r0
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001200:	491c      	ldr	r1, [pc, #112]	; (8001274 <main+0x27c>)
 8001202:	481e      	ldr	r0, [pc, #120]	; (800127c <main+0x284>)
 8001204:	f002 fc29 	bl	8003a5a <HAL_UART_Transmit>
        HAL_Delay(10000);
 8001208:	f242 7010 	movw	r0, #10000	; 0x2710
 800120c:	f000 ff02 	bl	8002014 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  currentVMAX = -999999;
 8001210:	4a22      	ldr	r2, [pc, #136]	; (800129c <main+0x2a4>)
 8001212:	a413      	add	r4, pc, #76	; (adr r4, 8001260 <main+0x268>)
 8001214:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001218:	e9c2 3400 	strd	r3, r4, [r2]
	  currentVMIN = 999999;
 800121c:	4a20      	ldr	r2, [pc, #128]	; (80012a0 <main+0x2a8>)
 800121e:	a412      	add	r4, pc, #72	; (adr r4, 8001268 <main+0x270>)
 8001220:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001224:	e9c2 3400 	strd	r3, r4, [r2]
	  voltageVMAX = -999999;
 8001228:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <main+0x2ac>)
 800122a:	a40d      	add	r4, pc, #52	; (adr r4, 8001260 <main+0x268>)
 800122c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001230:	e9c2 3400 	strd	r3, r4, [r2]
	  voltageVMIN = 999999;
 8001234:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <main+0x2b0>)
 8001236:	a40c      	add	r4, pc, #48	; (adr r4, 8001268 <main+0x270>)
 8001238:	e9d4 3400 	ldrd	r3, r4, [r4]
 800123c:	e9c2 3400 	strd	r3, r4, [r2]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, onOff);
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <main+0x2b4>)
 8001242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800124e:	4808      	ldr	r0, [pc, #32]	; (8001270 <main+0x278>)
 8001250:	f001 fc66 	bl	8002b20 <HAL_GPIO_WritePin>

	for (i = 0; i < 100; i++) {
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <main+0x2b8>)
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	e0f0      	b.n	800143e <main+0x446>
 800125c:	f3af 8000 	nop.w
 8001260:	00000000 	.word	0x00000000
 8001264:	c12e847e 	.word	0xc12e847e
 8001268:	00000000 	.word	0x00000000
 800126c:	412e847e 	.word	0x412e847e
 8001270:	40010800 	.word	0x40010800
 8001274:	20000480 	.word	0x20000480
 8001278:	08006248 	.word	0x08006248
 800127c:	20000400 	.word	0x20000400
 8001280:	08006258 	.word	0x08006258
 8001284:	08006268 	.word	0x08006268
 8001288:	08006278 	.word	0x08006278
 800128c:	080062a4 	.word	0x080062a4
 8001290:	080062b0 	.word	0x080062b0
 8001294:	080062bc 	.word	0x080062bc
 8001298:	080062cc 	.word	0x080062cc
 800129c:	200003f0 	.word	0x200003f0
 80012a0:	20000708 	.word	0x20000708
 80012a4:	200003c0 	.word	0x200003c0
 80012a8:	20000700 	.word	0x20000700
 80012ac:	20000220 	.word	0x20000220
 80012b0:	200003c8 	.word	0x200003c8

	//Corrente
		HAL_ADC_Start(&hadc1);
 80012b4:	48a6      	ldr	r0, [pc, #664]	; (8001550 <main+0x558>)
 80012b6:	f000 ffa7 	bl	8002208 <HAL_ADC_Start>
		rawCurrentInput = HAL_ADC_GetValue(&hadc1);
 80012ba:	48a5      	ldr	r0, [pc, #660]	; (8001550 <main+0x558>)
 80012bc:	f001 f852 	bl	8002364 <HAL_ADC_GetValue>
 80012c0:	4602      	mov	r2, r0
 80012c2:	4ba4      	ldr	r3, [pc, #656]	; (8001554 <main+0x55c>)
 80012c4:	601a      	str	r2, [r3, #0]
		currentV = ((double)rawCurrentInput/4096)*3.3;
 80012c6:	4ba3      	ldr	r3, [pc, #652]	; (8001554 <main+0x55c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f88a 	bl	80003e4 <__aeabi_ui2d>
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	4ba0      	ldr	r3, [pc, #640]	; (8001558 <main+0x560>)
 80012d6:	f7ff fa29 	bl	800072c <__aeabi_ddiv>
 80012da:	4603      	mov	r3, r0
 80012dc:	460c      	mov	r4, r1
 80012de:	4618      	mov	r0, r3
 80012e0:	4621      	mov	r1, r4
 80012e2:	a391      	add	r3, pc, #580	; (adr r3, 8001528 <main+0x530>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7ff f8f6 	bl	80004d8 <__aeabi_dmul>
 80012ec:	4603      	mov	r3, r0
 80012ee:	460c      	mov	r4, r1
 80012f0:	4a9a      	ldr	r2, [pc, #616]	; (800155c <main+0x564>)
 80012f2:	e9c2 3400 	strd	r3, r4, [r2]

		if (currentVMAX < currentV) {
 80012f6:	4b9a      	ldr	r3, [pc, #616]	; (8001560 <main+0x568>)
 80012f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012fc:	4b97      	ldr	r3, [pc, #604]	; (800155c <main+0x564>)
 80012fe:	cb18      	ldmia	r3, {r3, r4}
 8001300:	461a      	mov	r2, r3
 8001302:	4623      	mov	r3, r4
 8001304:	f7ff fb5a 	bl	80009bc <__aeabi_dcmplt>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d004      	beq.n	8001318 <main+0x320>
			currentVMAX = currentV;
 800130e:	4b93      	ldr	r3, [pc, #588]	; (800155c <main+0x564>)
 8001310:	cb18      	ldmia	r3, {r3, r4}
 8001312:	4a93      	ldr	r2, [pc, #588]	; (8001560 <main+0x568>)
 8001314:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if (currentVMIN > currentV) {
 8001318:	4b92      	ldr	r3, [pc, #584]	; (8001564 <main+0x56c>)
 800131a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800131e:	4b8f      	ldr	r3, [pc, #572]	; (800155c <main+0x564>)
 8001320:	cb18      	ldmia	r3, {r3, r4}
 8001322:	461a      	mov	r2, r3
 8001324:	4623      	mov	r3, r4
 8001326:	f7ff fb67 	bl	80009f8 <__aeabi_dcmpgt>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d004      	beq.n	800133a <main+0x342>
			currentVMIN = currentV;
 8001330:	4b8a      	ldr	r3, [pc, #552]	; (800155c <main+0x564>)
 8001332:	cb18      	ldmia	r3, {r3, r4}
 8001334:	4a8b      	ldr	r2, [pc, #556]	; (8001564 <main+0x56c>)
 8001336:	e9c2 3400 	strd	r3, r4, [r2]
		}

		currentV = ((double)rawCurrentInput/4096)*3.3;
 800133a:	4b86      	ldr	r3, [pc, #536]	; (8001554 <main+0x55c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f850 	bl	80003e4 <__aeabi_ui2d>
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	4b83      	ldr	r3, [pc, #524]	; (8001558 <main+0x560>)
 800134a:	f7ff f9ef 	bl	800072c <__aeabi_ddiv>
 800134e:	4603      	mov	r3, r0
 8001350:	460c      	mov	r4, r1
 8001352:	4618      	mov	r0, r3
 8001354:	4621      	mov	r1, r4
 8001356:	a374      	add	r3, pc, #464	; (adr r3, 8001528 <main+0x530>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	f7ff f8bc 	bl	80004d8 <__aeabi_dmul>
 8001360:	4603      	mov	r3, r0
 8001362:	460c      	mov	r4, r1
 8001364:	4a7d      	ldr	r2, [pc, #500]	; (800155c <main+0x564>)
 8001366:	e9c2 3400 	strd	r3, r4, [r2]

		if (currentVMAX < currentV) {
 800136a:	4b7d      	ldr	r3, [pc, #500]	; (8001560 <main+0x568>)
 800136c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001370:	4b7a      	ldr	r3, [pc, #488]	; (800155c <main+0x564>)
 8001372:	cb18      	ldmia	r3, {r3, r4}
 8001374:	461a      	mov	r2, r3
 8001376:	4623      	mov	r3, r4
 8001378:	f7ff fb20 	bl	80009bc <__aeabi_dcmplt>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <main+0x394>
			currentVMAX = currentV;
 8001382:	4b76      	ldr	r3, [pc, #472]	; (800155c <main+0x564>)
 8001384:	cb18      	ldmia	r3, {r3, r4}
 8001386:	4a76      	ldr	r2, [pc, #472]	; (8001560 <main+0x568>)
 8001388:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if (currentVMIN > currentV) {
 800138c:	4b75      	ldr	r3, [pc, #468]	; (8001564 <main+0x56c>)
 800138e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001392:	4b72      	ldr	r3, [pc, #456]	; (800155c <main+0x564>)
 8001394:	cb18      	ldmia	r3, {r3, r4}
 8001396:	461a      	mov	r2, r3
 8001398:	4623      	mov	r3, r4
 800139a:	f7ff fb2d 	bl	80009f8 <__aeabi_dcmpgt>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d004      	beq.n	80013ae <main+0x3b6>
			currentVMIN = currentV;
 80013a4:	4b6d      	ldr	r3, [pc, #436]	; (800155c <main+0x564>)
 80013a6:	cb18      	ldmia	r3, {r3, r4}
 80013a8:	4a6e      	ldr	r2, [pc, #440]	; (8001564 <main+0x56c>)
 80013aa:	e9c2 3400 	strd	r3, r4, [r2]
		}

	//Tensão

		HAL_ADC_Start(&hadc2);
 80013ae:	486e      	ldr	r0, [pc, #440]	; (8001568 <main+0x570>)
 80013b0:	f000 ff2a 	bl	8002208 <HAL_ADC_Start>
		rawVoltageInput = HAL_ADC_GetValue(&hadc2);
 80013b4:	486c      	ldr	r0, [pc, #432]	; (8001568 <main+0x570>)
 80013b6:	f000 ffd5 	bl	8002364 <HAL_ADC_GetValue>
 80013ba:	4602      	mov	r2, r0
 80013bc:	4b6b      	ldr	r3, [pc, #428]	; (800156c <main+0x574>)
 80013be:	601a      	str	r2, [r3, #0]
		voltageV = ((double)rawVoltageInput/4096)*3.3;
 80013c0:	4b6a      	ldr	r3, [pc, #424]	; (800156c <main+0x574>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f80d 	bl	80003e4 <__aeabi_ui2d>
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	4b62      	ldr	r3, [pc, #392]	; (8001558 <main+0x560>)
 80013d0:	f7ff f9ac 	bl	800072c <__aeabi_ddiv>
 80013d4:	4603      	mov	r3, r0
 80013d6:	460c      	mov	r4, r1
 80013d8:	4618      	mov	r0, r3
 80013da:	4621      	mov	r1, r4
 80013dc:	a352      	add	r3, pc, #328	; (adr r3, 8001528 <main+0x530>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	f7ff f879 	bl	80004d8 <__aeabi_dmul>
 80013e6:	4603      	mov	r3, r0
 80013e8:	460c      	mov	r4, r1
 80013ea:	4a61      	ldr	r2, [pc, #388]	; (8001570 <main+0x578>)
 80013ec:	e9c2 3400 	strd	r3, r4, [r2]

		if (voltageVMAX < voltageV) {
 80013f0:	4b60      	ldr	r3, [pc, #384]	; (8001574 <main+0x57c>)
 80013f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013f6:	4b5e      	ldr	r3, [pc, #376]	; (8001570 <main+0x578>)
 80013f8:	cb18      	ldmia	r3, {r3, r4}
 80013fa:	461a      	mov	r2, r3
 80013fc:	4623      	mov	r3, r4
 80013fe:	f7ff fadd 	bl	80009bc <__aeabi_dcmplt>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d004      	beq.n	8001412 <main+0x41a>
			voltageVMAX = voltageV;
 8001408:	4b59      	ldr	r3, [pc, #356]	; (8001570 <main+0x578>)
 800140a:	cb18      	ldmia	r3, {r3, r4}
 800140c:	4a59      	ldr	r2, [pc, #356]	; (8001574 <main+0x57c>)
 800140e:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if (voltageVMIN > voltageV) {
 8001412:	4b59      	ldr	r3, [pc, #356]	; (8001578 <main+0x580>)
 8001414:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001418:	4b55      	ldr	r3, [pc, #340]	; (8001570 <main+0x578>)
 800141a:	cb18      	ldmia	r3, {r3, r4}
 800141c:	461a      	mov	r2, r3
 800141e:	4623      	mov	r3, r4
 8001420:	f7ff faea 	bl	80009f8 <__aeabi_dcmpgt>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d004      	beq.n	8001434 <main+0x43c>
			voltageVMIN = voltageV;
 800142a:	4b51      	ldr	r3, [pc, #324]	; (8001570 <main+0x578>)
 800142c:	cb18      	ldmia	r3, {r3, r4}
 800142e:	4a52      	ldr	r2, [pc, #328]	; (8001578 <main+0x580>)
 8001430:	e9c2 3400 	strd	r3, r4, [r2]
	for (i = 0; i < 100; i++) {
 8001434:	4b51      	ldr	r3, [pc, #324]	; (800157c <main+0x584>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	4a50      	ldr	r2, [pc, #320]	; (800157c <main+0x584>)
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	4b4f      	ldr	r3, [pc, #316]	; (800157c <main+0x584>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b63      	cmp	r3, #99	; 0x63
 8001444:	f77f af36 	ble.w	80012b4 <main+0x2bc>
		}

	}

	currentVRMS = (currentVMAX - currentVMIN) / (2 * sqrt(2));
 8001448:	4b45      	ldr	r3, [pc, #276]	; (8001560 <main+0x568>)
 800144a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800144e:	4b45      	ldr	r3, [pc, #276]	; (8001564 <main+0x56c>)
 8001450:	cb18      	ldmia	r3, {r3, r4}
 8001452:	461a      	mov	r2, r3
 8001454:	4623      	mov	r3, r4
 8001456:	f7fe fe87 	bl	8000168 <__aeabi_dsub>
 800145a:	4603      	mov	r3, r0
 800145c:	460c      	mov	r4, r1
 800145e:	4618      	mov	r0, r3
 8001460:	4621      	mov	r1, r4
 8001462:	a333      	add	r3, pc, #204	; (adr r3, 8001530 <main+0x538>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7ff f960 	bl	800072c <__aeabi_ddiv>
 800146c:	4603      	mov	r3, r0
 800146e:	460c      	mov	r4, r1
 8001470:	4a43      	ldr	r2, [pc, #268]	; (8001580 <main+0x588>)
 8001472:	e9c2 3400 	strd	r3, r4, [r2]
	voltageVRMS = (voltageVMAX - voltageVMIN) / (2 * sqrt(2));
 8001476:	4b3f      	ldr	r3, [pc, #252]	; (8001574 <main+0x57c>)
 8001478:	e9d3 0100 	ldrd	r0, r1, [r3]
 800147c:	4b3e      	ldr	r3, [pc, #248]	; (8001578 <main+0x580>)
 800147e:	cb18      	ldmia	r3, {r3, r4}
 8001480:	461a      	mov	r2, r3
 8001482:	4623      	mov	r3, r4
 8001484:	f7fe fe70 	bl	8000168 <__aeabi_dsub>
 8001488:	4603      	mov	r3, r0
 800148a:	460c      	mov	r4, r1
 800148c:	4618      	mov	r0, r3
 800148e:	4621      	mov	r1, r4
 8001490:	a327      	add	r3, pc, #156	; (adr r3, 8001530 <main+0x538>)
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	f7ff f949 	bl	800072c <__aeabi_ddiv>
 800149a:	4603      	mov	r3, r0
 800149c:	460c      	mov	r4, r1
 800149e:	4a39      	ldr	r2, [pc, #228]	; (8001584 <main+0x58c>)
 80014a0:	e9c2 3400 	strd	r3, r4, [r2]

	currentOutput = previousCurrentOutput + 0.1 * ((currentVRMS * 3.565592)-previousCurrentOutput);      //currentVRMS * (4.020);
 80014a4:	4b36      	ldr	r3, [pc, #216]	; (8001580 <main+0x588>)
 80014a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014aa:	a323      	add	r3, pc, #140	; (adr r3, 8001538 <main+0x540>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f812 	bl	80004d8 <__aeabi_dmul>
 80014b4:	4603      	mov	r3, r0
 80014b6:	460c      	mov	r4, r1
 80014b8:	4618      	mov	r0, r3
 80014ba:	4621      	mov	r1, r4
 80014bc:	4b32      	ldr	r3, [pc, #200]	; (8001588 <main+0x590>)
 80014be:	cb18      	ldmia	r3, {r3, r4}
 80014c0:	461a      	mov	r2, r3
 80014c2:	4623      	mov	r3, r4
 80014c4:	f7fe fe50 	bl	8000168 <__aeabi_dsub>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4618      	mov	r0, r3
 80014ce:	4621      	mov	r1, r4
 80014d0:	a31b      	add	r3, pc, #108	; (adr r3, 8001540 <main+0x548>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	f7fe ffff 	bl	80004d8 <__aeabi_dmul>
 80014da:	4603      	mov	r3, r0
 80014dc:	460c      	mov	r4, r1
 80014de:	4618      	mov	r0, r3
 80014e0:	4621      	mov	r1, r4
 80014e2:	4b29      	ldr	r3, [pc, #164]	; (8001588 <main+0x590>)
 80014e4:	cb18      	ldmia	r3, {r3, r4}
 80014e6:	461a      	mov	r2, r3
 80014e8:	4623      	mov	r3, r4
 80014ea:	f7fe fe3f 	bl	800016c <__adddf3>
 80014ee:	4603      	mov	r3, r0
 80014f0:	460c      	mov	r4, r1
 80014f2:	4a26      	ldr	r2, [pc, #152]	; (800158c <main+0x594>)
 80014f4:	e9c2 3400 	strd	r3, r4, [r2]
	voltageOutput = previousVoltageOutput + 0.1 * ((voltageVRMS * 705.555555)-previousVoltageOutput);
 80014f8:	4b22      	ldr	r3, [pc, #136]	; (8001584 <main+0x58c>)
 80014fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014fe:	a312      	add	r3, pc, #72	; (adr r3, 8001548 <main+0x550>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	f7fe ffe8 	bl	80004d8 <__aeabi_dmul>
 8001508:	4603      	mov	r3, r0
 800150a:	460c      	mov	r4, r1
 800150c:	4618      	mov	r0, r3
 800150e:	4621      	mov	r1, r4
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <main+0x598>)
 8001512:	cb18      	ldmia	r3, {r3, r4}
 8001514:	461a      	mov	r2, r3
 8001516:	4623      	mov	r3, r4
 8001518:	f7fe fe26 	bl	8000168 <__aeabi_dsub>
 800151c:	4603      	mov	r3, r0
 800151e:	460c      	mov	r4, r1
 8001520:	4618      	mov	r0, r3
 8001522:	4621      	mov	r1, r4
 8001524:	e036      	b.n	8001594 <main+0x59c>
 8001526:	bf00      	nop
 8001528:	66666666 	.word	0x66666666
 800152c:	400a6666 	.word	0x400a6666
 8001530:	667f3bcd 	.word	0x667f3bcd
 8001534:	4006a09e 	.word	0x4006a09e
 8001538:	193708ab 	.word	0x193708ab
 800153c:	400c8655 	.word	0x400c8655
 8001540:	9999999a 	.word	0x9999999a
 8001544:	3fb99999 	.word	0x3fb99999
 8001548:	c6d1e109 	.word	0xc6d1e109
 800154c:	40860c71 	.word	0x40860c71
 8001550:	2000038c 	.word	0x2000038c
 8001554:	200006fc 	.word	0x200006fc
 8001558:	40b00000 	.word	0x40b00000
 800155c:	200003f8 	.word	0x200003f8
 8001560:	200003f0 	.word	0x200003f0
 8001564:	20000708 	.word	0x20000708
 8001568:	20000234 	.word	0x20000234
 800156c:	20000230 	.word	0x20000230
 8001570:	20000448 	.word	0x20000448
 8001574:	200003c0 	.word	0x200003c0
 8001578:	20000700 	.word	0x20000700
 800157c:	200003c8 	.word	0x200003c8
 8001580:	20000548 	.word	0x20000548
 8001584:	20000570 	.word	0x20000570
 8001588:	20000210 	.word	0x20000210
 800158c:	20000550 	.word	0x20000550
 8001590:	20000208 	.word	0x20000208
 8001594:	a358      	add	r3, pc, #352	; (adr r3, 80016f8 <main+0x700>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	f7fe ff9d 	bl	80004d8 <__aeabi_dmul>
 800159e:	4603      	mov	r3, r0
 80015a0:	460c      	mov	r4, r1
 80015a2:	4618      	mov	r0, r3
 80015a4:	4621      	mov	r1, r4
 80015a6:	4b56      	ldr	r3, [pc, #344]	; (8001700 <main+0x708>)
 80015a8:	cb18      	ldmia	r3, {r3, r4}
 80015aa:	461a      	mov	r2, r3
 80015ac:	4623      	mov	r3, r4
 80015ae:	f7fe fddd 	bl	800016c <__adddf3>
 80015b2:	4603      	mov	r3, r0
 80015b4:	460c      	mov	r4, r1
 80015b6:	4a53      	ldr	r2, [pc, #332]	; (8001704 <main+0x70c>)
 80015b8:	e9c2 3400 	strd	r3, r4, [r2]
	powerOutput = previousPowerOutput + 0.1 * ((voltageOutput * currentOutput)-previousPowerOutput);
 80015bc:	4b51      	ldr	r3, [pc, #324]	; (8001704 <main+0x70c>)
 80015be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015c2:	4b51      	ldr	r3, [pc, #324]	; (8001708 <main+0x710>)
 80015c4:	cb18      	ldmia	r3, {r3, r4}
 80015c6:	461a      	mov	r2, r3
 80015c8:	4623      	mov	r3, r4
 80015ca:	f7fe ff85 	bl	80004d8 <__aeabi_dmul>
 80015ce:	4603      	mov	r3, r0
 80015d0:	460c      	mov	r4, r1
 80015d2:	4618      	mov	r0, r3
 80015d4:	4621      	mov	r1, r4
 80015d6:	4b4d      	ldr	r3, [pc, #308]	; (800170c <main+0x714>)
 80015d8:	cb18      	ldmia	r3, {r3, r4}
 80015da:	461a      	mov	r2, r3
 80015dc:	4623      	mov	r3, r4
 80015de:	f7fe fdc3 	bl	8000168 <__aeabi_dsub>
 80015e2:	4603      	mov	r3, r0
 80015e4:	460c      	mov	r4, r1
 80015e6:	4618      	mov	r0, r3
 80015e8:	4621      	mov	r1, r4
 80015ea:	a343      	add	r3, pc, #268	; (adr r3, 80016f8 <main+0x700>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	f7fe ff72 	bl	80004d8 <__aeabi_dmul>
 80015f4:	4603      	mov	r3, r0
 80015f6:	460c      	mov	r4, r1
 80015f8:	4618      	mov	r0, r3
 80015fa:	4621      	mov	r1, r4
 80015fc:	4b43      	ldr	r3, [pc, #268]	; (800170c <main+0x714>)
 80015fe:	cb18      	ldmia	r3, {r3, r4}
 8001600:	461a      	mov	r2, r3
 8001602:	4623      	mov	r3, r4
 8001604:	f7fe fdb2 	bl	800016c <__adddf3>
 8001608:	4603      	mov	r3, r0
 800160a:	460c      	mov	r4, r1
 800160c:	4a40      	ldr	r2, [pc, #256]	; (8001710 <main+0x718>)
 800160e:	e9c2 3400 	strd	r3, r4, [r2]

	previousVoltageOutput = voltageOutput;
 8001612:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <main+0x70c>)
 8001614:	cb18      	ldmia	r3, {r3, r4}
 8001616:	4a3a      	ldr	r2, [pc, #232]	; (8001700 <main+0x708>)
 8001618:	e9c2 3400 	strd	r3, r4, [r2]
	previousCurrentOutput = currentOutput;
 800161c:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <main+0x710>)
 800161e:	cb18      	ldmia	r3, {r3, r4}
 8001620:	4a3c      	ldr	r2, [pc, #240]	; (8001714 <main+0x71c>)
 8001622:	e9c2 3400 	strd	r3, r4, [r2]
	previousPowerOutput = powerOutput;
 8001626:	4b3a      	ldr	r3, [pc, #232]	; (8001710 <main+0x718>)
 8001628:	cb18      	ldmia	r3, {r3, r4}
 800162a:	4a38      	ldr	r2, [pc, #224]	; (800170c <main+0x714>)
 800162c:	e9c2 3400 	strd	r3, r4, [r2]

	currentOutputMilis = currentOutput * 1000;
 8001630:	4b35      	ldr	r3, [pc, #212]	; (8001708 <main+0x710>)
 8001632:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	4b37      	ldr	r3, [pc, #220]	; (8001718 <main+0x720>)
 800163c:	f7fe ff4c 	bl	80004d8 <__aeabi_dmul>
 8001640:	4603      	mov	r3, r0
 8001642:	460c      	mov	r4, r1
 8001644:	4a35      	ldr	r2, [pc, #212]	; (800171c <main+0x724>)
 8001646:	e9c2 3400 	strd	r3, r4, [r2]

	snprintf(volString, 50, "%1f", voltageOutput);
 800164a:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <main+0x70c>)
 800164c:	cb18      	ldmia	r3, {r3, r4}
 800164e:	e9cd 3400 	strd	r3, r4, [sp]
 8001652:	4a33      	ldr	r2, [pc, #204]	; (8001720 <main+0x728>)
 8001654:	2132      	movs	r1, #50	; 0x32
 8001656:	4833      	ldr	r0, [pc, #204]	; (8001724 <main+0x72c>)
 8001658:	f003 f89c 	bl	8004794 <sniprintf>
	sprintf(temString, "Tensao:%sV", volString);
 800165c:	4a31      	ldr	r2, [pc, #196]	; (8001724 <main+0x72c>)
 800165e:	4932      	ldr	r1, [pc, #200]	; (8001728 <main+0x730>)
 8001660:	4832      	ldr	r0, [pc, #200]	; (800172c <main+0x734>)
 8001662:	f003 f8cb 	bl	80047fc <siprintf>
	ST7789_WriteString(0, 129, temString, Font_11x18, WHITE, BLACK);
 8001666:	4b32      	ldr	r3, [pc, #200]	; (8001730 <main+0x738>)
 8001668:	2200      	movs	r2, #0
 800166a:	9202      	str	r2, [sp, #8]
 800166c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001670:	9201      	str	r2, [sp, #4]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	9200      	str	r2, [sp, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a2c      	ldr	r2, [pc, #176]	; (800172c <main+0x734>)
 800167a:	2181      	movs	r1, #129	; 0x81
 800167c:	2000      	movs	r0, #0
 800167e:	f7ff fc69 	bl	8000f54 <ST7789_WriteString>

	snprintf(curString, 50, "%1f", currentOutputMilis);
 8001682:	4b26      	ldr	r3, [pc, #152]	; (800171c <main+0x724>)
 8001684:	cb18      	ldmia	r3, {r3, r4}
 8001686:	e9cd 3400 	strd	r3, r4, [sp]
 800168a:	4a25      	ldr	r2, [pc, #148]	; (8001720 <main+0x728>)
 800168c:	2132      	movs	r1, #50	; 0x32
 800168e:	4829      	ldr	r0, [pc, #164]	; (8001734 <main+0x73c>)
 8001690:	f003 f880 	bl	8004794 <sniprintf>
	sprintf(temString, "Corrente:%smA", curString);
 8001694:	4a27      	ldr	r2, [pc, #156]	; (8001734 <main+0x73c>)
 8001696:	4928      	ldr	r1, [pc, #160]	; (8001738 <main+0x740>)
 8001698:	4824      	ldr	r0, [pc, #144]	; (800172c <main+0x734>)
 800169a:	f003 f8af 	bl	80047fc <siprintf>
	ST7789_WriteString(0, 111, temString, Font_11x18, WHITE, BLACK);
 800169e:	4b24      	ldr	r3, [pc, #144]	; (8001730 <main+0x738>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	9202      	str	r2, [sp, #8]
 80016a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a8:	9201      	str	r2, [sp, #4]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	9200      	str	r2, [sp, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a1e      	ldr	r2, [pc, #120]	; (800172c <main+0x734>)
 80016b2:	216f      	movs	r1, #111	; 0x6f
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff fc4d 	bl	8000f54 <ST7789_WriteString>

	snprintf(powString, 50, "%1f", powerOutput);
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <main+0x718>)
 80016bc:	cb18      	ldmia	r3, {r3, r4}
 80016be:	e9cd 3400 	strd	r3, r4, [sp]
 80016c2:	4a17      	ldr	r2, [pc, #92]	; (8001720 <main+0x728>)
 80016c4:	2132      	movs	r1, #50	; 0x32
 80016c6:	481d      	ldr	r0, [pc, #116]	; (800173c <main+0x744>)
 80016c8:	f003 f864 	bl	8004794 <sniprintf>
	sprintf(temString, "Potencia:%sW", powString);
 80016cc:	4a1b      	ldr	r2, [pc, #108]	; (800173c <main+0x744>)
 80016ce:	491c      	ldr	r1, [pc, #112]	; (8001740 <main+0x748>)
 80016d0:	4816      	ldr	r0, [pc, #88]	; (800172c <main+0x734>)
 80016d2:	f003 f893 	bl	80047fc <siprintf>
	ST7789_WriteString(0, 93, temString, Font_11x18, WHITE, BLACK);
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <main+0x738>)
 80016d8:	2200      	movs	r2, #0
 80016da:	9202      	str	r2, [sp, #8]
 80016dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016e0:	9201      	str	r2, [sp, #4]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	9200      	str	r2, [sp, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a10      	ldr	r2, [pc, #64]	; (800172c <main+0x734>)
 80016ea:	215d      	movs	r1, #93	; 0x5d
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff fc31 	bl	8000f54 <ST7789_WriteString>

	Communicate();
 80016f2:	f000 f9bd 	bl	8001a70 <Communicate>
  {
 80016f6:	e58b      	b.n	8001210 <main+0x218>
 80016f8:	9999999a 	.word	0x9999999a
 80016fc:	3fb99999 	.word	0x3fb99999
 8001700:	20000208 	.word	0x20000208
 8001704:	20000360 	.word	0x20000360
 8001708:	20000550 	.word	0x20000550
 800170c:	20000218 	.word	0x20000218
 8001710:	20000458 	.word	0x20000458
 8001714:	20000210 	.word	0x20000210
 8001718:	408f4000 	.word	0x408f4000
 800171c:	20000450 	.word	0x20000450
 8001720:	08006304 	.word	0x08006304
 8001724:	200003cc 	.word	0x200003cc
 8001728:	08006308 	.word	0x08006308
 800172c:	20000710 	.word	0x20000710
 8001730:	20000000 	.word	0x20000000
 8001734:	20000460 	.word	0x20000460
 8001738:	08006314 	.word	0x08006314
 800173c:	2000036c 	.word	0x2000036c
 8001740:	08006324 	.word	0x08006324

08001744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b094      	sub	sp, #80	; 0x50
 8001748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800174e:	2228      	movs	r2, #40	; 0x28
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f002 fbc7 	bl	8003ee6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001774:	2302      	movs	r3, #2
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001778:	2301      	movs	r3, #1
 800177a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800177c:	2310      	movs	r3, #16
 800177e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001780:	2302      	movs	r3, #2
 8001782:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001784:	2300      	movs	r3, #0
 8001786:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001788:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800178c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001792:	4618      	mov	r0, r3
 8001794:	f001 f9dc 	bl	8002b50 <HAL_RCC_OscConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800179e:	f000 fa1b 	bl	8001bd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a2:	230f      	movs	r3, #15
 80017a4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a6:	2302      	movs	r3, #2
 80017a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2102      	movs	r1, #2
 80017be:	4618      	mov	r0, r3
 80017c0:	f001 fc46 	bl	8003050 <HAL_RCC_ClockConfig>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80017ca:	f000 fa05 	bl	8001bd8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017ce:	2302      	movs	r3, #2
 80017d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80017d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80017d6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	4618      	mov	r0, r3
 80017dc:	f001 fdd4 	bl	8003388 <HAL_RCCEx_PeriphCLKConfig>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80017e6:	f000 f9f7 	bl	8001bd8 <Error_Handler>
  }
}
 80017ea:	bf00      	nop
 80017ec:	3750      	adds	r7, #80	; 0x50
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <MX_ADC1_Init+0x74>)
 8001806:	4a19      	ldr	r2, [pc, #100]	; (800186c <MX_ADC1_Init+0x78>)
 8001808:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <MX_ADC1_Init+0x74>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001810:	4b15      	ldr	r3, [pc, #84]	; (8001868 <MX_ADC1_Init+0x74>)
 8001812:	2200      	movs	r2, #0
 8001814:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001816:	4b14      	ldr	r3, [pc, #80]	; (8001868 <MX_ADC1_Init+0x74>)
 8001818:	2200      	movs	r2, #0
 800181a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <MX_ADC1_Init+0x74>)
 800181e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001822:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001824:	4b10      	ldr	r3, [pc, #64]	; (8001868 <MX_ADC1_Init+0x74>)
 8001826:	2200      	movs	r2, #0
 8001828:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <MX_ADC1_Init+0x74>)
 800182c:	2201      	movs	r2, #1
 800182e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001830:	480d      	ldr	r0, [pc, #52]	; (8001868 <MX_ADC1_Init+0x74>)
 8001832:	f000 fc11 	bl	8002058 <HAL_ADC_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800183c:	f000 f9cc 	bl	8001bd8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001840:	2300      	movs	r3, #0
 8001842:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001844:	2301      	movs	r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	4619      	mov	r1, r3
 8001850:	4805      	ldr	r0, [pc, #20]	; (8001868 <MX_ADC1_Init+0x74>)
 8001852:	f000 fd93 	bl	800237c <HAL_ADC_ConfigChannel>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800185c:	f000 f9bc 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	2000038c 	.word	0x2000038c
 800186c:	40012400 	.word	0x40012400

08001870 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001880:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <MX_ADC2_Init+0x74>)
 8001882:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <MX_ADC2_Init+0x78>)
 8001884:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <MX_ADC2_Init+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800188c:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <MX_ADC2_Init+0x74>)
 800188e:	2200      	movs	r2, #0
 8001890:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001892:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <MX_ADC2_Init+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <MX_ADC2_Init+0x74>)
 800189a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800189e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_ADC2_Init+0x74>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <MX_ADC2_Init+0x74>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018ac:	480d      	ldr	r0, [pc, #52]	; (80018e4 <MX_ADC2_Init+0x74>)
 80018ae:	f000 fbd3 	bl	8002058 <HAL_ADC_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80018b8:	f000 f98e 	bl	8001bd8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018bc:	2301      	movs	r3, #1
 80018be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	4619      	mov	r1, r3
 80018cc:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_ADC2_Init+0x74>)
 80018ce:	f000 fd55 	bl	800237c <HAL_ADC_ConfigChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80018d8:	f000 f97e 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000234 	.word	0x20000234
 80018e8:	40012800 	.word	0x40012800

080018ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <MX_SPI1_Init+0x64>)
 80018f2:	4a18      	ldr	r2, [pc, #96]	; (8001954 <MX_SPI1_Init+0x68>)
 80018f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <MX_SPI1_Init+0x64>)
 80018f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018fe:	4b14      	ldr	r3, [pc, #80]	; (8001950 <MX_SPI1_Init+0x64>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <MX_SPI1_Init+0x64>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <MX_SPI1_Init+0x64>)
 800190c:	2202      	movs	r2, #2
 800190e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <MX_SPI1_Init+0x64>)
 8001912:	2200      	movs	r2, #0
 8001914:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <MX_SPI1_Init+0x64>)
 8001918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800191c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <MX_SPI1_Init+0x64>)
 8001920:	2208      	movs	r2, #8
 8001922:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001924:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <MX_SPI1_Init+0x64>)
 8001926:	2200      	movs	r2, #0
 8001928:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <MX_SPI1_Init+0x64>)
 800192c:	2200      	movs	r2, #0
 800192e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001930:	4b07      	ldr	r3, [pc, #28]	; (8001950 <MX_SPI1_Init+0x64>)
 8001932:	2200      	movs	r2, #0
 8001934:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <MX_SPI1_Init+0x64>)
 8001938:	220a      	movs	r2, #10
 800193a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800193c:	4804      	ldr	r0, [pc, #16]	; (8001950 <MX_SPI1_Init+0x64>)
 800193e:	f001 fdd9 	bl	80034f4 <HAL_SPI_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001948:	f000 f946 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000578 	.word	0x20000578
 8001954:	40013000 	.word	0x40013000

08001958 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <MX_USART1_UART_Init+0x50>)
 8001960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001964:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001990:	f002 f816 	bl	80039c0 <HAL_UART_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800199a:	f000 f91d 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000400 	.word	0x20000400
 80019a8:	40013800 	.word	0x40013800

080019ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c0:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <MX_GPIO_Init+0xb8>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4a27      	ldr	r2, [pc, #156]	; (8001a64 <MX_GPIO_Init+0xb8>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	6193      	str	r3, [r2, #24]
 80019cc:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <MX_GPIO_Init+0xb8>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d8:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <MX_GPIO_Init+0xb8>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a21      	ldr	r2, [pc, #132]	; (8001a64 <MX_GPIO_Init+0xb8>)
 80019de:	f043 0308 	orr.w	r3, r3, #8
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <MX_GPIO_Init+0xb8>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0308 	and.w	r3, r3, #8
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7789_CS_Pin|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	f641 1110 	movw	r1, #6416	; 0x1910
 80019f6:	481c      	ldr	r0, [pc, #112]	; (8001a68 <MX_GPIO_Init+0xbc>)
 80019f8:	f001 f892 	bl	8002b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7789_DC_Pin|ST7789_RST_Pin|GPIO_PIN_3, GPIO_PIN_RESET);
 80019fc:	2200      	movs	r2, #0
 80019fe:	210b      	movs	r1, #11
 8001a00:	481a      	ldr	r0, [pc, #104]	; (8001a6c <MX_GPIO_Init+0xc0>)
 8001a02:	f001 f88d 	bl	8002b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST7789_CS_Pin PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = ST7789_CS_Pin|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001a06:	f641 1310 	movw	r3, #6416	; 0x1910
 8001a0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2302      	movs	r3, #2
 8001a16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a18:	f107 0308 	add.w	r3, r7, #8
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4812      	ldr	r0, [pc, #72]	; (8001a68 <MX_GPIO_Init+0xbc>)
 8001a20:	f000 ff24 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7789_DC_Pin ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_RST_Pin;
 8001a24:	2303      	movs	r3, #3
 8001a26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2302      	movs	r3, #2
 8001a32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a34:	f107 0308 	add.w	r3, r7, #8
 8001a38:	4619      	mov	r1, r3
 8001a3a:	480c      	ldr	r0, [pc, #48]	; (8001a6c <MX_GPIO_Init+0xc0>)
 8001a3c:	f000 ff16 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a40:	2308      	movs	r3, #8
 8001a42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a44:	2301      	movs	r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a50:	f107 0308 	add.w	r3, r7, #8
 8001a54:	4619      	mov	r1, r3
 8001a56:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_GPIO_Init+0xc0>)
 8001a58:	f000 ff08 	bl	800286c <HAL_GPIO_Init>

}
 8001a5c:	bf00      	nop
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010800 	.word	0x40010800
 8001a6c:	40010c00 	.word	0x40010c00

08001a70 <Communicate>:

/* USER CODE BEGIN 4 */
void Communicate() {
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af02      	add	r7, sp, #8

	char *token;
	char *lastToken = NULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
	char *secondLastToken = NULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]

	sprintf(TxData, "AT+CIPSEND\r\n");
 8001a7e:	4a4b      	ldr	r2, [pc, #300]	; (8001bac <Communicate+0x13c>)
 8001a80:	4b4b      	ldr	r3, [pc, #300]	; (8001bb0 <Communicate+0x140>)
 8001a82:	4614      	mov	r4, r2
 8001a84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001a86:	6020      	str	r0, [r4, #0]
 8001a88:	6061      	str	r1, [r4, #4]
 8001a8a:	60a2      	str	r2, [r4, #8]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	7323      	strb	r3, [r4, #12]
	       HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001a90:	4846      	ldr	r0, [pc, #280]	; (8001bac <Communicate+0x13c>)
 8001a92:	f7fe fb5d 	bl	8000150 <strlen>
 8001a96:	4603      	mov	r3, r0
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9e:	4943      	ldr	r1, [pc, #268]	; (8001bac <Communicate+0x13c>)
 8001aa0:	4844      	ldr	r0, [pc, #272]	; (8001bb4 <Communicate+0x144>)
 8001aa2:	f001 ffda 	bl	8003a5a <HAL_UART_Transmit>
	       HAL_Delay(700);
 8001aa6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001aaa:	f000 fab3 	bl	8002014 <HAL_Delay>

	sprintf(TxData, "POST /api/v1.6/devices/"device_tag" HTTP/1.1\r\nHost: industrial.api.ubidots.com\r\nContent-Type: application/json\r\nX-Auth-Token: "ubidots_token"\r\nContent-Length: %d\r\n\r\n{\"voltage\":%s,\"current\":%s,\"power\":%s}\x1A", 32 + strlen(volString) + strlen(curString) + strlen(powString), volString, curString, powString);
 8001aae:	4842      	ldr	r0, [pc, #264]	; (8001bb8 <Communicate+0x148>)
 8001ab0:	f7fe fb4e 	bl	8000150 <strlen>
 8001ab4:	4604      	mov	r4, r0
 8001ab6:	4841      	ldr	r0, [pc, #260]	; (8001bbc <Communicate+0x14c>)
 8001ab8:	f7fe fb4a 	bl	8000150 <strlen>
 8001abc:	4603      	mov	r3, r0
 8001abe:	441c      	add	r4, r3
 8001ac0:	483f      	ldr	r0, [pc, #252]	; (8001bc0 <Communicate+0x150>)
 8001ac2:	f7fe fb45 	bl	8000150 <strlen>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4423      	add	r3, r4
 8001aca:	f103 0220 	add.w	r2, r3, #32
 8001ace:	4b3c      	ldr	r3, [pc, #240]	; (8001bc0 <Communicate+0x150>)
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	4b3a      	ldr	r3, [pc, #232]	; (8001bbc <Communicate+0x14c>)
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	4b38      	ldr	r3, [pc, #224]	; (8001bb8 <Communicate+0x148>)
 8001ad8:	493a      	ldr	r1, [pc, #232]	; (8001bc4 <Communicate+0x154>)
 8001ada:	4834      	ldr	r0, [pc, #208]	; (8001bac <Communicate+0x13c>)
 8001adc:	f002 fe8e 	bl	80047fc <siprintf>
	       HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001ae0:	4832      	ldr	r0, [pc, #200]	; (8001bac <Communicate+0x13c>)
 8001ae2:	f7fe fb35 	bl	8000150 <strlen>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aee:	492f      	ldr	r1, [pc, #188]	; (8001bac <Communicate+0x13c>)
 8001af0:	4830      	ldr	r0, [pc, #192]	; (8001bb4 <Communicate+0x144>)
 8001af2:	f001 ffb2 	bl	8003a5a <HAL_UART_Transmit>
	       HAL_Delay(3700);
 8001af6:	f640 6074 	movw	r0, #3700	; 0xe74
 8001afa:	f000 fa8b 	bl	8002014 <HAL_Delay>

	sprintf(TxData, "AT+CIPSEND\r\n");
 8001afe:	4a2b      	ldr	r2, [pc, #172]	; (8001bac <Communicate+0x13c>)
 8001b00:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <Communicate+0x140>)
 8001b02:	4614      	mov	r4, r2
 8001b04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001b06:	6020      	str	r0, [r4, #0]
 8001b08:	6061      	str	r1, [r4, #4]
 8001b0a:	60a2      	str	r2, [r4, #8]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	7323      	strb	r3, [r4, #12]
	       HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001b10:	4826      	ldr	r0, [pc, #152]	; (8001bac <Communicate+0x13c>)
 8001b12:	f7fe fb1d 	bl	8000150 <strlen>
 8001b16:	4603      	mov	r3, r0
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1e:	4923      	ldr	r1, [pc, #140]	; (8001bac <Communicate+0x13c>)
 8001b20:	4824      	ldr	r0, [pc, #144]	; (8001bb4 <Communicate+0x144>)
 8001b22:	f001 ff9a 	bl	8003a5a <HAL_UART_Transmit>
	       HAL_Delay(700);
 8001b26:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001b2a:	f000 fa73 	bl	8002014 <HAL_Delay>

	sprintf(TxData, "GET /api/v1.6/devices/"device_tag"/onOff/lv HTTP/1.1\r\nHost: industrial.api.ubidots.com\r\nX-Auth-Token: "ubidots_token"\r\n\r\n\x1A");
 8001b2e:	4a1f      	ldr	r2, [pc, #124]	; (8001bac <Communicate+0x13c>)
 8001b30:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <Communicate+0x158>)
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	2388      	movs	r3, #136	; 0x88
 8001b38:	461a      	mov	r2, r3
 8001b3a:	f002 f9c9 	bl	8003ed0 <memcpy>
	       HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001b3e:	481b      	ldr	r0, [pc, #108]	; (8001bac <Communicate+0x13c>)
 8001b40:	f7fe fb06 	bl	8000150 <strlen>
 8001b44:	4603      	mov	r3, r0
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4c:	4917      	ldr	r1, [pc, #92]	; (8001bac <Communicate+0x13c>)
 8001b4e:	4819      	ldr	r0, [pc, #100]	; (8001bb4 <Communicate+0x144>)
 8001b50:	f001 ff83 	bl	8003a5a <HAL_UART_Transmit>
	       HAL_Delay(100);
 8001b54:	2064      	movs	r0, #100	; 0x64
 8001b56:	f000 fa5d 	bl	8002014 <HAL_Delay>

	       HAL_UART_Receive(&huart1, (uint8_t*)RxData, 900, 6500);
 8001b5a:	f641 1364 	movw	r3, #6500	; 0x1964
 8001b5e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001b62:	491a      	ldr	r1, [pc, #104]	; (8001bcc <Communicate+0x15c>)
 8001b64:	4813      	ldr	r0, [pc, #76]	; (8001bb4 <Communicate+0x144>)
 8001b66:	f002 f80a 	bl	8003b7e <HAL_UART_Receive>

	       token = strtok(RxData, "\r\n");
 8001b6a:	4919      	ldr	r1, [pc, #100]	; (8001bd0 <Communicate+0x160>)
 8001b6c:	4817      	ldr	r0, [pc, #92]	; (8001bcc <Communicate+0x15c>)
 8001b6e:	f002 fe65 	bl	800483c <strtok>
 8001b72:	60f8      	str	r0, [r7, #12]
	           while (token != NULL) {
 8001b74:	e00c      	b.n	8001b90 <Communicate+0x120>
	               if (strlen(token) > 0) {
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <Communicate+0x116>
	                   secondLastToken = lastToken;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	607b      	str	r3, [r7, #4]
	                   lastToken = token;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	60bb      	str	r3, [r7, #8]
	               }
	               token = strtok(NULL, "\r\n");
 8001b86:	4912      	ldr	r1, [pc, #72]	; (8001bd0 <Communicate+0x160>)
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f002 fe57 	bl	800483c <strtok>
 8001b8e:	60f8      	str	r0, [r7, #12]
	           while (token != NULL) {
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ef      	bne.n	8001b76 <Communicate+0x106>
	           }
	           onOff = atoi(secondLastToken);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f002 f96c 	bl	8003e74 <atoi>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	b21a      	sxth	r2, r3
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <Communicate+0x164>)
 8001ba2:	801a      	strh	r2, [r3, #0]

}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd90      	pop	{r4, r7, pc}
 8001bac:	20000480 	.word	0x20000480
 8001bb0:	08006334 	.word	0x08006334
 8001bb4:	20000400 	.word	0x20000400
 8001bb8:	200003cc 	.word	0x200003cc
 8001bbc:	20000460 	.word	0x20000460
 8001bc0:	2000036c 	.word	0x2000036c
 8001bc4:	08006344 	.word	0x08006344
 8001bc8:	08006420 	.word	0x08006420
 8001bcc:	200005d0 	.word	0x200005d0
 8001bd0:	080064a8 	.word	0x080064a8
 8001bd4:	20000220 	.word	0x20000220

08001bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bdc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bde:	e7fe      	b.n	8001bde <Error_Handler+0x6>

08001be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <HAL_MspInit+0x5c>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <HAL_MspInit+0x5c>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6193      	str	r3, [r2, #24]
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_MspInit+0x5c>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <HAL_MspInit+0x5c>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	4a0e      	ldr	r2, [pc, #56]	; (8001c3c <HAL_MspInit+0x5c>)
 8001c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c08:	61d3      	str	r3, [r2, #28]
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <HAL_MspInit+0x5c>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_MspInit+0x60>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <HAL_MspInit+0x60>)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010000 	.word	0x40010000

08001c44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0318 	add.w	r3, r7, #24
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a28      	ldr	r2, [pc, #160]	; (8001d00 <HAL_ADC_MspInit+0xbc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d122      	bne.n	8001caa <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <HAL_ADC_MspInit+0xc0>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a26      	ldr	r2, [pc, #152]	; (8001d04 <HAL_ADC_MspInit+0xc0>)
 8001c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c6e:	6193      	str	r3, [r2, #24]
 8001c70:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <HAL_ADC_MspInit+0xc0>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7c:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <HAL_ADC_MspInit+0xc0>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4a20      	ldr	r2, [pc, #128]	; (8001d04 <HAL_ADC_MspInit+0xc0>)
 8001c82:	f043 0304 	orr.w	r3, r3, #4
 8001c86:	6193      	str	r3, [r2, #24]
 8001c88:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <HAL_ADC_MspInit+0xc0>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c94:	2301      	movs	r3, #1
 8001c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 0318 	add.w	r3, r7, #24
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4819      	ldr	r0, [pc, #100]	; (8001d08 <HAL_ADC_MspInit+0xc4>)
 8001ca4:	f000 fde2 	bl	800286c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ca8:	e026      	b.n	8001cf8 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a17      	ldr	r2, [pc, #92]	; (8001d0c <HAL_ADC_MspInit+0xc8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d121      	bne.n	8001cf8 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001cb4:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <HAL_ADC_MspInit+0xc0>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <HAL_ADC_MspInit+0xc0>)
 8001cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cbe:	6193      	str	r3, [r2, #24]
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <HAL_ADC_MspInit+0xc0>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <HAL_ADC_MspInit+0xc0>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	4a0c      	ldr	r2, [pc, #48]	; (8001d04 <HAL_ADC_MspInit+0xc0>)
 8001cd2:	f043 0304 	orr.w	r3, r3, #4
 8001cd6:	6193      	str	r3, [r2, #24]
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_ADC_MspInit+0xc0>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cec:	f107 0318 	add.w	r3, r7, #24
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <HAL_ADC_MspInit+0xc4>)
 8001cf4:	f000 fdba 	bl	800286c <HAL_GPIO_Init>
}
 8001cf8:	bf00      	nop
 8001cfa:	3728      	adds	r7, #40	; 0x28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40012400 	.word	0x40012400
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40010800 	.word	0x40010800
 8001d0c:	40012800 	.word	0x40012800

08001d10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1b      	ldr	r2, [pc, #108]	; (8001d98 <HAL_SPI_MspInit+0x88>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d12f      	bne.n	8001d90 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d30:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <HAL_SPI_MspInit+0x8c>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <HAL_SPI_MspInit+0x8c>)
 8001d36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <HAL_SPI_MspInit+0x8c>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_SPI_MspInit+0x8c>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a13      	ldr	r2, [pc, #76]	; (8001d9c <HAL_SPI_MspInit+0x8c>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_SPI_MspInit+0x8c>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d60:	23a0      	movs	r3, #160	; 0xa0
 8001d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	4619      	mov	r1, r3
 8001d72:	480b      	ldr	r0, [pc, #44]	; (8001da0 <HAL_SPI_MspInit+0x90>)
 8001d74:	f000 fd7a 	bl	800286c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d78:	2340      	movs	r3, #64	; 0x40
 8001d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d84:	f107 0310 	add.w	r3, r7, #16
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4805      	ldr	r0, [pc, #20]	; (8001da0 <HAL_SPI_MspInit+0x90>)
 8001d8c:	f000 fd6e 	bl	800286c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d90:	bf00      	nop
 8001d92:	3720      	adds	r7, #32
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40013000 	.word	0x40013000
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010800 	.word	0x40010800

08001da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <HAL_UART_MspInit+0x8c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d131      	bne.n	8001e28 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <HAL_UART_MspInit+0x90>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a1a      	ldr	r2, [pc, #104]	; (8001e34 <HAL_UART_MspInit+0x90>)
 8001dca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <HAL_UART_MspInit+0x90>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ddc:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <HAL_UART_MspInit+0x90>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	4a14      	ldr	r2, [pc, #80]	; (8001e34 <HAL_UART_MspInit+0x90>)
 8001de2:	f043 0304 	orr.w	r3, r3, #4
 8001de6:	6193      	str	r3, [r2, #24]
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_UART_MspInit+0x90>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001df8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e02:	f107 0310 	add.w	r3, r7, #16
 8001e06:	4619      	mov	r1, r3
 8001e08:	480b      	ldr	r0, [pc, #44]	; (8001e38 <HAL_UART_MspInit+0x94>)
 8001e0a:	f000 fd2f 	bl	800286c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	4619      	mov	r1, r3
 8001e22:	4805      	ldr	r0, [pc, #20]	; (8001e38 <HAL_UART_MspInit+0x94>)
 8001e24:	f000 fd22 	bl	800286c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e28:	bf00      	nop
 8001e2a:	3720      	adds	r7, #32
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40013800 	.word	0x40013800
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40010800 	.word	0x40010800

08001e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <NMI_Handler+0x4>

08001e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <HardFault_Handler+0x4>

08001e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <MemManage_Handler+0x4>

08001e4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e52:	e7fe      	b.n	8001e52 <BusFault_Handler+0x4>

08001e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <UsageFault_Handler+0x4>

08001e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e82:	f000 f8ab 	bl	8001fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e94:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <_sbrk+0x5c>)
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <_sbrk+0x60>)
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d102      	bne.n	8001eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <_sbrk+0x64>)
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <_sbrk+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d207      	bcs.n	8001ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ebc:	f001 ffde 	bl	8003e7c <__errno>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	230c      	movs	r3, #12
 8001ec4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eca:	e009      	b.n	8001ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <_sbrk+0x64>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <_sbrk+0x64>)
 8001edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ede:	68fb      	ldr	r3, [r7, #12]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20005000 	.word	0x20005000
 8001eec:	00000400 	.word	0x00000400
 8001ef0:	20000224 	.word	0x20000224
 8001ef4:	20000738 	.word	0x20000738

08001ef8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f04:	480c      	ldr	r0, [pc, #48]	; (8001f38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f06:	490d      	ldr	r1, [pc, #52]	; (8001f3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f08:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f0c:	e002      	b.n	8001f14 <LoopCopyDataInit>

08001f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f12:	3304      	adds	r3, #4

08001f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f18:	d3f9      	bcc.n	8001f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f1c:	4c0a      	ldr	r4, [pc, #40]	; (8001f48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f20:	e001      	b.n	8001f26 <LoopFillZerobss>

08001f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f24:	3204      	adds	r2, #4

08001f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f28:	d3fb      	bcc.n	8001f22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f2a:	f7ff ffe5 	bl	8001ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f2e:	f001 ffab 	bl	8003e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f32:	f7ff f861 	bl	8000ff8 <main>
  bx lr
 8001f36:	4770      	bx	lr
  ldr r0, =_sdata
 8001f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f3c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001f40:	08007498 	.word	0x08007498
  ldr r2, =_sbss
 8001f44:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001f48:	20000738 	.word	0x20000738

08001f4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f4c:	e7fe      	b.n	8001f4c <ADC1_2_IRQHandler>
	...

08001f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <HAL_Init+0x28>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <HAL_Init+0x28>)
 8001f5a:	f043 0310 	orr.w	r3, r3, #16
 8001f5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f60:	2003      	movs	r0, #3
 8001f62:	f000 fc4f 	bl	8002804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f000 f808 	bl	8001f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f6c:	f7ff fe38 	bl	8001be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40022000 	.word	0x40022000

08001f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_InitTick+0x54>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_InitTick+0x58>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 fc59 	bl	8002852 <HAL_SYSTICK_Config>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00e      	b.n	8001fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b0f      	cmp	r3, #15
 8001fae:	d80a      	bhi.n	8001fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb8:	f000 fc2f 	bl	800281a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fbc:	4a06      	ldr	r2, [pc, #24]	; (8001fd8 <HAL_InitTick+0x5c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e000      	b.n	8001fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000008 	.word	0x20000008
 8001fd4:	20000010 	.word	0x20000010
 8001fd8:	2000000c 	.word	0x2000000c

08001fdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_IncTick+0x1c>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <HAL_IncTick+0x20>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	4a03      	ldr	r2, [pc, #12]	; (8001ffc <HAL_IncTick+0x20>)
 8001fee:	6013      	str	r3, [r2, #0]
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	20000010 	.word	0x20000010
 8001ffc:	20000730 	.word	0x20000730

08002000 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return uwTick;
 8002004:	4b02      	ldr	r3, [pc, #8]	; (8002010 <HAL_GetTick+0x10>)
 8002006:	681b      	ldr	r3, [r3, #0]
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	20000730 	.word	0x20000730

08002014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800201c:	f7ff fff0 	bl	8002000 <HAL_GetTick>
 8002020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	d005      	beq.n	800203a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_Delay+0x40>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4413      	add	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800203a:	bf00      	nop
 800203c:	f7ff ffe0 	bl	8002000 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	429a      	cmp	r2, r3
 800204a:	d8f7      	bhi.n	800203c <HAL_Delay+0x28>
  {
  }
}
 800204c:	bf00      	nop
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000010 	.word	0x20000010

08002058 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0be      	b.n	80021f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	2b00      	cmp	r3, #0
 8002086:	d109      	bne.n	800209c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff fdd4 	bl	8001c44 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fabf 	bl	8002620 <ADC_ConversionStop_Disable>
 80020a2:	4603      	mov	r3, r0
 80020a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 8099 	bne.w	80021e6 <HAL_ADC_Init+0x18e>
 80020b4:	7dfb      	ldrb	r3, [r7, #23]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f040 8095 	bne.w	80021e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020c4:	f023 0302 	bic.w	r3, r3, #2
 80020c8:	f043 0202 	orr.w	r2, r3, #2
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	7b1b      	ldrb	r3, [r3, #12]
 80020de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020f0:	d003      	beq.n	80020fa <HAL_ADC_Init+0xa2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d102      	bne.n	8002100 <HAL_ADC_Init+0xa8>
 80020fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020fe:	e000      	b.n	8002102 <HAL_ADC_Init+0xaa>
 8002100:	2300      	movs	r3, #0
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7d1b      	ldrb	r3, [r3, #20]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d119      	bne.n	8002144 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7b1b      	ldrb	r3, [r3, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d109      	bne.n	800212c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	3b01      	subs	r3, #1
 800211e:	035a      	lsls	r2, r3, #13
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	e00b      	b.n	8002144 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002130:	f043 0220 	orr.w	r2, r3, #32
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	f043 0201 	orr.w	r2, r3, #1
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	430a      	orrs	r2, r1
 8002156:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	4b28      	ldr	r3, [pc, #160]	; (8002200 <HAL_ADC_Init+0x1a8>)
 8002160:	4013      	ands	r3, r2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	430b      	orrs	r3, r1
 800216a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002174:	d003      	beq.n	800217e <HAL_ADC_Init+0x126>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d104      	bne.n	8002188 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	3b01      	subs	r3, #1
 8002184:	051b      	lsls	r3, r3, #20
 8002186:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	430a      	orrs	r2, r1
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_ADC_Init+0x1ac>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d10b      	bne.n	80021c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	f023 0303 	bic.w	r3, r3, #3
 80021ba:	f043 0201 	orr.w	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021c2:	e018      	b.n	80021f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	f023 0312 	bic.w	r3, r3, #18
 80021cc:	f043 0210 	orr.w	r2, r3, #16
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	f043 0201 	orr.w	r2, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021e4:	e007      	b.n	80021f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	f043 0210 	orr.w	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	ffe1f7fd 	.word	0xffe1f7fd
 8002204:	ff1f0efe 	.word	0xff1f0efe

08002208 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_ADC_Start+0x1a>
 800221e:	2302      	movs	r3, #2
 8002220:	e098      	b.n	8002354 <HAL_ADC_Start+0x14c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f99e 	bl	800256c <ADC_Enable>
 8002230:	4603      	mov	r3, r0
 8002232:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f040 8087 	bne.w	800234a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a41      	ldr	r2, [pc, #260]	; (800235c <HAL_ADC_Start+0x154>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d105      	bne.n	8002266 <HAL_ADC_Start+0x5e>
 800225a:	4b41      	ldr	r3, [pc, #260]	; (8002360 <HAL_ADC_Start+0x158>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d115      	bne.n	8002292 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227c:	2b00      	cmp	r3, #0
 800227e:	d026      	beq.n	80022ce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002284:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002288:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002290:	e01d      	b.n	80022ce <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a2f      	ldr	r2, [pc, #188]	; (8002360 <HAL_ADC_Start+0x158>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d004      	beq.n	80022b2 <HAL_ADC_Start+0xaa>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a2b      	ldr	r2, [pc, #172]	; (800235c <HAL_ADC_Start+0x154>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d10d      	bne.n	80022ce <HAL_ADC_Start+0xc6>
 80022b2:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <HAL_ADC_Start+0x158>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d007      	beq.n	80022ce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d006      	beq.n	80022e8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	f023 0206 	bic.w	r2, r3, #6
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80022e6:	e002      	b.n	80022ee <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f06f 0202 	mvn.w	r2, #2
 80022fe:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800230a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800230e:	d113      	bne.n	8002338 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002314:	4a11      	ldr	r2, [pc, #68]	; (800235c <HAL_ADC_Start+0x154>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d105      	bne.n	8002326 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_ADC_Start+0x158>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002322:	2b00      	cmp	r3, #0
 8002324:	d108      	bne.n	8002338 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	e00c      	b.n	8002352 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	e003      	b.n	8002352 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002352:	7bfb      	ldrb	r3, [r7, #15]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40012800 	.word	0x40012800
 8002360:	40012400 	.word	0x40012400

08002364 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_ADC_ConfigChannel+0x20>
 8002398:	2302      	movs	r3, #2
 800239a:	e0dc      	b.n	8002556 <HAL_ADC_ConfigChannel+0x1da>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b06      	cmp	r3, #6
 80023aa:	d81c      	bhi.n	80023e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	3b05      	subs	r3, #5
 80023be:	221f      	movs	r2, #31
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	4019      	ands	r1, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	3b05      	subs	r3, #5
 80023d8:	fa00 f203 	lsl.w	r2, r0, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	635a      	str	r2, [r3, #52]	; 0x34
 80023e4:	e03c      	b.n	8002460 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b0c      	cmp	r3, #12
 80023ec:	d81c      	bhi.n	8002428 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	3b23      	subs	r3, #35	; 0x23
 8002400:	221f      	movs	r2, #31
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	4019      	ands	r1, r3
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	3b23      	subs	r3, #35	; 0x23
 800241a:	fa00 f203 	lsl.w	r2, r0, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	631a      	str	r2, [r3, #48]	; 0x30
 8002426:	e01b      	b.n	8002460 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	3b41      	subs	r3, #65	; 0x41
 800243a:	221f      	movs	r2, #31
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	4019      	ands	r1, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	3b41      	subs	r3, #65	; 0x41
 8002454:	fa00 f203 	lsl.w	r2, r0, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b09      	cmp	r3, #9
 8002466:	d91c      	bls.n	80024a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68d9      	ldr	r1, [r3, #12]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	4613      	mov	r3, r2
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4413      	add	r3, r2
 8002478:	3b1e      	subs	r3, #30
 800247a:	2207      	movs	r2, #7
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	4019      	ands	r1, r3
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	6898      	ldr	r0, [r3, #8]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	3b1e      	subs	r3, #30
 8002494:	fa00 f203 	lsl.w	r2, r0, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	60da      	str	r2, [r3, #12]
 80024a0:	e019      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6919      	ldr	r1, [r3, #16]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	2207      	movs	r2, #7
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	4019      	ands	r1, r3
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	6898      	ldr	r0, [r3, #8]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	4613      	mov	r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4413      	add	r3, r2
 80024ca:	fa00 f203 	lsl.w	r2, r0, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b10      	cmp	r3, #16
 80024dc:	d003      	beq.n	80024e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024e2:	2b11      	cmp	r3, #17
 80024e4:	d132      	bne.n	800254c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a1d      	ldr	r2, [pc, #116]	; (8002560 <HAL_ADC_ConfigChannel+0x1e4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d125      	bne.n	800253c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d126      	bne.n	800254c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800250c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b10      	cmp	r3, #16
 8002514:	d11a      	bne.n	800254c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002516:	4b13      	ldr	r3, [pc, #76]	; (8002564 <HAL_ADC_ConfigChannel+0x1e8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a13      	ldr	r2, [pc, #76]	; (8002568 <HAL_ADC_ConfigChannel+0x1ec>)
 800251c:	fba2 2303 	umull	r2, r3, r2, r3
 8002520:	0c9a      	lsrs	r2, r3, #18
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800252c:	e002      	b.n	8002534 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	3b01      	subs	r3, #1
 8002532:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f9      	bne.n	800252e <HAL_ADC_ConfigChannel+0x1b2>
 800253a:	e007      	b.n	800254c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	f043 0220 	orr.w	r2, r3, #32
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	40012400 	.word	0x40012400
 8002564:	20000008 	.word	0x20000008
 8002568:	431bde83 	.word	0x431bde83

0800256c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b01      	cmp	r3, #1
 8002588:	d040      	beq.n	800260c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f042 0201 	orr.w	r2, r2, #1
 8002598:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800259a:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <ADC_Enable+0xac>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1f      	ldr	r2, [pc, #124]	; (800261c <ADC_Enable+0xb0>)
 80025a0:	fba2 2303 	umull	r2, r3, r2, r3
 80025a4:	0c9b      	lsrs	r3, r3, #18
 80025a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025a8:	e002      	b.n	80025b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f9      	bne.n	80025aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025b6:	f7ff fd23 	bl	8002000 <HAL_GetTick>
 80025ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025bc:	e01f      	b.n	80025fe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025be:	f7ff fd1f 	bl	8002000 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d918      	bls.n	80025fe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d011      	beq.n	80025fe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025de:	f043 0210 	orr.w	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	f043 0201 	orr.w	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e007      	b.n	800260e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b01      	cmp	r3, #1
 800260a:	d1d8      	bne.n	80025be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000008 	.word	0x20000008
 800261c:	431bde83 	.word	0x431bde83

08002620 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b01      	cmp	r3, #1
 8002638:	d12e      	bne.n	8002698 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0201 	bic.w	r2, r2, #1
 8002648:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800264a:	f7ff fcd9 	bl	8002000 <HAL_GetTick>
 800264e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002650:	e01b      	b.n	800268a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002652:	f7ff fcd5 	bl	8002000 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d914      	bls.n	800268a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d10d      	bne.n	800268a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002672:	f043 0210 	orr.w	r2, r3, #16
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	f043 0201 	orr.w	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e007      	b.n	800269a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d0dc      	beq.n	8002652 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026c0:	4013      	ands	r3, r2
 80026c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d6:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	60d3      	str	r3, [r2, #12]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <__NVIC_GetPriorityGrouping+0x18>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	f003 0307 	and.w	r3, r3, #7
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	6039      	str	r1, [r7, #0]
 8002712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	2b00      	cmp	r3, #0
 800271a:	db0a      	blt.n	8002732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	490c      	ldr	r1, [pc, #48]	; (8002754 <__NVIC_SetPriority+0x4c>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	0112      	lsls	r2, r2, #4
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	440b      	add	r3, r1
 800272c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002730:	e00a      	b.n	8002748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4908      	ldr	r1, [pc, #32]	; (8002758 <__NVIC_SetPriority+0x50>)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	3b04      	subs	r3, #4
 8002740:	0112      	lsls	r2, r2, #4
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	440b      	add	r3, r1
 8002746:	761a      	strb	r2, [r3, #24]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000e100 	.word	0xe000e100
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f1c3 0307 	rsb	r3, r3, #7
 8002776:	2b04      	cmp	r3, #4
 8002778:	bf28      	it	cs
 800277a:	2304      	movcs	r3, #4
 800277c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3304      	adds	r3, #4
 8002782:	2b06      	cmp	r3, #6
 8002784:	d902      	bls.n	800278c <NVIC_EncodePriority+0x30>
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3b03      	subs	r3, #3
 800278a:	e000      	b.n	800278e <NVIC_EncodePriority+0x32>
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	f04f 32ff 	mov.w	r2, #4294967295
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	401a      	ands	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a4:	f04f 31ff 	mov.w	r1, #4294967295
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	43d9      	mvns	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	4313      	orrs	r3, r2
         );
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3724      	adds	r7, #36	; 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d0:	d301      	bcc.n	80027d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00f      	b.n	80027f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <SysTick_Config+0x40>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027de:	210f      	movs	r1, #15
 80027e0:	f04f 30ff 	mov.w	r0, #4294967295
 80027e4:	f7ff ff90 	bl	8002708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <SysTick_Config+0x40>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ee:	4b04      	ldr	r3, [pc, #16]	; (8002800 <SysTick_Config+0x40>)
 80027f0:	2207      	movs	r2, #7
 80027f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	e000e010 	.word	0xe000e010

08002804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff49 	bl	80026a4 <__NVIC_SetPriorityGrouping>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800282c:	f7ff ff5e 	bl	80026ec <__NVIC_GetPriorityGrouping>
 8002830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	6978      	ldr	r0, [r7, #20]
 8002838:	f7ff ff90 	bl	800275c <NVIC_EncodePriority>
 800283c:	4602      	mov	r2, r0
 800283e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff5f 	bl	8002708 <__NVIC_SetPriority>
}
 800284a:	bf00      	nop
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff ffb0 	bl	80027c0 <SysTick_Config>
 8002860:	4603      	mov	r3, r0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800286c:	b480      	push	{r7}
 800286e:	b08b      	sub	sp, #44	; 0x2c
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002876:	2300      	movs	r3, #0
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800287a:	2300      	movs	r3, #0
 800287c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800287e:	e127      	b.n	8002ad0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002880:	2201      	movs	r2, #1
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	429a      	cmp	r2, r3
 800289a:	f040 8116 	bne.w	8002aca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b12      	cmp	r3, #18
 80028a4:	d034      	beq.n	8002910 <HAL_GPIO_Init+0xa4>
 80028a6:	2b12      	cmp	r3, #18
 80028a8:	d80d      	bhi.n	80028c6 <HAL_GPIO_Init+0x5a>
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d02b      	beq.n	8002906 <HAL_GPIO_Init+0x9a>
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d804      	bhi.n	80028bc <HAL_GPIO_Init+0x50>
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d031      	beq.n	800291a <HAL_GPIO_Init+0xae>
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d01c      	beq.n	80028f4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028ba:	e048      	b.n	800294e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d043      	beq.n	8002948 <HAL_GPIO_Init+0xdc>
 80028c0:	2b11      	cmp	r3, #17
 80028c2:	d01b      	beq.n	80028fc <HAL_GPIO_Init+0x90>
          break;
 80028c4:	e043      	b.n	800294e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028c6:	4a89      	ldr	r2, [pc, #548]	; (8002aec <HAL_GPIO_Init+0x280>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d026      	beq.n	800291a <HAL_GPIO_Init+0xae>
 80028cc:	4a87      	ldr	r2, [pc, #540]	; (8002aec <HAL_GPIO_Init+0x280>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d806      	bhi.n	80028e0 <HAL_GPIO_Init+0x74>
 80028d2:	4a87      	ldr	r2, [pc, #540]	; (8002af0 <HAL_GPIO_Init+0x284>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d020      	beq.n	800291a <HAL_GPIO_Init+0xae>
 80028d8:	4a86      	ldr	r2, [pc, #536]	; (8002af4 <HAL_GPIO_Init+0x288>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01d      	beq.n	800291a <HAL_GPIO_Init+0xae>
          break;
 80028de:	e036      	b.n	800294e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028e0:	4a85      	ldr	r2, [pc, #532]	; (8002af8 <HAL_GPIO_Init+0x28c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d019      	beq.n	800291a <HAL_GPIO_Init+0xae>
 80028e6:	4a85      	ldr	r2, [pc, #532]	; (8002afc <HAL_GPIO_Init+0x290>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d016      	beq.n	800291a <HAL_GPIO_Init+0xae>
 80028ec:	4a84      	ldr	r2, [pc, #528]	; (8002b00 <HAL_GPIO_Init+0x294>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d013      	beq.n	800291a <HAL_GPIO_Init+0xae>
          break;
 80028f2:	e02c      	b.n	800294e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	623b      	str	r3, [r7, #32]
          break;
 80028fa:	e028      	b.n	800294e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	3304      	adds	r3, #4
 8002902:	623b      	str	r3, [r7, #32]
          break;
 8002904:	e023      	b.n	800294e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	3308      	adds	r3, #8
 800290c:	623b      	str	r3, [r7, #32]
          break;
 800290e:	e01e      	b.n	800294e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	330c      	adds	r3, #12
 8002916:	623b      	str	r3, [r7, #32]
          break;
 8002918:	e019      	b.n	800294e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d102      	bne.n	8002928 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002922:	2304      	movs	r3, #4
 8002924:	623b      	str	r3, [r7, #32]
          break;
 8002926:	e012      	b.n	800294e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d105      	bne.n	800293c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002930:	2308      	movs	r3, #8
 8002932:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	611a      	str	r2, [r3, #16]
          break;
 800293a:	e008      	b.n	800294e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800293c:	2308      	movs	r3, #8
 800293e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	615a      	str	r2, [r3, #20]
          break;
 8002946:	e002      	b.n	800294e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002948:	2300      	movs	r3, #0
 800294a:	623b      	str	r3, [r7, #32]
          break;
 800294c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	2bff      	cmp	r3, #255	; 0xff
 8002952:	d801      	bhi.n	8002958 <HAL_GPIO_Init+0xec>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	e001      	b.n	800295c <HAL_GPIO_Init+0xf0>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3304      	adds	r3, #4
 800295c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	2bff      	cmp	r3, #255	; 0xff
 8002962:	d802      	bhi.n	800296a <HAL_GPIO_Init+0xfe>
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	e002      	b.n	8002970 <HAL_GPIO_Init+0x104>
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	3b08      	subs	r3, #8
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	210f      	movs	r1, #15
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	fa01 f303 	lsl.w	r3, r1, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	401a      	ands	r2, r3
 8002982:	6a39      	ldr	r1, [r7, #32]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	fa01 f303 	lsl.w	r3, r1, r3
 800298a:	431a      	orrs	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 8096 	beq.w	8002aca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800299e:	4b59      	ldr	r3, [pc, #356]	; (8002b04 <HAL_GPIO_Init+0x298>)
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	4a58      	ldr	r2, [pc, #352]	; (8002b04 <HAL_GPIO_Init+0x298>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6193      	str	r3, [r2, #24]
 80029aa:	4b56      	ldr	r3, [pc, #344]	; (8002b04 <HAL_GPIO_Init+0x298>)
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029b6:	4a54      	ldr	r2, [pc, #336]	; (8002b08 <HAL_GPIO_Init+0x29c>)
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	3302      	adds	r3, #2
 80029be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	220f      	movs	r2, #15
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4013      	ands	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a4b      	ldr	r2, [pc, #300]	; (8002b0c <HAL_GPIO_Init+0x2a0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_GPIO_Init+0x19e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4a      	ldr	r2, [pc, #296]	; (8002b10 <HAL_GPIO_Init+0x2a4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00d      	beq.n	8002a06 <HAL_GPIO_Init+0x19a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a49      	ldr	r2, [pc, #292]	; (8002b14 <HAL_GPIO_Init+0x2a8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d007      	beq.n	8002a02 <HAL_GPIO_Init+0x196>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a48      	ldr	r2, [pc, #288]	; (8002b18 <HAL_GPIO_Init+0x2ac>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d101      	bne.n	80029fe <HAL_GPIO_Init+0x192>
 80029fa:	2303      	movs	r3, #3
 80029fc:	e006      	b.n	8002a0c <HAL_GPIO_Init+0x1a0>
 80029fe:	2304      	movs	r3, #4
 8002a00:	e004      	b.n	8002a0c <HAL_GPIO_Init+0x1a0>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e002      	b.n	8002a0c <HAL_GPIO_Init+0x1a0>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_GPIO_Init+0x1a0>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0e:	f002 0203 	and.w	r2, r2, #3
 8002a12:	0092      	lsls	r2, r2, #2
 8002a14:	4093      	lsls	r3, r2
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a1c:	493a      	ldr	r1, [pc, #232]	; (8002b08 <HAL_GPIO_Init+0x29c>)
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	089b      	lsrs	r3, r3, #2
 8002a22:	3302      	adds	r3, #2
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d006      	beq.n	8002a44 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a36:	4b39      	ldr	r3, [pc, #228]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4938      	ldr	r1, [pc, #224]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]
 8002a42:	e006      	b.n	8002a52 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a44:	4b35      	ldr	r3, [pc, #212]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	4933      	ldr	r1, [pc, #204]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d006      	beq.n	8002a6c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a5e:	4b2f      	ldr	r3, [pc, #188]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	492e      	ldr	r1, [pc, #184]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
 8002a6a:	e006      	b.n	8002a7a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a6c:	4b2b      	ldr	r3, [pc, #172]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	4929      	ldr	r1, [pc, #164]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d006      	beq.n	8002a94 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a86:	4b25      	ldr	r3, [pc, #148]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	4924      	ldr	r1, [pc, #144]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
 8002a92:	e006      	b.n	8002aa2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a94:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	491f      	ldr	r1, [pc, #124]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d006      	beq.n	8002abc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002aae:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	491a      	ldr	r1, [pc, #104]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60cb      	str	r3, [r1, #12]
 8002aba:	e006      	b.n	8002aca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002abc:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	4915      	ldr	r1, [pc, #84]	; (8002b1c <HAL_GPIO_Init+0x2b0>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	3301      	adds	r3, #1
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f47f aed0 	bne.w	8002880 <HAL_GPIO_Init+0x14>
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	372c      	adds	r7, #44	; 0x2c
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	10210000 	.word	0x10210000
 8002af0:	10110000 	.word	0x10110000
 8002af4:	10120000 	.word	0x10120000
 8002af8:	10310000 	.word	0x10310000
 8002afc:	10320000 	.word	0x10320000
 8002b00:	10220000 	.word	0x10220000
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	40010800 	.word	0x40010800
 8002b10:	40010c00 	.word	0x40010c00
 8002b14:	40011000 	.word	0x40011000
 8002b18:	40011400 	.word	0x40011400
 8002b1c:	40010400 	.word	0x40010400

08002b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	807b      	strh	r3, [r7, #2]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b30:	787b      	ldrb	r3, [r7, #1]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b36:	887a      	ldrh	r2, [r7, #2]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b3c:	e003      	b.n	8002b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b3e:	887b      	ldrh	r3, [r7, #2]
 8002b40:	041a      	lsls	r2, r3, #16
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	611a      	str	r2, [r3, #16]
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e26c      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 8087 	beq.w	8002c7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b70:	4b92      	ldr	r3, [pc, #584]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 030c 	and.w	r3, r3, #12
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d00c      	beq.n	8002b96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b7c:	4b8f      	ldr	r3, [pc, #572]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d112      	bne.n	8002bae <HAL_RCC_OscConfig+0x5e>
 8002b88:	4b8c      	ldr	r3, [pc, #560]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b94:	d10b      	bne.n	8002bae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b96:	4b89      	ldr	r3, [pc, #548]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d06c      	beq.n	8002c7c <HAL_RCC_OscConfig+0x12c>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d168      	bne.n	8002c7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e246      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb6:	d106      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x76>
 8002bb8:	4b80      	ldr	r3, [pc, #512]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a7f      	ldr	r2, [pc, #508]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	e02e      	b.n	8002c24 <HAL_RCC_OscConfig+0xd4>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x98>
 8002bce:	4b7b      	ldr	r3, [pc, #492]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a7a      	ldr	r2, [pc, #488]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b78      	ldr	r3, [pc, #480]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a77      	ldr	r2, [pc, #476]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e01d      	b.n	8002c24 <HAL_RCC_OscConfig+0xd4>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0xbc>
 8002bf2:	4b72      	ldr	r3, [pc, #456]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a71      	ldr	r2, [pc, #452]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b6f      	ldr	r3, [pc, #444]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a6e      	ldr	r2, [pc, #440]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e00b      	b.n	8002c24 <HAL_RCC_OscConfig+0xd4>
 8002c0c:	4b6b      	ldr	r3, [pc, #428]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a6a      	ldr	r2, [pc, #424]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	4b68      	ldr	r3, [pc, #416]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a67      	ldr	r2, [pc, #412]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d013      	beq.n	8002c54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7ff f9e8 	bl	8002000 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c34:	f7ff f9e4 	bl	8002000 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e1fa      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	4b5d      	ldr	r3, [pc, #372]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0xe4>
 8002c52:	e014      	b.n	8002c7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c54:	f7ff f9d4 	bl	8002000 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7ff f9d0 	bl	8002000 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e1e6      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6e:	4b53      	ldr	r3, [pc, #332]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x10c>
 8002c7a:	e000      	b.n	8002c7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d063      	beq.n	8002d52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c8a:	4b4c      	ldr	r3, [pc, #304]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00b      	beq.n	8002cae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c96:	4b49      	ldr	r3, [pc, #292]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d11c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x18c>
 8002ca2:	4b46      	ldr	r3, [pc, #280]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d116      	bne.n	8002cdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cae:	4b43      	ldr	r3, [pc, #268]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d005      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x176>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d001      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e1ba      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc6:	4b3d      	ldr	r3, [pc, #244]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4939      	ldr	r1, [pc, #228]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cda:	e03a      	b.n	8002d52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d020      	beq.n	8002d26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce4:	4b36      	ldr	r3, [pc, #216]	; (8002dc0 <HAL_RCC_OscConfig+0x270>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cea:	f7ff f989 	bl	8002000 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf2:	f7ff f985 	bl	8002000 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e19b      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d04:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d10:	4b2a      	ldr	r3, [pc, #168]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	4927      	ldr	r1, [pc, #156]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	600b      	str	r3, [r1, #0]
 8002d24:	e015      	b.n	8002d52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d26:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <HAL_RCC_OscConfig+0x270>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7ff f968 	bl	8002000 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d34:	f7ff f964 	bl	8002000 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e17a      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d46:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d03a      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d019      	beq.n	8002d9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <HAL_RCC_OscConfig+0x274>)
 8002d68:	2201      	movs	r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6c:	f7ff f948 	bl	8002000 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d74:	f7ff f944 	bl	8002000 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e15a      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d86:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <HAL_RCC_OscConfig+0x26c>)
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d92:	2001      	movs	r0, #1
 8002d94:	f000 fada 	bl	800334c <RCC_Delay>
 8002d98:	e01c      	b.n	8002dd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <HAL_RCC_OscConfig+0x274>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da0:	f7ff f92e 	bl	8002000 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da6:	e00f      	b.n	8002dc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da8:	f7ff f92a 	bl	8002000 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d908      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e140      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	42420000 	.word	0x42420000
 8002dc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc8:	4b9e      	ldr	r3, [pc, #632]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1e9      	bne.n	8002da8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80a6 	beq.w	8002f2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de6:	4b97      	ldr	r3, [pc, #604]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10d      	bne.n	8002e0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	4b94      	ldr	r3, [pc, #592]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	4a93      	ldr	r2, [pc, #588]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	61d3      	str	r3, [r2, #28]
 8002dfe:	4b91      	ldr	r3, [pc, #580]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0e:	4b8e      	ldr	r3, [pc, #568]	; (8003048 <HAL_RCC_OscConfig+0x4f8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d118      	bne.n	8002e4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1a:	4b8b      	ldr	r3, [pc, #556]	; (8003048 <HAL_RCC_OscConfig+0x4f8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a8a      	ldr	r2, [pc, #552]	; (8003048 <HAL_RCC_OscConfig+0x4f8>)
 8002e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e26:	f7ff f8eb 	bl	8002000 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2e:	f7ff f8e7 	bl	8002000 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b64      	cmp	r3, #100	; 0x64
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e0fd      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e40:	4b81      	ldr	r3, [pc, #516]	; (8003048 <HAL_RCC_OscConfig+0x4f8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d106      	bne.n	8002e62 <HAL_RCC_OscConfig+0x312>
 8002e54:	4b7b      	ldr	r3, [pc, #492]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	4a7a      	ldr	r2, [pc, #488]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6213      	str	r3, [r2, #32]
 8002e60:	e02d      	b.n	8002ebe <HAL_RCC_OscConfig+0x36e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x334>
 8002e6a:	4b76      	ldr	r3, [pc, #472]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	4a75      	ldr	r2, [pc, #468]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e70:	f023 0301 	bic.w	r3, r3, #1
 8002e74:	6213      	str	r3, [r2, #32]
 8002e76:	4b73      	ldr	r3, [pc, #460]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	4a72      	ldr	r2, [pc, #456]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e7c:	f023 0304 	bic.w	r3, r3, #4
 8002e80:	6213      	str	r3, [r2, #32]
 8002e82:	e01c      	b.n	8002ebe <HAL_RCC_OscConfig+0x36e>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b05      	cmp	r3, #5
 8002e8a:	d10c      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x356>
 8002e8c:	4b6d      	ldr	r3, [pc, #436]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	4a6c      	ldr	r2, [pc, #432]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e92:	f043 0304 	orr.w	r3, r3, #4
 8002e96:	6213      	str	r3, [r2, #32]
 8002e98:	4b6a      	ldr	r3, [pc, #424]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	4a69      	ldr	r2, [pc, #420]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6213      	str	r3, [r2, #32]
 8002ea4:	e00b      	b.n	8002ebe <HAL_RCC_OscConfig+0x36e>
 8002ea6:	4b67      	ldr	r3, [pc, #412]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4a66      	ldr	r2, [pc, #408]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002eac:	f023 0301 	bic.w	r3, r3, #1
 8002eb0:	6213      	str	r3, [r2, #32]
 8002eb2:	4b64      	ldr	r3, [pc, #400]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4a63      	ldr	r2, [pc, #396]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	f023 0304 	bic.w	r3, r3, #4
 8002ebc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d015      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec6:	f7ff f89b 	bl	8002000 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ecc:	e00a      	b.n	8002ee4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ece:	f7ff f897 	bl	8002000 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e0ab      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee4:	4b57      	ldr	r3, [pc, #348]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0ee      	beq.n	8002ece <HAL_RCC_OscConfig+0x37e>
 8002ef0:	e014      	b.n	8002f1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef2:	f7ff f885 	bl	8002000 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7ff f881 	bl	8002000 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e095      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f10:	4b4c      	ldr	r3, [pc, #304]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1ee      	bne.n	8002efa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f1c:	7dfb      	ldrb	r3, [r7, #23]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d105      	bne.n	8002f2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f22:	4b48      	ldr	r3, [pc, #288]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	4a47      	ldr	r2, [pc, #284]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 8081 	beq.w	800303a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f38:	4b42      	ldr	r3, [pc, #264]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 030c 	and.w	r3, r3, #12
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d061      	beq.n	8003008 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d146      	bne.n	8002fda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4c:	4b3f      	ldr	r3, [pc, #252]	; (800304c <HAL_RCC_OscConfig+0x4fc>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f52:	f7ff f855 	bl	8002000 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5a:	f7ff f851 	bl	8002000 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e067      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f6c:	4b35      	ldr	r3, [pc, #212]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f0      	bne.n	8002f5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f80:	d108      	bne.n	8002f94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f82:	4b30      	ldr	r3, [pc, #192]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	492d      	ldr	r1, [pc, #180]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f94:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a19      	ldr	r1, [r3, #32]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	4927      	ldr	r1, [pc, #156]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fac:	4b27      	ldr	r3, [pc, #156]	; (800304c <HAL_RCC_OscConfig+0x4fc>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb2:	f7ff f825 	bl	8002000 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fba:	f7ff f821 	bl	8002000 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e037      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fcc:	4b1d      	ldr	r3, [pc, #116]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x46a>
 8002fd8:	e02f      	b.n	800303a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fda:	4b1c      	ldr	r3, [pc, #112]	; (800304c <HAL_RCC_OscConfig+0x4fc>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7ff f80e 	bl	8002000 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe8:	f7ff f80a 	bl	8002000 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e020      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffa:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x498>
 8003006:	e018      	b.n	800303a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e013      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_RCC_OscConfig+0x4f4>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	429a      	cmp	r2, r3
 8003026:	d106      	bne.n	8003036 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003032:	429a      	cmp	r2, r3
 8003034:	d001      	beq.n	800303a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40021000 	.word	0x40021000
 8003048:	40007000 	.word	0x40007000
 800304c:	42420060 	.word	0x42420060

08003050 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0d0      	b.n	8003206 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003064:	4b6a      	ldr	r3, [pc, #424]	; (8003210 <HAL_RCC_ClockConfig+0x1c0>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d910      	bls.n	8003094 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003072:	4b67      	ldr	r3, [pc, #412]	; (8003210 <HAL_RCC_ClockConfig+0x1c0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 0207 	bic.w	r2, r3, #7
 800307a:	4965      	ldr	r1, [pc, #404]	; (8003210 <HAL_RCC_ClockConfig+0x1c0>)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	4313      	orrs	r3, r2
 8003080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	4b63      	ldr	r3, [pc, #396]	; (8003210 <HAL_RCC_ClockConfig+0x1c0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0b8      	b.n	8003206 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d020      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030ac:	4b59      	ldr	r3, [pc, #356]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4a58      	ldr	r2, [pc, #352]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c4:	4b53      	ldr	r3, [pc, #332]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4a52      	ldr	r2, [pc, #328]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d0:	4b50      	ldr	r3, [pc, #320]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	494d      	ldr	r1, [pc, #308]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d040      	beq.n	8003170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d107      	bne.n	8003106 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	4b47      	ldr	r3, [pc, #284]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d115      	bne.n	800312e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e07f      	b.n	8003206 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d107      	bne.n	800311e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310e:	4b41      	ldr	r3, [pc, #260]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d109      	bne.n	800312e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e073      	b.n	8003206 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311e:	4b3d      	ldr	r3, [pc, #244]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e06b      	b.n	8003206 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800312e:	4b39      	ldr	r3, [pc, #228]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f023 0203 	bic.w	r2, r3, #3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	4936      	ldr	r1, [pc, #216]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	4313      	orrs	r3, r2
 800313e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003140:	f7fe ff5e 	bl	8002000 <HAL_GetTick>
 8003144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003146:	e00a      	b.n	800315e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003148:	f7fe ff5a 	bl	8002000 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	f241 3288 	movw	r2, #5000	; 0x1388
 8003156:	4293      	cmp	r3, r2
 8003158:	d901      	bls.n	800315e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e053      	b.n	8003206 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315e:	4b2d      	ldr	r3, [pc, #180]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 020c 	and.w	r2, r3, #12
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	429a      	cmp	r2, r3
 800316e:	d1eb      	bne.n	8003148 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003170:	4b27      	ldr	r3, [pc, #156]	; (8003210 <HAL_RCC_ClockConfig+0x1c0>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d210      	bcs.n	80031a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317e:	4b24      	ldr	r3, [pc, #144]	; (8003210 <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 0207 	bic.w	r2, r3, #7
 8003186:	4922      	ldr	r1, [pc, #136]	; (8003210 <HAL_RCC_ClockConfig+0x1c0>)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	4313      	orrs	r3, r2
 800318c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800318e:	4b20      	ldr	r3, [pc, #128]	; (8003210 <HAL_RCC_ClockConfig+0x1c0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e032      	b.n	8003206 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031ac:	4b19      	ldr	r3, [pc, #100]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4916      	ldr	r1, [pc, #88]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d009      	beq.n	80031de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ca:	4b12      	ldr	r3, [pc, #72]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	490e      	ldr	r1, [pc, #56]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031de:	f000 f821 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 80031e2:	4601      	mov	r1, r0
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80031f0:	5cd3      	ldrb	r3, [r2, r3]
 80031f2:	fa21 f303 	lsr.w	r3, r1, r3
 80031f6:	4a09      	ldr	r2, [pc, #36]	; (800321c <HAL_RCC_ClockConfig+0x1cc>)
 80031f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_RCC_ClockConfig+0x1d0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fe febc 	bl	8001f7c <HAL_InitTick>

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40022000 	.word	0x40022000
 8003214:	40021000 	.word	0x40021000
 8003218:	0800721c 	.word	0x0800721c
 800321c:	20000008 	.word	0x20000008
 8003220:	2000000c 	.word	0x2000000c

08003224 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003224:	b490      	push	{r4, r7}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800322a:	4b2a      	ldr	r3, [pc, #168]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800322c:	1d3c      	adds	r4, r7, #4
 800322e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003230:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003234:	4b28      	ldr	r3, [pc, #160]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	2300      	movs	r3, #0
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	2300      	movs	r3, #0
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800324e:	4b23      	ldr	r3, [pc, #140]	; (80032dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b04      	cmp	r3, #4
 800325c:	d002      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x40>
 800325e:	2b08      	cmp	r3, #8
 8003260:	d003      	beq.n	800326a <HAL_RCC_GetSysClockFreq+0x46>
 8003262:	e02d      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003264:	4b1e      	ldr	r3, [pc, #120]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003266:	623b      	str	r3, [r7, #32]
      break;
 8003268:	e02d      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	0c9b      	lsrs	r3, r3, #18
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003276:	4413      	add	r3, r2
 8003278:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800327c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d013      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003288:	4b14      	ldr	r3, [pc, #80]	; (80032dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	0c5b      	lsrs	r3, r3, #17
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003296:	4413      	add	r3, r2
 8003298:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800329c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	4a0f      	ldr	r2, [pc, #60]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032a2:	fb02 f203 	mul.w	r2, r2, r3
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
 80032ae:	e004      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	4a0c      	ldr	r2, [pc, #48]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032b4:	fb02 f303 	mul.w	r3, r2, r3
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	623b      	str	r3, [r7, #32]
      break;
 80032be:	e002      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032c0:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032c2:	623b      	str	r3, [r7, #32]
      break;
 80032c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032c6:	6a3b      	ldr	r3, [r7, #32]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3728      	adds	r7, #40	; 0x28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc90      	pop	{r4, r7}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	080064ac 	.word	0x080064ac
 80032d8:	080064bc 	.word	0x080064bc
 80032dc:	40021000 	.word	0x40021000
 80032e0:	007a1200 	.word	0x007a1200
 80032e4:	003d0900 	.word	0x003d0900

080032e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032ec:	4b02      	ldr	r3, [pc, #8]	; (80032f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80032ee:	681b      	ldr	r3, [r3, #0]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr
 80032f8:	20000008 	.word	0x20000008

080032fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003300:	f7ff fff2 	bl	80032e8 <HAL_RCC_GetHCLKFreq>
 8003304:	4601      	mov	r1, r0
 8003306:	4b05      	ldr	r3, [pc, #20]	; (800331c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	0a1b      	lsrs	r3, r3, #8
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	4a03      	ldr	r2, [pc, #12]	; (8003320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003312:	5cd3      	ldrb	r3, [r2, r3]
 8003314:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003318:	4618      	mov	r0, r3
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40021000 	.word	0x40021000
 8003320:	0800722c 	.word	0x0800722c

08003324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003328:	f7ff ffde 	bl	80032e8 <HAL_RCC_GetHCLKFreq>
 800332c:	4601      	mov	r1, r0
 800332e:	4b05      	ldr	r3, [pc, #20]	; (8003344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	0adb      	lsrs	r3, r3, #11
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4a03      	ldr	r2, [pc, #12]	; (8003348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800333a:	5cd3      	ldrb	r3, [r2, r3]
 800333c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40021000 	.word	0x40021000
 8003348:	0800722c 	.word	0x0800722c

0800334c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003354:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <RCC_Delay+0x34>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <RCC_Delay+0x38>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	0a5b      	lsrs	r3, r3, #9
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	fb02 f303 	mul.w	r3, r2, r3
 8003366:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003368:	bf00      	nop
  }
  while (Delay --);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1e5a      	subs	r2, r3, #1
 800336e:	60fa      	str	r2, [r7, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f9      	bne.n	8003368 <RCC_Delay+0x1c>
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	20000008 	.word	0x20000008
 8003384:	10624dd3 	.word	0x10624dd3

08003388 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d07d      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033a4:	2300      	movs	r3, #0
 80033a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a8:	4b4f      	ldr	r3, [pc, #316]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10d      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b4:	4b4c      	ldr	r3, [pc, #304]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	4a4b      	ldr	r2, [pc, #300]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033be:	61d3      	str	r3, [r2, #28]
 80033c0:	4b49      	ldr	r3, [pc, #292]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033cc:	2301      	movs	r3, #1
 80033ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d0:	4b46      	ldr	r3, [pc, #280]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d118      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033dc:	4b43      	ldr	r3, [pc, #268]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a42      	ldr	r2, [pc, #264]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e8:	f7fe fe0a 	bl	8002000 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ee:	e008      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f0:	f7fe fe06 	bl	8002000 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e06d      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003402:	4b3a      	ldr	r3, [pc, #232]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800340e:	4b36      	ldr	r3, [pc, #216]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003416:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d02e      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	429a      	cmp	r2, r3
 800342a:	d027      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800342c:	4b2e      	ldr	r3, [pc, #184]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003434:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003436:	4b2e      	ldr	r3, [pc, #184]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003438:	2201      	movs	r2, #1
 800343a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800343c:	4b2c      	ldr	r3, [pc, #176]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003442:	4a29      	ldr	r2, [pc, #164]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d014      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003452:	f7fe fdd5 	bl	8002000 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003458:	e00a      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345a:	f7fe fdd1 	bl	8002000 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	f241 3288 	movw	r2, #5000	; 0x1388
 8003468:	4293      	cmp	r3, r2
 800346a:	d901      	bls.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e036      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0ee      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800347c:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	4917      	ldr	r1, [pc, #92]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348a:	4313      	orrs	r3, r2
 800348c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d105      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003494:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800349e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d008      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034ac:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	490b      	ldr	r1, [pc, #44]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d008      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034ca:	4b07      	ldr	r3, [pc, #28]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	4904      	ldr	r1, [pc, #16]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40007000 	.word	0x40007000
 80034f0:	42420440 	.word	0x42420440

080034f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e076      	b.n	80035f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	2b00      	cmp	r3, #0
 800350c:	d108      	bne.n	8003520 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003516:	d009      	beq.n	800352c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	61da      	str	r2, [r3, #28]
 800351e:	e005      	b.n	800352c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7fe fbe2 	bl	8001d10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003562:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	ea42 0103 	orr.w	r1, r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	0c1a      	lsrs	r2, r3, #16
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f002 0204 	and.w	r2, r2, #4
 80035d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	69da      	ldr	r2, [r3, #28]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	4613      	mov	r3, r2
 800360a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800360c:	2300      	movs	r3, #0
 800360e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_SPI_Transmit+0x22>
 800361a:	2302      	movs	r3, #2
 800361c:	e126      	b.n	800386c <HAL_SPI_Transmit+0x270>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003626:	f7fe fceb 	bl	8002000 <HAL_GetTick>
 800362a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800362c:	88fb      	ldrh	r3, [r7, #6]
 800362e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d002      	beq.n	8003642 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800363c:	2302      	movs	r3, #2
 800363e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003640:	e10b      	b.n	800385a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_SPI_Transmit+0x52>
 8003648:	88fb      	ldrh	r3, [r7, #6]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d102      	bne.n	8003654 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003652:	e102      	b.n	800385a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2203      	movs	r2, #3
 8003658:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	88fa      	ldrh	r2, [r7, #6]
 800366c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	88fa      	ldrh	r2, [r7, #6]
 8003672:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800369a:	d10f      	bne.n	80036bc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c6:	2b40      	cmp	r3, #64	; 0x40
 80036c8:	d007      	beq.n	80036da <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e2:	d14b      	bne.n	800377c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_SPI_Transmit+0xf6>
 80036ec:	8afb      	ldrh	r3, [r7, #22]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d13e      	bne.n	8003770 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	881a      	ldrh	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	1c9a      	adds	r2, r3, #2
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003716:	e02b      	b.n	8003770 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b02      	cmp	r3, #2
 8003724:	d112      	bne.n	800374c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	1c9a      	adds	r2, r3, #2
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	86da      	strh	r2, [r3, #54]	; 0x36
 800374a:	e011      	b.n	8003770 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800374c:	f7fe fc58 	bl	8002000 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d803      	bhi.n	8003764 <HAL_SPI_Transmit+0x168>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003762:	d102      	bne.n	800376a <HAL_SPI_Transmit+0x16e>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d102      	bne.n	8003770 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800376e:	e074      	b.n	800385a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1ce      	bne.n	8003718 <HAL_SPI_Transmit+0x11c>
 800377a:	e04c      	b.n	8003816 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <HAL_SPI_Transmit+0x18e>
 8003784:	8afb      	ldrh	r3, [r7, #22]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d140      	bne.n	800380c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	330c      	adds	r3, #12
 8003794:	7812      	ldrb	r2, [r2, #0]
 8003796:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80037b0:	e02c      	b.n	800380c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d113      	bne.n	80037e8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	330c      	adds	r3, #12
 80037ca:	7812      	ldrb	r2, [r2, #0]
 80037cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	1c5a      	adds	r2, r3, #1
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037dc:	b29b      	uxth	r3, r3
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80037e6:	e011      	b.n	800380c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037e8:	f7fe fc0a 	bl	8002000 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d803      	bhi.n	8003800 <HAL_SPI_Transmit+0x204>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fe:	d102      	bne.n	8003806 <HAL_SPI_Transmit+0x20a>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d102      	bne.n	800380c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	77fb      	strb	r3, [r7, #31]
          goto error;
 800380a:	e026      	b.n	800385a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1cd      	bne.n	80037b2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	6839      	ldr	r1, [r7, #0]
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f8b2 	bl	8003984 <SPI_EndRxTxTransaction>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10a      	bne.n	800384a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003834:	2300      	movs	r3, #0
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	77fb      	strb	r3, [r7, #31]
 8003856:	e000      	b.n	800385a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003858:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800386a:	7ffb      	ldrb	r3, [r7, #31]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3720      	adds	r7, #32
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003884:	f7fe fbbc 	bl	8002000 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	4413      	add	r3, r2
 8003892:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003894:	f7fe fbb4 	bl	8002000 <HAL_GetTick>
 8003898:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800389a:	4b39      	ldr	r3, [pc, #228]	; (8003980 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	015b      	lsls	r3, r3, #5
 80038a0:	0d1b      	lsrs	r3, r3, #20
 80038a2:	69fa      	ldr	r2, [r7, #28]
 80038a4:	fb02 f303 	mul.w	r3, r2, r3
 80038a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038aa:	e054      	b.n	8003956 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b2:	d050      	beq.n	8003956 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038b4:	f7fe fba4 	bl	8002000 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d902      	bls.n	80038ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d13d      	bne.n	8003946 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038e2:	d111      	bne.n	8003908 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ec:	d004      	beq.n	80038f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f6:	d107      	bne.n	8003908 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003906:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003910:	d10f      	bne.n	8003932 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003930:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e017      	b.n	8003976 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	3b01      	subs	r3, #1
 8003954:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4013      	ands	r3, r2
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	429a      	cmp	r2, r3
 8003964:	bf0c      	ite	eq
 8003966:	2301      	moveq	r3, #1
 8003968:	2300      	movne	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	429a      	cmp	r2, r3
 8003972:	d19b      	bne.n	80038ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3720      	adds	r7, #32
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000008 	.word	0x20000008

08003984 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af02      	add	r7, sp, #8
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2200      	movs	r2, #0
 8003998:	2180      	movs	r1, #128	; 0x80
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f7ff ff6a 	bl	8003874 <SPI_WaitFlagStateUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d007      	beq.n	80039b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039aa:	f043 0220 	orr.w	r2, r3, #32
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e000      	b.n	80039b8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e03f      	b.n	8003a52 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fe f9dc 	bl	8001da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2224      	movs	r2, #36	; 0x24
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f9a7 	bl	8003d58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b08a      	sub	sp, #40	; 0x28
 8003a5e:	af02      	add	r7, sp, #8
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	603b      	str	r3, [r7, #0]
 8003a66:	4613      	mov	r3, r2
 8003a68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b20      	cmp	r3, #32
 8003a78:	d17c      	bne.n	8003b74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <HAL_UART_Transmit+0x2c>
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e075      	b.n	8003b76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_UART_Transmit+0x3e>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e06e      	b.n	8003b76 <HAL_UART_Transmit+0x11c>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2221      	movs	r2, #33	; 0x21
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aae:	f7fe faa7 	bl	8002000 <HAL_GetTick>
 8003ab2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	88fa      	ldrh	r2, [r7, #6]
 8003ab8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	88fa      	ldrh	r2, [r7, #6]
 8003abe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac8:	d108      	bne.n	8003adc <HAL_UART_Transmit+0x82>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d104      	bne.n	8003adc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	61bb      	str	r3, [r7, #24]
 8003ada:	e003      	b.n	8003ae4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003aec:	e02a      	b.n	8003b44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2200      	movs	r2, #0
 8003af6:	2180      	movs	r1, #128	; 0x80
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f8e2 	bl	8003cc2 <UART_WaitOnFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e036      	b.n	8003b76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10b      	bne.n	8003b26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	3302      	adds	r3, #2
 8003b22:	61bb      	str	r3, [r7, #24]
 8003b24:	e007      	b.n	8003b36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	781a      	ldrb	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	3301      	adds	r3, #1
 8003b34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1cf      	bne.n	8003aee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2200      	movs	r2, #0
 8003b56:	2140      	movs	r1, #64	; 0x40
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f8b2 	bl	8003cc2 <UART_WaitOnFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e006      	b.n	8003b76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	e000      	b.n	8003b76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b74:	2302      	movs	r3, #2
  }
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3720      	adds	r7, #32
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b08a      	sub	sp, #40	; 0x28
 8003b82:	af02      	add	r7, sp, #8
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	603b      	str	r3, [r7, #0]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	f040 808c 	bne.w	8003cb8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <HAL_UART_Receive+0x2e>
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e084      	b.n	8003cba <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_UART_Receive+0x40>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e07d      	b.n	8003cba <HAL_UART_Receive+0x13c>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2222      	movs	r2, #34	; 0x22
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bda:	f7fe fa11 	bl	8002000 <HAL_GetTick>
 8003bde:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	88fa      	ldrh	r2, [r7, #6]
 8003be4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	88fa      	ldrh	r2, [r7, #6]
 8003bea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf4:	d108      	bne.n	8003c08 <HAL_UART_Receive+0x8a>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d104      	bne.n	8003c08 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	e003      	b.n	8003c10 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003c18:	e043      	b.n	8003ca2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2200      	movs	r2, #0
 8003c22:	2120      	movs	r1, #32
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f84c 	bl	8003cc2 <UART_WaitOnFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e042      	b.n	8003cba <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10c      	bne.n	8003c54 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	3302      	adds	r3, #2
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	e01f      	b.n	8003c94 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5c:	d007      	beq.n	8003c6e <HAL_UART_Receive+0xf0>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10a      	bne.n	8003c7c <HAL_UART_Receive+0xfe>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	701a      	strb	r2, [r3, #0]
 8003c7a:	e008      	b.n	8003c8e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	3301      	adds	r3, #1
 8003c92:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1b6      	bne.n	8003c1a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	e000      	b.n	8003cba <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003cb8:	2302      	movs	r3, #2
  }
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3720      	adds	r7, #32
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	60f8      	str	r0, [r7, #12]
 8003cca:	60b9      	str	r1, [r7, #8]
 8003ccc:	603b      	str	r3, [r7, #0]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd2:	e02c      	b.n	8003d2e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cda:	d028      	beq.n	8003d2e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d007      	beq.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ce2:	f7fe f98d 	bl	8002000 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d21d      	bcs.n	8003d2e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d00:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695a      	ldr	r2, [r3, #20]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0201 	bic.w	r2, r2, #1
 8003d10:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e00f      	b.n	8003d4e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4013      	ands	r3, r2
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	bf0c      	ite	eq
 8003d3e:	2301      	moveq	r3, #1
 8003d40:	2300      	movne	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d0c3      	beq.n	8003cd4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d92:	f023 030c 	bic.w	r3, r3, #12
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699a      	ldr	r2, [r3, #24]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a2c      	ldr	r2, [pc, #176]	; (8003e6c <UART_SetConfig+0x114>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d103      	bne.n	8003dc8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003dc0:	f7ff fab0 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 8003dc4:	60f8      	str	r0, [r7, #12]
 8003dc6:	e002      	b.n	8003dce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003dc8:	f7ff fa98 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 8003dcc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009a      	lsls	r2, r3, #2
 8003dd8:	441a      	add	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de4:	4a22      	ldr	r2, [pc, #136]	; (8003e70 <UART_SetConfig+0x118>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	0119      	lsls	r1, r3, #4
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	009a      	lsls	r2, r3, #2
 8003df8:	441a      	add	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e04:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <UART_SetConfig+0x118>)
 8003e06:	fba3 0302 	umull	r0, r3, r3, r2
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	2064      	movs	r0, #100	; 0x64
 8003e0e:	fb00 f303 	mul.w	r3, r0, r3
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	3332      	adds	r3, #50	; 0x32
 8003e18:	4a15      	ldr	r2, [pc, #84]	; (8003e70 <UART_SetConfig+0x118>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e24:	4419      	add	r1, r3
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009a      	lsls	r2, r3, #2
 8003e30:	441a      	add	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <UART_SetConfig+0x118>)
 8003e3e:	fba3 0302 	umull	r0, r3, r3, r2
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	2064      	movs	r0, #100	; 0x64
 8003e46:	fb00 f303 	mul.w	r3, r0, r3
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	3332      	adds	r3, #50	; 0x32
 8003e50:	4a07      	ldr	r2, [pc, #28]	; (8003e70 <UART_SetConfig+0x118>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	f003 020f 	and.w	r2, r3, #15
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	440a      	add	r2, r1
 8003e62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e64:	bf00      	nop
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40013800 	.word	0x40013800
 8003e70:	51eb851f 	.word	0x51eb851f

08003e74 <atoi>:
 8003e74:	220a      	movs	r2, #10
 8003e76:	2100      	movs	r1, #0
 8003e78:	f000 bdb0 	b.w	80049dc <strtol>

08003e7c <__errno>:
 8003e7c:	4b01      	ldr	r3, [pc, #4]	; (8003e84 <__errno+0x8>)
 8003e7e:	6818      	ldr	r0, [r3, #0]
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	20000014 	.word	0x20000014

08003e88 <__libc_init_array>:
 8003e88:	b570      	push	{r4, r5, r6, lr}
 8003e8a:	2500      	movs	r5, #0
 8003e8c:	4e0c      	ldr	r6, [pc, #48]	; (8003ec0 <__libc_init_array+0x38>)
 8003e8e:	4c0d      	ldr	r4, [pc, #52]	; (8003ec4 <__libc_init_array+0x3c>)
 8003e90:	1ba4      	subs	r4, r4, r6
 8003e92:	10a4      	asrs	r4, r4, #2
 8003e94:	42a5      	cmp	r5, r4
 8003e96:	d109      	bne.n	8003eac <__libc_init_array+0x24>
 8003e98:	f002 f97c 	bl	8006194 <_init>
 8003e9c:	2500      	movs	r5, #0
 8003e9e:	4e0a      	ldr	r6, [pc, #40]	; (8003ec8 <__libc_init_array+0x40>)
 8003ea0:	4c0a      	ldr	r4, [pc, #40]	; (8003ecc <__libc_init_array+0x44>)
 8003ea2:	1ba4      	subs	r4, r4, r6
 8003ea4:	10a4      	asrs	r4, r4, #2
 8003ea6:	42a5      	cmp	r5, r4
 8003ea8:	d105      	bne.n	8003eb6 <__libc_init_array+0x2e>
 8003eaa:	bd70      	pop	{r4, r5, r6, pc}
 8003eac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003eb0:	4798      	blx	r3
 8003eb2:	3501      	adds	r5, #1
 8003eb4:	e7ee      	b.n	8003e94 <__libc_init_array+0xc>
 8003eb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003eba:	4798      	blx	r3
 8003ebc:	3501      	adds	r5, #1
 8003ebe:	e7f2      	b.n	8003ea6 <__libc_init_array+0x1e>
 8003ec0:	08007490 	.word	0x08007490
 8003ec4:	08007490 	.word	0x08007490
 8003ec8:	08007490 	.word	0x08007490
 8003ecc:	08007494 	.word	0x08007494

08003ed0 <memcpy>:
 8003ed0:	b510      	push	{r4, lr}
 8003ed2:	1e43      	subs	r3, r0, #1
 8003ed4:	440a      	add	r2, r1
 8003ed6:	4291      	cmp	r1, r2
 8003ed8:	d100      	bne.n	8003edc <memcpy+0xc>
 8003eda:	bd10      	pop	{r4, pc}
 8003edc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ee0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ee4:	e7f7      	b.n	8003ed6 <memcpy+0x6>

08003ee6 <memset>:
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	4402      	add	r2, r0
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d100      	bne.n	8003ef0 <memset+0xa>
 8003eee:	4770      	bx	lr
 8003ef0:	f803 1b01 	strb.w	r1, [r3], #1
 8003ef4:	e7f9      	b.n	8003eea <memset+0x4>

08003ef6 <__cvt>:
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003efc:	461e      	mov	r6, r3
 8003efe:	bfbb      	ittet	lt
 8003f00:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003f04:	461e      	movlt	r6, r3
 8003f06:	2300      	movge	r3, #0
 8003f08:	232d      	movlt	r3, #45	; 0x2d
 8003f0a:	b088      	sub	sp, #32
 8003f0c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003f0e:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003f12:	f027 0720 	bic.w	r7, r7, #32
 8003f16:	2f46      	cmp	r7, #70	; 0x46
 8003f18:	4614      	mov	r4, r2
 8003f1a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003f1c:	700b      	strb	r3, [r1, #0]
 8003f1e:	d004      	beq.n	8003f2a <__cvt+0x34>
 8003f20:	2f45      	cmp	r7, #69	; 0x45
 8003f22:	d100      	bne.n	8003f26 <__cvt+0x30>
 8003f24:	3501      	adds	r5, #1
 8003f26:	2302      	movs	r3, #2
 8003f28:	e000      	b.n	8003f2c <__cvt+0x36>
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	aa07      	add	r2, sp, #28
 8003f2e:	9204      	str	r2, [sp, #16]
 8003f30:	aa06      	add	r2, sp, #24
 8003f32:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003f36:	e9cd 3500 	strd	r3, r5, [sp]
 8003f3a:	4622      	mov	r2, r4
 8003f3c:	4633      	mov	r3, r6
 8003f3e:	f000 fdf3 	bl	8004b28 <_dtoa_r>
 8003f42:	2f47      	cmp	r7, #71	; 0x47
 8003f44:	4680      	mov	r8, r0
 8003f46:	d102      	bne.n	8003f4e <__cvt+0x58>
 8003f48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f4a:	07db      	lsls	r3, r3, #31
 8003f4c:	d526      	bpl.n	8003f9c <__cvt+0xa6>
 8003f4e:	2f46      	cmp	r7, #70	; 0x46
 8003f50:	eb08 0905 	add.w	r9, r8, r5
 8003f54:	d111      	bne.n	8003f7a <__cvt+0x84>
 8003f56:	f898 3000 	ldrb.w	r3, [r8]
 8003f5a:	2b30      	cmp	r3, #48	; 0x30
 8003f5c:	d10a      	bne.n	8003f74 <__cvt+0x7e>
 8003f5e:	2200      	movs	r2, #0
 8003f60:	2300      	movs	r3, #0
 8003f62:	4620      	mov	r0, r4
 8003f64:	4631      	mov	r1, r6
 8003f66:	f7fc fd1f 	bl	80009a8 <__aeabi_dcmpeq>
 8003f6a:	b918      	cbnz	r0, 8003f74 <__cvt+0x7e>
 8003f6c:	f1c5 0501 	rsb	r5, r5, #1
 8003f70:	f8ca 5000 	str.w	r5, [sl]
 8003f74:	f8da 3000 	ldr.w	r3, [sl]
 8003f78:	4499      	add	r9, r3
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	4620      	mov	r0, r4
 8003f80:	4631      	mov	r1, r6
 8003f82:	f7fc fd11 	bl	80009a8 <__aeabi_dcmpeq>
 8003f86:	b938      	cbnz	r0, 8003f98 <__cvt+0xa2>
 8003f88:	2230      	movs	r2, #48	; 0x30
 8003f8a:	9b07      	ldr	r3, [sp, #28]
 8003f8c:	454b      	cmp	r3, r9
 8003f8e:	d205      	bcs.n	8003f9c <__cvt+0xa6>
 8003f90:	1c59      	adds	r1, r3, #1
 8003f92:	9107      	str	r1, [sp, #28]
 8003f94:	701a      	strb	r2, [r3, #0]
 8003f96:	e7f8      	b.n	8003f8a <__cvt+0x94>
 8003f98:	f8cd 901c 	str.w	r9, [sp, #28]
 8003f9c:	4640      	mov	r0, r8
 8003f9e:	9b07      	ldr	r3, [sp, #28]
 8003fa0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003fa2:	eba3 0308 	sub.w	r3, r3, r8
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	b008      	add	sp, #32
 8003faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003fae <__exponent>:
 8003fae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fb0:	2900      	cmp	r1, #0
 8003fb2:	bfb4      	ite	lt
 8003fb4:	232d      	movlt	r3, #45	; 0x2d
 8003fb6:	232b      	movge	r3, #43	; 0x2b
 8003fb8:	4604      	mov	r4, r0
 8003fba:	bfb8      	it	lt
 8003fbc:	4249      	neglt	r1, r1
 8003fbe:	2909      	cmp	r1, #9
 8003fc0:	f804 2b02 	strb.w	r2, [r4], #2
 8003fc4:	7043      	strb	r3, [r0, #1]
 8003fc6:	dd21      	ble.n	800400c <__exponent+0x5e>
 8003fc8:	f10d 0307 	add.w	r3, sp, #7
 8003fcc:	461f      	mov	r7, r3
 8003fce:	260a      	movs	r6, #10
 8003fd0:	fb91 f5f6 	sdiv	r5, r1, r6
 8003fd4:	fb06 1115 	mls	r1, r6, r5, r1
 8003fd8:	2d09      	cmp	r5, #9
 8003fda:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003fde:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003fe2:	f103 32ff 	add.w	r2, r3, #4294967295
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	dc09      	bgt.n	8003ffe <__exponent+0x50>
 8003fea:	3130      	adds	r1, #48	; 0x30
 8003fec:	3b02      	subs	r3, #2
 8003fee:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003ff2:	42bb      	cmp	r3, r7
 8003ff4:	4622      	mov	r2, r4
 8003ff6:	d304      	bcc.n	8004002 <__exponent+0x54>
 8003ff8:	1a10      	subs	r0, r2, r0
 8003ffa:	b003      	add	sp, #12
 8003ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ffe:	4613      	mov	r3, r2
 8004000:	e7e6      	b.n	8003fd0 <__exponent+0x22>
 8004002:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004006:	f804 2b01 	strb.w	r2, [r4], #1
 800400a:	e7f2      	b.n	8003ff2 <__exponent+0x44>
 800400c:	2330      	movs	r3, #48	; 0x30
 800400e:	4419      	add	r1, r3
 8004010:	7083      	strb	r3, [r0, #2]
 8004012:	1d02      	adds	r2, r0, #4
 8004014:	70c1      	strb	r1, [r0, #3]
 8004016:	e7ef      	b.n	8003ff8 <__exponent+0x4a>

08004018 <_printf_float>:
 8004018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800401c:	b091      	sub	sp, #68	; 0x44
 800401e:	460c      	mov	r4, r1
 8004020:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004022:	4693      	mov	fp, r2
 8004024:	461e      	mov	r6, r3
 8004026:	4605      	mov	r5, r0
 8004028:	f001 fb36 	bl	8005698 <_localeconv_r>
 800402c:	6803      	ldr	r3, [r0, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	9309      	str	r3, [sp, #36]	; 0x24
 8004032:	f7fc f88d 	bl	8000150 <strlen>
 8004036:	2300      	movs	r3, #0
 8004038:	930e      	str	r3, [sp, #56]	; 0x38
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	900a      	str	r0, [sp, #40]	; 0x28
 800403e:	3307      	adds	r3, #7
 8004040:	f023 0307 	bic.w	r3, r3, #7
 8004044:	f103 0208 	add.w	r2, r3, #8
 8004048:	f894 8018 	ldrb.w	r8, [r4, #24]
 800404c:	f8d4 a000 	ldr.w	sl, [r4]
 8004050:	603a      	str	r2, [r7, #0]
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800405a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800405e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004062:	930b      	str	r3, [sp, #44]	; 0x2c
 8004064:	f04f 32ff 	mov.w	r2, #4294967295
 8004068:	4ba6      	ldr	r3, [pc, #664]	; (8004304 <_printf_float+0x2ec>)
 800406a:	4638      	mov	r0, r7
 800406c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800406e:	f7fc fccd 	bl	8000a0c <__aeabi_dcmpun>
 8004072:	bb68      	cbnz	r0, 80040d0 <_printf_float+0xb8>
 8004074:	f04f 32ff 	mov.w	r2, #4294967295
 8004078:	4ba2      	ldr	r3, [pc, #648]	; (8004304 <_printf_float+0x2ec>)
 800407a:	4638      	mov	r0, r7
 800407c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800407e:	f7fc fca7 	bl	80009d0 <__aeabi_dcmple>
 8004082:	bb28      	cbnz	r0, 80040d0 <_printf_float+0xb8>
 8004084:	2200      	movs	r2, #0
 8004086:	2300      	movs	r3, #0
 8004088:	4638      	mov	r0, r7
 800408a:	4649      	mov	r1, r9
 800408c:	f7fc fc96 	bl	80009bc <__aeabi_dcmplt>
 8004090:	b110      	cbz	r0, 8004098 <_printf_float+0x80>
 8004092:	232d      	movs	r3, #45	; 0x2d
 8004094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004098:	4f9b      	ldr	r7, [pc, #620]	; (8004308 <_printf_float+0x2f0>)
 800409a:	4b9c      	ldr	r3, [pc, #624]	; (800430c <_printf_float+0x2f4>)
 800409c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040a0:	bf98      	it	ls
 80040a2:	461f      	movls	r7, r3
 80040a4:	2303      	movs	r3, #3
 80040a6:	f04f 0900 	mov.w	r9, #0
 80040aa:	6123      	str	r3, [r4, #16]
 80040ac:	f02a 0304 	bic.w	r3, sl, #4
 80040b0:	6023      	str	r3, [r4, #0]
 80040b2:	9600      	str	r6, [sp, #0]
 80040b4:	465b      	mov	r3, fp
 80040b6:	aa0f      	add	r2, sp, #60	; 0x3c
 80040b8:	4621      	mov	r1, r4
 80040ba:	4628      	mov	r0, r5
 80040bc:	f000 f9e2 	bl	8004484 <_printf_common>
 80040c0:	3001      	adds	r0, #1
 80040c2:	f040 8090 	bne.w	80041e6 <_printf_float+0x1ce>
 80040c6:	f04f 30ff 	mov.w	r0, #4294967295
 80040ca:	b011      	add	sp, #68	; 0x44
 80040cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d0:	463a      	mov	r2, r7
 80040d2:	464b      	mov	r3, r9
 80040d4:	4638      	mov	r0, r7
 80040d6:	4649      	mov	r1, r9
 80040d8:	f7fc fc98 	bl	8000a0c <__aeabi_dcmpun>
 80040dc:	b110      	cbz	r0, 80040e4 <_printf_float+0xcc>
 80040de:	4f8c      	ldr	r7, [pc, #560]	; (8004310 <_printf_float+0x2f8>)
 80040e0:	4b8c      	ldr	r3, [pc, #560]	; (8004314 <_printf_float+0x2fc>)
 80040e2:	e7db      	b.n	800409c <_printf_float+0x84>
 80040e4:	6863      	ldr	r3, [r4, #4]
 80040e6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80040ea:	1c59      	adds	r1, r3, #1
 80040ec:	a80d      	add	r0, sp, #52	; 0x34
 80040ee:	a90e      	add	r1, sp, #56	; 0x38
 80040f0:	d140      	bne.n	8004174 <_printf_float+0x15c>
 80040f2:	2306      	movs	r3, #6
 80040f4:	6063      	str	r3, [r4, #4]
 80040f6:	f04f 0c00 	mov.w	ip, #0
 80040fa:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80040fe:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004102:	6863      	ldr	r3, [r4, #4]
 8004104:	6022      	str	r2, [r4, #0]
 8004106:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	463a      	mov	r2, r7
 800410e:	464b      	mov	r3, r9
 8004110:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004114:	4628      	mov	r0, r5
 8004116:	f7ff feee 	bl	8003ef6 <__cvt>
 800411a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800411e:	2b47      	cmp	r3, #71	; 0x47
 8004120:	4607      	mov	r7, r0
 8004122:	d109      	bne.n	8004138 <_printf_float+0x120>
 8004124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004126:	1cd8      	adds	r0, r3, #3
 8004128:	db02      	blt.n	8004130 <_printf_float+0x118>
 800412a:	6862      	ldr	r2, [r4, #4]
 800412c:	4293      	cmp	r3, r2
 800412e:	dd47      	ble.n	80041c0 <_printf_float+0x1a8>
 8004130:	f1a8 0802 	sub.w	r8, r8, #2
 8004134:	fa5f f888 	uxtb.w	r8, r8
 8004138:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800413c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800413e:	d824      	bhi.n	800418a <_printf_float+0x172>
 8004140:	3901      	subs	r1, #1
 8004142:	4642      	mov	r2, r8
 8004144:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004148:	910d      	str	r1, [sp, #52]	; 0x34
 800414a:	f7ff ff30 	bl	8003fae <__exponent>
 800414e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004150:	4681      	mov	r9, r0
 8004152:	1813      	adds	r3, r2, r0
 8004154:	2a01      	cmp	r2, #1
 8004156:	6123      	str	r3, [r4, #16]
 8004158:	dc02      	bgt.n	8004160 <_printf_float+0x148>
 800415a:	6822      	ldr	r2, [r4, #0]
 800415c:	07d1      	lsls	r1, r2, #31
 800415e:	d501      	bpl.n	8004164 <_printf_float+0x14c>
 8004160:	3301      	adds	r3, #1
 8004162:	6123      	str	r3, [r4, #16]
 8004164:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0a2      	beq.n	80040b2 <_printf_float+0x9a>
 800416c:	232d      	movs	r3, #45	; 0x2d
 800416e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004172:	e79e      	b.n	80040b2 <_printf_float+0x9a>
 8004174:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004178:	f000 816e 	beq.w	8004458 <_printf_float+0x440>
 800417c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004180:	d1b9      	bne.n	80040f6 <_printf_float+0xde>
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1b7      	bne.n	80040f6 <_printf_float+0xde>
 8004186:	2301      	movs	r3, #1
 8004188:	e7b4      	b.n	80040f4 <_printf_float+0xdc>
 800418a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800418e:	d119      	bne.n	80041c4 <_printf_float+0x1ac>
 8004190:	2900      	cmp	r1, #0
 8004192:	6863      	ldr	r3, [r4, #4]
 8004194:	dd0c      	ble.n	80041b0 <_printf_float+0x198>
 8004196:	6121      	str	r1, [r4, #16]
 8004198:	b913      	cbnz	r3, 80041a0 <_printf_float+0x188>
 800419a:	6822      	ldr	r2, [r4, #0]
 800419c:	07d2      	lsls	r2, r2, #31
 800419e:	d502      	bpl.n	80041a6 <_printf_float+0x18e>
 80041a0:	3301      	adds	r3, #1
 80041a2:	440b      	add	r3, r1
 80041a4:	6123      	str	r3, [r4, #16]
 80041a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041a8:	f04f 0900 	mov.w	r9, #0
 80041ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80041ae:	e7d9      	b.n	8004164 <_printf_float+0x14c>
 80041b0:	b913      	cbnz	r3, 80041b8 <_printf_float+0x1a0>
 80041b2:	6822      	ldr	r2, [r4, #0]
 80041b4:	07d0      	lsls	r0, r2, #31
 80041b6:	d501      	bpl.n	80041bc <_printf_float+0x1a4>
 80041b8:	3302      	adds	r3, #2
 80041ba:	e7f3      	b.n	80041a4 <_printf_float+0x18c>
 80041bc:	2301      	movs	r3, #1
 80041be:	e7f1      	b.n	80041a4 <_printf_float+0x18c>
 80041c0:	f04f 0867 	mov.w	r8, #103	; 0x67
 80041c4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80041c8:	4293      	cmp	r3, r2
 80041ca:	db05      	blt.n	80041d8 <_printf_float+0x1c0>
 80041cc:	6822      	ldr	r2, [r4, #0]
 80041ce:	6123      	str	r3, [r4, #16]
 80041d0:	07d1      	lsls	r1, r2, #31
 80041d2:	d5e8      	bpl.n	80041a6 <_printf_float+0x18e>
 80041d4:	3301      	adds	r3, #1
 80041d6:	e7e5      	b.n	80041a4 <_printf_float+0x18c>
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bfcc      	ite	gt
 80041dc:	2301      	movgt	r3, #1
 80041de:	f1c3 0302 	rsble	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	e7de      	b.n	80041a4 <_printf_float+0x18c>
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	055a      	lsls	r2, r3, #21
 80041ea:	d407      	bmi.n	80041fc <_printf_float+0x1e4>
 80041ec:	6923      	ldr	r3, [r4, #16]
 80041ee:	463a      	mov	r2, r7
 80041f0:	4659      	mov	r1, fp
 80041f2:	4628      	mov	r0, r5
 80041f4:	47b0      	blx	r6
 80041f6:	3001      	adds	r0, #1
 80041f8:	d129      	bne.n	800424e <_printf_float+0x236>
 80041fa:	e764      	b.n	80040c6 <_printf_float+0xae>
 80041fc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004200:	f240 80d7 	bls.w	80043b2 <_printf_float+0x39a>
 8004204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004208:	2200      	movs	r2, #0
 800420a:	2300      	movs	r3, #0
 800420c:	f7fc fbcc 	bl	80009a8 <__aeabi_dcmpeq>
 8004210:	b388      	cbz	r0, 8004276 <_printf_float+0x25e>
 8004212:	2301      	movs	r3, #1
 8004214:	4a40      	ldr	r2, [pc, #256]	; (8004318 <_printf_float+0x300>)
 8004216:	4659      	mov	r1, fp
 8004218:	4628      	mov	r0, r5
 800421a:	47b0      	blx	r6
 800421c:	3001      	adds	r0, #1
 800421e:	f43f af52 	beq.w	80040c6 <_printf_float+0xae>
 8004222:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004226:	429a      	cmp	r2, r3
 8004228:	db02      	blt.n	8004230 <_printf_float+0x218>
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	07d8      	lsls	r0, r3, #31
 800422e:	d50e      	bpl.n	800424e <_printf_float+0x236>
 8004230:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004234:	4659      	mov	r1, fp
 8004236:	4628      	mov	r0, r5
 8004238:	47b0      	blx	r6
 800423a:	3001      	adds	r0, #1
 800423c:	f43f af43 	beq.w	80040c6 <_printf_float+0xae>
 8004240:	2700      	movs	r7, #0
 8004242:	f104 081a 	add.w	r8, r4, #26
 8004246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004248:	3b01      	subs	r3, #1
 800424a:	42bb      	cmp	r3, r7
 800424c:	dc09      	bgt.n	8004262 <_printf_float+0x24a>
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	079f      	lsls	r7, r3, #30
 8004252:	f100 80fd 	bmi.w	8004450 <_printf_float+0x438>
 8004256:	68e0      	ldr	r0, [r4, #12]
 8004258:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800425a:	4298      	cmp	r0, r3
 800425c:	bfb8      	it	lt
 800425e:	4618      	movlt	r0, r3
 8004260:	e733      	b.n	80040ca <_printf_float+0xb2>
 8004262:	2301      	movs	r3, #1
 8004264:	4642      	mov	r2, r8
 8004266:	4659      	mov	r1, fp
 8004268:	4628      	mov	r0, r5
 800426a:	47b0      	blx	r6
 800426c:	3001      	adds	r0, #1
 800426e:	f43f af2a 	beq.w	80040c6 <_printf_float+0xae>
 8004272:	3701      	adds	r7, #1
 8004274:	e7e7      	b.n	8004246 <_printf_float+0x22e>
 8004276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004278:	2b00      	cmp	r3, #0
 800427a:	dc2b      	bgt.n	80042d4 <_printf_float+0x2bc>
 800427c:	2301      	movs	r3, #1
 800427e:	4a26      	ldr	r2, [pc, #152]	; (8004318 <_printf_float+0x300>)
 8004280:	4659      	mov	r1, fp
 8004282:	4628      	mov	r0, r5
 8004284:	47b0      	blx	r6
 8004286:	3001      	adds	r0, #1
 8004288:	f43f af1d 	beq.w	80040c6 <_printf_float+0xae>
 800428c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800428e:	b923      	cbnz	r3, 800429a <_printf_float+0x282>
 8004290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004292:	b913      	cbnz	r3, 800429a <_printf_float+0x282>
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	07d9      	lsls	r1, r3, #31
 8004298:	d5d9      	bpl.n	800424e <_printf_float+0x236>
 800429a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800429e:	4659      	mov	r1, fp
 80042a0:	4628      	mov	r0, r5
 80042a2:	47b0      	blx	r6
 80042a4:	3001      	adds	r0, #1
 80042a6:	f43f af0e 	beq.w	80040c6 <_printf_float+0xae>
 80042aa:	f04f 0800 	mov.w	r8, #0
 80042ae:	f104 091a 	add.w	r9, r4, #26
 80042b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042b4:	425b      	negs	r3, r3
 80042b6:	4543      	cmp	r3, r8
 80042b8:	dc01      	bgt.n	80042be <_printf_float+0x2a6>
 80042ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042bc:	e797      	b.n	80041ee <_printf_float+0x1d6>
 80042be:	2301      	movs	r3, #1
 80042c0:	464a      	mov	r2, r9
 80042c2:	4659      	mov	r1, fp
 80042c4:	4628      	mov	r0, r5
 80042c6:	47b0      	blx	r6
 80042c8:	3001      	adds	r0, #1
 80042ca:	f43f aefc 	beq.w	80040c6 <_printf_float+0xae>
 80042ce:	f108 0801 	add.w	r8, r8, #1
 80042d2:	e7ee      	b.n	80042b2 <_printf_float+0x29a>
 80042d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042d8:	429a      	cmp	r2, r3
 80042da:	bfa8      	it	ge
 80042dc:	461a      	movge	r2, r3
 80042de:	2a00      	cmp	r2, #0
 80042e0:	4690      	mov	r8, r2
 80042e2:	dd07      	ble.n	80042f4 <_printf_float+0x2dc>
 80042e4:	4613      	mov	r3, r2
 80042e6:	4659      	mov	r1, fp
 80042e8:	463a      	mov	r2, r7
 80042ea:	4628      	mov	r0, r5
 80042ec:	47b0      	blx	r6
 80042ee:	3001      	adds	r0, #1
 80042f0:	f43f aee9 	beq.w	80040c6 <_printf_float+0xae>
 80042f4:	f104 031a 	add.w	r3, r4, #26
 80042f8:	f04f 0a00 	mov.w	sl, #0
 80042fc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004300:	930b      	str	r3, [sp, #44]	; 0x2c
 8004302:	e015      	b.n	8004330 <_printf_float+0x318>
 8004304:	7fefffff 	.word	0x7fefffff
 8004308:	08007238 	.word	0x08007238
 800430c:	08007234 	.word	0x08007234
 8004310:	08007240 	.word	0x08007240
 8004314:	0800723c 	.word	0x0800723c
 8004318:	08007244 	.word	0x08007244
 800431c:	2301      	movs	r3, #1
 800431e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004320:	4659      	mov	r1, fp
 8004322:	4628      	mov	r0, r5
 8004324:	47b0      	blx	r6
 8004326:	3001      	adds	r0, #1
 8004328:	f43f aecd 	beq.w	80040c6 <_printf_float+0xae>
 800432c:	f10a 0a01 	add.w	sl, sl, #1
 8004330:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004334:	eba9 0308 	sub.w	r3, r9, r8
 8004338:	4553      	cmp	r3, sl
 800433a:	dcef      	bgt.n	800431c <_printf_float+0x304>
 800433c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004340:	429a      	cmp	r2, r3
 8004342:	444f      	add	r7, r9
 8004344:	db14      	blt.n	8004370 <_printf_float+0x358>
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	07da      	lsls	r2, r3, #31
 800434a:	d411      	bmi.n	8004370 <_printf_float+0x358>
 800434c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800434e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004350:	eba3 0209 	sub.w	r2, r3, r9
 8004354:	eba3 0901 	sub.w	r9, r3, r1
 8004358:	4591      	cmp	r9, r2
 800435a:	bfa8      	it	ge
 800435c:	4691      	movge	r9, r2
 800435e:	f1b9 0f00 	cmp.w	r9, #0
 8004362:	dc0d      	bgt.n	8004380 <_printf_float+0x368>
 8004364:	2700      	movs	r7, #0
 8004366:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800436a:	f104 081a 	add.w	r8, r4, #26
 800436e:	e018      	b.n	80043a2 <_printf_float+0x38a>
 8004370:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004374:	4659      	mov	r1, fp
 8004376:	4628      	mov	r0, r5
 8004378:	47b0      	blx	r6
 800437a:	3001      	adds	r0, #1
 800437c:	d1e6      	bne.n	800434c <_printf_float+0x334>
 800437e:	e6a2      	b.n	80040c6 <_printf_float+0xae>
 8004380:	464b      	mov	r3, r9
 8004382:	463a      	mov	r2, r7
 8004384:	4659      	mov	r1, fp
 8004386:	4628      	mov	r0, r5
 8004388:	47b0      	blx	r6
 800438a:	3001      	adds	r0, #1
 800438c:	d1ea      	bne.n	8004364 <_printf_float+0x34c>
 800438e:	e69a      	b.n	80040c6 <_printf_float+0xae>
 8004390:	2301      	movs	r3, #1
 8004392:	4642      	mov	r2, r8
 8004394:	4659      	mov	r1, fp
 8004396:	4628      	mov	r0, r5
 8004398:	47b0      	blx	r6
 800439a:	3001      	adds	r0, #1
 800439c:	f43f ae93 	beq.w	80040c6 <_printf_float+0xae>
 80043a0:	3701      	adds	r7, #1
 80043a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	eba3 0309 	sub.w	r3, r3, r9
 80043ac:	42bb      	cmp	r3, r7
 80043ae:	dcef      	bgt.n	8004390 <_printf_float+0x378>
 80043b0:	e74d      	b.n	800424e <_printf_float+0x236>
 80043b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043b4:	2a01      	cmp	r2, #1
 80043b6:	dc01      	bgt.n	80043bc <_printf_float+0x3a4>
 80043b8:	07db      	lsls	r3, r3, #31
 80043ba:	d538      	bpl.n	800442e <_printf_float+0x416>
 80043bc:	2301      	movs	r3, #1
 80043be:	463a      	mov	r2, r7
 80043c0:	4659      	mov	r1, fp
 80043c2:	4628      	mov	r0, r5
 80043c4:	47b0      	blx	r6
 80043c6:	3001      	adds	r0, #1
 80043c8:	f43f ae7d 	beq.w	80040c6 <_printf_float+0xae>
 80043cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043d0:	4659      	mov	r1, fp
 80043d2:	4628      	mov	r0, r5
 80043d4:	47b0      	blx	r6
 80043d6:	3001      	adds	r0, #1
 80043d8:	f107 0701 	add.w	r7, r7, #1
 80043dc:	f43f ae73 	beq.w	80040c6 <_printf_float+0xae>
 80043e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043e6:	2200      	movs	r2, #0
 80043e8:	f103 38ff 	add.w	r8, r3, #4294967295
 80043ec:	2300      	movs	r3, #0
 80043ee:	f7fc fadb 	bl	80009a8 <__aeabi_dcmpeq>
 80043f2:	b9c0      	cbnz	r0, 8004426 <_printf_float+0x40e>
 80043f4:	4643      	mov	r3, r8
 80043f6:	463a      	mov	r2, r7
 80043f8:	4659      	mov	r1, fp
 80043fa:	4628      	mov	r0, r5
 80043fc:	47b0      	blx	r6
 80043fe:	3001      	adds	r0, #1
 8004400:	d10d      	bne.n	800441e <_printf_float+0x406>
 8004402:	e660      	b.n	80040c6 <_printf_float+0xae>
 8004404:	2301      	movs	r3, #1
 8004406:	4642      	mov	r2, r8
 8004408:	4659      	mov	r1, fp
 800440a:	4628      	mov	r0, r5
 800440c:	47b0      	blx	r6
 800440e:	3001      	adds	r0, #1
 8004410:	f43f ae59 	beq.w	80040c6 <_printf_float+0xae>
 8004414:	3701      	adds	r7, #1
 8004416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004418:	3b01      	subs	r3, #1
 800441a:	42bb      	cmp	r3, r7
 800441c:	dcf2      	bgt.n	8004404 <_printf_float+0x3ec>
 800441e:	464b      	mov	r3, r9
 8004420:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004424:	e6e4      	b.n	80041f0 <_printf_float+0x1d8>
 8004426:	2700      	movs	r7, #0
 8004428:	f104 081a 	add.w	r8, r4, #26
 800442c:	e7f3      	b.n	8004416 <_printf_float+0x3fe>
 800442e:	2301      	movs	r3, #1
 8004430:	e7e1      	b.n	80043f6 <_printf_float+0x3de>
 8004432:	2301      	movs	r3, #1
 8004434:	4642      	mov	r2, r8
 8004436:	4659      	mov	r1, fp
 8004438:	4628      	mov	r0, r5
 800443a:	47b0      	blx	r6
 800443c:	3001      	adds	r0, #1
 800443e:	f43f ae42 	beq.w	80040c6 <_printf_float+0xae>
 8004442:	3701      	adds	r7, #1
 8004444:	68e3      	ldr	r3, [r4, #12]
 8004446:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	42bb      	cmp	r3, r7
 800444c:	dcf1      	bgt.n	8004432 <_printf_float+0x41a>
 800444e:	e702      	b.n	8004256 <_printf_float+0x23e>
 8004450:	2700      	movs	r7, #0
 8004452:	f104 0819 	add.w	r8, r4, #25
 8004456:	e7f5      	b.n	8004444 <_printf_float+0x42c>
 8004458:	2b00      	cmp	r3, #0
 800445a:	f43f ae94 	beq.w	8004186 <_printf_float+0x16e>
 800445e:	f04f 0c00 	mov.w	ip, #0
 8004462:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004466:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800446a:	6022      	str	r2, [r4, #0]
 800446c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004470:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	463a      	mov	r2, r7
 8004478:	464b      	mov	r3, r9
 800447a:	4628      	mov	r0, r5
 800447c:	f7ff fd3b 	bl	8003ef6 <__cvt>
 8004480:	4607      	mov	r7, r0
 8004482:	e64f      	b.n	8004124 <_printf_float+0x10c>

08004484 <_printf_common>:
 8004484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004488:	4691      	mov	r9, r2
 800448a:	461f      	mov	r7, r3
 800448c:	688a      	ldr	r2, [r1, #8]
 800448e:	690b      	ldr	r3, [r1, #16]
 8004490:	4606      	mov	r6, r0
 8004492:	4293      	cmp	r3, r2
 8004494:	bfb8      	it	lt
 8004496:	4613      	movlt	r3, r2
 8004498:	f8c9 3000 	str.w	r3, [r9]
 800449c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044a0:	460c      	mov	r4, r1
 80044a2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044a6:	b112      	cbz	r2, 80044ae <_printf_common+0x2a>
 80044a8:	3301      	adds	r3, #1
 80044aa:	f8c9 3000 	str.w	r3, [r9]
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	0699      	lsls	r1, r3, #26
 80044b2:	bf42      	ittt	mi
 80044b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80044b8:	3302      	addmi	r3, #2
 80044ba:	f8c9 3000 	strmi.w	r3, [r9]
 80044be:	6825      	ldr	r5, [r4, #0]
 80044c0:	f015 0506 	ands.w	r5, r5, #6
 80044c4:	d107      	bne.n	80044d6 <_printf_common+0x52>
 80044c6:	f104 0a19 	add.w	sl, r4, #25
 80044ca:	68e3      	ldr	r3, [r4, #12]
 80044cc:	f8d9 2000 	ldr.w	r2, [r9]
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	42ab      	cmp	r3, r5
 80044d4:	dc29      	bgt.n	800452a <_printf_common+0xa6>
 80044d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80044da:	6822      	ldr	r2, [r4, #0]
 80044dc:	3300      	adds	r3, #0
 80044de:	bf18      	it	ne
 80044e0:	2301      	movne	r3, #1
 80044e2:	0692      	lsls	r2, r2, #26
 80044e4:	d42e      	bmi.n	8004544 <_printf_common+0xc0>
 80044e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044ea:	4639      	mov	r1, r7
 80044ec:	4630      	mov	r0, r6
 80044ee:	47c0      	blx	r8
 80044f0:	3001      	adds	r0, #1
 80044f2:	d021      	beq.n	8004538 <_printf_common+0xb4>
 80044f4:	6823      	ldr	r3, [r4, #0]
 80044f6:	68e5      	ldr	r5, [r4, #12]
 80044f8:	f003 0306 	and.w	r3, r3, #6
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	bf18      	it	ne
 8004500:	2500      	movne	r5, #0
 8004502:	f8d9 2000 	ldr.w	r2, [r9]
 8004506:	f04f 0900 	mov.w	r9, #0
 800450a:	bf08      	it	eq
 800450c:	1aad      	subeq	r5, r5, r2
 800450e:	68a3      	ldr	r3, [r4, #8]
 8004510:	6922      	ldr	r2, [r4, #16]
 8004512:	bf08      	it	eq
 8004514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004518:	4293      	cmp	r3, r2
 800451a:	bfc4      	itt	gt
 800451c:	1a9b      	subgt	r3, r3, r2
 800451e:	18ed      	addgt	r5, r5, r3
 8004520:	341a      	adds	r4, #26
 8004522:	454d      	cmp	r5, r9
 8004524:	d11a      	bne.n	800455c <_printf_common+0xd8>
 8004526:	2000      	movs	r0, #0
 8004528:	e008      	b.n	800453c <_printf_common+0xb8>
 800452a:	2301      	movs	r3, #1
 800452c:	4652      	mov	r2, sl
 800452e:	4639      	mov	r1, r7
 8004530:	4630      	mov	r0, r6
 8004532:	47c0      	blx	r8
 8004534:	3001      	adds	r0, #1
 8004536:	d103      	bne.n	8004540 <_printf_common+0xbc>
 8004538:	f04f 30ff 	mov.w	r0, #4294967295
 800453c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004540:	3501      	adds	r5, #1
 8004542:	e7c2      	b.n	80044ca <_printf_common+0x46>
 8004544:	2030      	movs	r0, #48	; 0x30
 8004546:	18e1      	adds	r1, r4, r3
 8004548:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004552:	4422      	add	r2, r4
 8004554:	3302      	adds	r3, #2
 8004556:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800455a:	e7c4      	b.n	80044e6 <_printf_common+0x62>
 800455c:	2301      	movs	r3, #1
 800455e:	4622      	mov	r2, r4
 8004560:	4639      	mov	r1, r7
 8004562:	4630      	mov	r0, r6
 8004564:	47c0      	blx	r8
 8004566:	3001      	adds	r0, #1
 8004568:	d0e6      	beq.n	8004538 <_printf_common+0xb4>
 800456a:	f109 0901 	add.w	r9, r9, #1
 800456e:	e7d8      	b.n	8004522 <_printf_common+0x9e>

08004570 <_printf_i>:
 8004570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004574:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004578:	460c      	mov	r4, r1
 800457a:	7e09      	ldrb	r1, [r1, #24]
 800457c:	b085      	sub	sp, #20
 800457e:	296e      	cmp	r1, #110	; 0x6e
 8004580:	4617      	mov	r7, r2
 8004582:	4606      	mov	r6, r0
 8004584:	4698      	mov	r8, r3
 8004586:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004588:	f000 80b3 	beq.w	80046f2 <_printf_i+0x182>
 800458c:	d822      	bhi.n	80045d4 <_printf_i+0x64>
 800458e:	2963      	cmp	r1, #99	; 0x63
 8004590:	d036      	beq.n	8004600 <_printf_i+0x90>
 8004592:	d80a      	bhi.n	80045aa <_printf_i+0x3a>
 8004594:	2900      	cmp	r1, #0
 8004596:	f000 80b9 	beq.w	800470c <_printf_i+0x19c>
 800459a:	2958      	cmp	r1, #88	; 0x58
 800459c:	f000 8083 	beq.w	80046a6 <_printf_i+0x136>
 80045a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80045a8:	e032      	b.n	8004610 <_printf_i+0xa0>
 80045aa:	2964      	cmp	r1, #100	; 0x64
 80045ac:	d001      	beq.n	80045b2 <_printf_i+0x42>
 80045ae:	2969      	cmp	r1, #105	; 0x69
 80045b0:	d1f6      	bne.n	80045a0 <_printf_i+0x30>
 80045b2:	6820      	ldr	r0, [r4, #0]
 80045b4:	6813      	ldr	r3, [r2, #0]
 80045b6:	0605      	lsls	r5, r0, #24
 80045b8:	f103 0104 	add.w	r1, r3, #4
 80045bc:	d52a      	bpl.n	8004614 <_printf_i+0xa4>
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6011      	str	r1, [r2, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	da03      	bge.n	80045ce <_printf_i+0x5e>
 80045c6:	222d      	movs	r2, #45	; 0x2d
 80045c8:	425b      	negs	r3, r3
 80045ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80045ce:	486f      	ldr	r0, [pc, #444]	; (800478c <_printf_i+0x21c>)
 80045d0:	220a      	movs	r2, #10
 80045d2:	e039      	b.n	8004648 <_printf_i+0xd8>
 80045d4:	2973      	cmp	r1, #115	; 0x73
 80045d6:	f000 809d 	beq.w	8004714 <_printf_i+0x1a4>
 80045da:	d808      	bhi.n	80045ee <_printf_i+0x7e>
 80045dc:	296f      	cmp	r1, #111	; 0x6f
 80045de:	d020      	beq.n	8004622 <_printf_i+0xb2>
 80045e0:	2970      	cmp	r1, #112	; 0x70
 80045e2:	d1dd      	bne.n	80045a0 <_printf_i+0x30>
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	f043 0320 	orr.w	r3, r3, #32
 80045ea:	6023      	str	r3, [r4, #0]
 80045ec:	e003      	b.n	80045f6 <_printf_i+0x86>
 80045ee:	2975      	cmp	r1, #117	; 0x75
 80045f0:	d017      	beq.n	8004622 <_printf_i+0xb2>
 80045f2:	2978      	cmp	r1, #120	; 0x78
 80045f4:	d1d4      	bne.n	80045a0 <_printf_i+0x30>
 80045f6:	2378      	movs	r3, #120	; 0x78
 80045f8:	4865      	ldr	r0, [pc, #404]	; (8004790 <_printf_i+0x220>)
 80045fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045fe:	e055      	b.n	80046ac <_printf_i+0x13c>
 8004600:	6813      	ldr	r3, [r2, #0]
 8004602:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004606:	1d19      	adds	r1, r3, #4
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6011      	str	r1, [r2, #0]
 800460c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004610:	2301      	movs	r3, #1
 8004612:	e08c      	b.n	800472e <_printf_i+0x1be>
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f010 0f40 	tst.w	r0, #64	; 0x40
 800461a:	6011      	str	r1, [r2, #0]
 800461c:	bf18      	it	ne
 800461e:	b21b      	sxthne	r3, r3
 8004620:	e7cf      	b.n	80045c2 <_printf_i+0x52>
 8004622:	6813      	ldr	r3, [r2, #0]
 8004624:	6825      	ldr	r5, [r4, #0]
 8004626:	1d18      	adds	r0, r3, #4
 8004628:	6010      	str	r0, [r2, #0]
 800462a:	0628      	lsls	r0, r5, #24
 800462c:	d501      	bpl.n	8004632 <_printf_i+0xc2>
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	e002      	b.n	8004638 <_printf_i+0xc8>
 8004632:	0668      	lsls	r0, r5, #25
 8004634:	d5fb      	bpl.n	800462e <_printf_i+0xbe>
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	296f      	cmp	r1, #111	; 0x6f
 800463a:	bf14      	ite	ne
 800463c:	220a      	movne	r2, #10
 800463e:	2208      	moveq	r2, #8
 8004640:	4852      	ldr	r0, [pc, #328]	; (800478c <_printf_i+0x21c>)
 8004642:	2100      	movs	r1, #0
 8004644:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004648:	6865      	ldr	r5, [r4, #4]
 800464a:	2d00      	cmp	r5, #0
 800464c:	60a5      	str	r5, [r4, #8]
 800464e:	f2c0 8095 	blt.w	800477c <_printf_i+0x20c>
 8004652:	6821      	ldr	r1, [r4, #0]
 8004654:	f021 0104 	bic.w	r1, r1, #4
 8004658:	6021      	str	r1, [r4, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d13d      	bne.n	80046da <_printf_i+0x16a>
 800465e:	2d00      	cmp	r5, #0
 8004660:	f040 808e 	bne.w	8004780 <_printf_i+0x210>
 8004664:	4665      	mov	r5, ip
 8004666:	2a08      	cmp	r2, #8
 8004668:	d10b      	bne.n	8004682 <_printf_i+0x112>
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	07db      	lsls	r3, r3, #31
 800466e:	d508      	bpl.n	8004682 <_printf_i+0x112>
 8004670:	6923      	ldr	r3, [r4, #16]
 8004672:	6862      	ldr	r2, [r4, #4]
 8004674:	429a      	cmp	r2, r3
 8004676:	bfde      	ittt	le
 8004678:	2330      	movle	r3, #48	; 0x30
 800467a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800467e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004682:	ebac 0305 	sub.w	r3, ip, r5
 8004686:	6123      	str	r3, [r4, #16]
 8004688:	f8cd 8000 	str.w	r8, [sp]
 800468c:	463b      	mov	r3, r7
 800468e:	aa03      	add	r2, sp, #12
 8004690:	4621      	mov	r1, r4
 8004692:	4630      	mov	r0, r6
 8004694:	f7ff fef6 	bl	8004484 <_printf_common>
 8004698:	3001      	adds	r0, #1
 800469a:	d14d      	bne.n	8004738 <_printf_i+0x1c8>
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	b005      	add	sp, #20
 80046a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046a6:	4839      	ldr	r0, [pc, #228]	; (800478c <_printf_i+0x21c>)
 80046a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80046ac:	6813      	ldr	r3, [r2, #0]
 80046ae:	6821      	ldr	r1, [r4, #0]
 80046b0:	1d1d      	adds	r5, r3, #4
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6015      	str	r5, [r2, #0]
 80046b6:	060a      	lsls	r2, r1, #24
 80046b8:	d50b      	bpl.n	80046d2 <_printf_i+0x162>
 80046ba:	07ca      	lsls	r2, r1, #31
 80046bc:	bf44      	itt	mi
 80046be:	f041 0120 	orrmi.w	r1, r1, #32
 80046c2:	6021      	strmi	r1, [r4, #0]
 80046c4:	b91b      	cbnz	r3, 80046ce <_printf_i+0x15e>
 80046c6:	6822      	ldr	r2, [r4, #0]
 80046c8:	f022 0220 	bic.w	r2, r2, #32
 80046cc:	6022      	str	r2, [r4, #0]
 80046ce:	2210      	movs	r2, #16
 80046d0:	e7b7      	b.n	8004642 <_printf_i+0xd2>
 80046d2:	064d      	lsls	r5, r1, #25
 80046d4:	bf48      	it	mi
 80046d6:	b29b      	uxthmi	r3, r3
 80046d8:	e7ef      	b.n	80046ba <_printf_i+0x14a>
 80046da:	4665      	mov	r5, ip
 80046dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80046e0:	fb02 3311 	mls	r3, r2, r1, r3
 80046e4:	5cc3      	ldrb	r3, [r0, r3]
 80046e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80046ea:	460b      	mov	r3, r1
 80046ec:	2900      	cmp	r1, #0
 80046ee:	d1f5      	bne.n	80046dc <_printf_i+0x16c>
 80046f0:	e7b9      	b.n	8004666 <_printf_i+0xf6>
 80046f2:	6813      	ldr	r3, [r2, #0]
 80046f4:	6825      	ldr	r5, [r4, #0]
 80046f6:	1d18      	adds	r0, r3, #4
 80046f8:	6961      	ldr	r1, [r4, #20]
 80046fa:	6010      	str	r0, [r2, #0]
 80046fc:	0628      	lsls	r0, r5, #24
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	d501      	bpl.n	8004706 <_printf_i+0x196>
 8004702:	6019      	str	r1, [r3, #0]
 8004704:	e002      	b.n	800470c <_printf_i+0x19c>
 8004706:	066a      	lsls	r2, r5, #25
 8004708:	d5fb      	bpl.n	8004702 <_printf_i+0x192>
 800470a:	8019      	strh	r1, [r3, #0]
 800470c:	2300      	movs	r3, #0
 800470e:	4665      	mov	r5, ip
 8004710:	6123      	str	r3, [r4, #16]
 8004712:	e7b9      	b.n	8004688 <_printf_i+0x118>
 8004714:	6813      	ldr	r3, [r2, #0]
 8004716:	1d19      	adds	r1, r3, #4
 8004718:	6011      	str	r1, [r2, #0]
 800471a:	681d      	ldr	r5, [r3, #0]
 800471c:	6862      	ldr	r2, [r4, #4]
 800471e:	2100      	movs	r1, #0
 8004720:	4628      	mov	r0, r5
 8004722:	f000 ffe1 	bl	80056e8 <memchr>
 8004726:	b108      	cbz	r0, 800472c <_printf_i+0x1bc>
 8004728:	1b40      	subs	r0, r0, r5
 800472a:	6060      	str	r0, [r4, #4]
 800472c:	6863      	ldr	r3, [r4, #4]
 800472e:	6123      	str	r3, [r4, #16]
 8004730:	2300      	movs	r3, #0
 8004732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004736:	e7a7      	b.n	8004688 <_printf_i+0x118>
 8004738:	6923      	ldr	r3, [r4, #16]
 800473a:	462a      	mov	r2, r5
 800473c:	4639      	mov	r1, r7
 800473e:	4630      	mov	r0, r6
 8004740:	47c0      	blx	r8
 8004742:	3001      	adds	r0, #1
 8004744:	d0aa      	beq.n	800469c <_printf_i+0x12c>
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	079b      	lsls	r3, r3, #30
 800474a:	d413      	bmi.n	8004774 <_printf_i+0x204>
 800474c:	68e0      	ldr	r0, [r4, #12]
 800474e:	9b03      	ldr	r3, [sp, #12]
 8004750:	4298      	cmp	r0, r3
 8004752:	bfb8      	it	lt
 8004754:	4618      	movlt	r0, r3
 8004756:	e7a3      	b.n	80046a0 <_printf_i+0x130>
 8004758:	2301      	movs	r3, #1
 800475a:	464a      	mov	r2, r9
 800475c:	4639      	mov	r1, r7
 800475e:	4630      	mov	r0, r6
 8004760:	47c0      	blx	r8
 8004762:	3001      	adds	r0, #1
 8004764:	d09a      	beq.n	800469c <_printf_i+0x12c>
 8004766:	3501      	adds	r5, #1
 8004768:	68e3      	ldr	r3, [r4, #12]
 800476a:	9a03      	ldr	r2, [sp, #12]
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	42ab      	cmp	r3, r5
 8004770:	dcf2      	bgt.n	8004758 <_printf_i+0x1e8>
 8004772:	e7eb      	b.n	800474c <_printf_i+0x1dc>
 8004774:	2500      	movs	r5, #0
 8004776:	f104 0919 	add.w	r9, r4, #25
 800477a:	e7f5      	b.n	8004768 <_printf_i+0x1f8>
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1ac      	bne.n	80046da <_printf_i+0x16a>
 8004780:	7803      	ldrb	r3, [r0, #0]
 8004782:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004786:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800478a:	e76c      	b.n	8004666 <_printf_i+0xf6>
 800478c:	08007246 	.word	0x08007246
 8004790:	08007257 	.word	0x08007257

08004794 <sniprintf>:
 8004794:	b40c      	push	{r2, r3}
 8004796:	b530      	push	{r4, r5, lr}
 8004798:	4b17      	ldr	r3, [pc, #92]	; (80047f8 <sniprintf+0x64>)
 800479a:	1e0c      	subs	r4, r1, #0
 800479c:	b09d      	sub	sp, #116	; 0x74
 800479e:	681d      	ldr	r5, [r3, #0]
 80047a0:	da08      	bge.n	80047b4 <sniprintf+0x20>
 80047a2:	238b      	movs	r3, #139	; 0x8b
 80047a4:	f04f 30ff 	mov.w	r0, #4294967295
 80047a8:	602b      	str	r3, [r5, #0]
 80047aa:	b01d      	add	sp, #116	; 0x74
 80047ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047b0:	b002      	add	sp, #8
 80047b2:	4770      	bx	lr
 80047b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80047b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80047bc:	bf0c      	ite	eq
 80047be:	4623      	moveq	r3, r4
 80047c0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80047c4:	9304      	str	r3, [sp, #16]
 80047c6:	9307      	str	r3, [sp, #28]
 80047c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047cc:	9002      	str	r0, [sp, #8]
 80047ce:	9006      	str	r0, [sp, #24]
 80047d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80047d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80047d6:	ab21      	add	r3, sp, #132	; 0x84
 80047d8:	a902      	add	r1, sp, #8
 80047da:	4628      	mov	r0, r5
 80047dc:	9301      	str	r3, [sp, #4]
 80047de:	f001 fb7b 	bl	8005ed8 <_svfiprintf_r>
 80047e2:	1c43      	adds	r3, r0, #1
 80047e4:	bfbc      	itt	lt
 80047e6:	238b      	movlt	r3, #139	; 0x8b
 80047e8:	602b      	strlt	r3, [r5, #0]
 80047ea:	2c00      	cmp	r4, #0
 80047ec:	d0dd      	beq.n	80047aa <sniprintf+0x16>
 80047ee:	2200      	movs	r2, #0
 80047f0:	9b02      	ldr	r3, [sp, #8]
 80047f2:	701a      	strb	r2, [r3, #0]
 80047f4:	e7d9      	b.n	80047aa <sniprintf+0x16>
 80047f6:	bf00      	nop
 80047f8:	20000014 	.word	0x20000014

080047fc <siprintf>:
 80047fc:	b40e      	push	{r1, r2, r3}
 80047fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004802:	b500      	push	{lr}
 8004804:	b09c      	sub	sp, #112	; 0x70
 8004806:	ab1d      	add	r3, sp, #116	; 0x74
 8004808:	9002      	str	r0, [sp, #8]
 800480a:	9006      	str	r0, [sp, #24]
 800480c:	9107      	str	r1, [sp, #28]
 800480e:	9104      	str	r1, [sp, #16]
 8004810:	4808      	ldr	r0, [pc, #32]	; (8004834 <siprintf+0x38>)
 8004812:	4909      	ldr	r1, [pc, #36]	; (8004838 <siprintf+0x3c>)
 8004814:	f853 2b04 	ldr.w	r2, [r3], #4
 8004818:	9105      	str	r1, [sp, #20]
 800481a:	6800      	ldr	r0, [r0, #0]
 800481c:	a902      	add	r1, sp, #8
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	f001 fb5a 	bl	8005ed8 <_svfiprintf_r>
 8004824:	2200      	movs	r2, #0
 8004826:	9b02      	ldr	r3, [sp, #8]
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	b01c      	add	sp, #112	; 0x70
 800482c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004830:	b003      	add	sp, #12
 8004832:	4770      	bx	lr
 8004834:	20000014 	.word	0x20000014
 8004838:	ffff0208 	.word	0xffff0208

0800483c <strtok>:
 800483c:	4b13      	ldr	r3, [pc, #76]	; (800488c <strtok+0x50>)
 800483e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004842:	681d      	ldr	r5, [r3, #0]
 8004844:	4606      	mov	r6, r0
 8004846:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8004848:	460f      	mov	r7, r1
 800484a:	b9b4      	cbnz	r4, 800487a <strtok+0x3e>
 800484c:	2050      	movs	r0, #80	; 0x50
 800484e:	f000 ff31 	bl	80056b4 <malloc>
 8004852:	65a8      	str	r0, [r5, #88]	; 0x58
 8004854:	e9c0 4400 	strd	r4, r4, [r0]
 8004858:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800485c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004860:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004864:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004868:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800486c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004870:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004874:	6184      	str	r4, [r0, #24]
 8004876:	7704      	strb	r4, [r0, #28]
 8004878:	6244      	str	r4, [r0, #36]	; 0x24
 800487a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800487c:	4639      	mov	r1, r7
 800487e:	4630      	mov	r0, r6
 8004880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004884:	2301      	movs	r3, #1
 8004886:	f000 b803 	b.w	8004890 <__strtok_r>
 800488a:	bf00      	nop
 800488c:	20000014 	.word	0x20000014

08004890 <__strtok_r>:
 8004890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004892:	b918      	cbnz	r0, 800489c <__strtok_r+0xc>
 8004894:	6810      	ldr	r0, [r2, #0]
 8004896:	b908      	cbnz	r0, 800489c <__strtok_r+0xc>
 8004898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800489a:	4620      	mov	r0, r4
 800489c:	4604      	mov	r4, r0
 800489e:	460f      	mov	r7, r1
 80048a0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80048a4:	f817 6b01 	ldrb.w	r6, [r7], #1
 80048a8:	b91e      	cbnz	r6, 80048b2 <__strtok_r+0x22>
 80048aa:	b96d      	cbnz	r5, 80048c8 <__strtok_r+0x38>
 80048ac:	6015      	str	r5, [r2, #0]
 80048ae:	4628      	mov	r0, r5
 80048b0:	e7f2      	b.n	8004898 <__strtok_r+0x8>
 80048b2:	42b5      	cmp	r5, r6
 80048b4:	d1f6      	bne.n	80048a4 <__strtok_r+0x14>
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1ef      	bne.n	800489a <__strtok_r+0xa>
 80048ba:	6014      	str	r4, [r2, #0]
 80048bc:	7003      	strb	r3, [r0, #0]
 80048be:	e7eb      	b.n	8004898 <__strtok_r+0x8>
 80048c0:	462b      	mov	r3, r5
 80048c2:	e00d      	b.n	80048e0 <__strtok_r+0x50>
 80048c4:	b926      	cbnz	r6, 80048d0 <__strtok_r+0x40>
 80048c6:	461c      	mov	r4, r3
 80048c8:	4623      	mov	r3, r4
 80048ca:	460f      	mov	r7, r1
 80048cc:	f813 5b01 	ldrb.w	r5, [r3], #1
 80048d0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80048d4:	42b5      	cmp	r5, r6
 80048d6:	d1f5      	bne.n	80048c4 <__strtok_r+0x34>
 80048d8:	2d00      	cmp	r5, #0
 80048da:	d0f1      	beq.n	80048c0 <__strtok_r+0x30>
 80048dc:	2100      	movs	r1, #0
 80048de:	7021      	strb	r1, [r4, #0]
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	e7d9      	b.n	8004898 <__strtok_r+0x8>

080048e4 <_strtol_l.isra.0>:
 80048e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e8:	4680      	mov	r8, r0
 80048ea:	4689      	mov	r9, r1
 80048ec:	4692      	mov	sl, r2
 80048ee:	461e      	mov	r6, r3
 80048f0:	460f      	mov	r7, r1
 80048f2:	463d      	mov	r5, r7
 80048f4:	9808      	ldr	r0, [sp, #32]
 80048f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80048fa:	f000 fec9 	bl	8005690 <__locale_ctype_ptr_l>
 80048fe:	4420      	add	r0, r4
 8004900:	7843      	ldrb	r3, [r0, #1]
 8004902:	f013 0308 	ands.w	r3, r3, #8
 8004906:	d132      	bne.n	800496e <_strtol_l.isra.0+0x8a>
 8004908:	2c2d      	cmp	r4, #45	; 0x2d
 800490a:	d132      	bne.n	8004972 <_strtol_l.isra.0+0x8e>
 800490c:	2201      	movs	r2, #1
 800490e:	787c      	ldrb	r4, [r7, #1]
 8004910:	1cbd      	adds	r5, r7, #2
 8004912:	2e00      	cmp	r6, #0
 8004914:	d05d      	beq.n	80049d2 <_strtol_l.isra.0+0xee>
 8004916:	2e10      	cmp	r6, #16
 8004918:	d109      	bne.n	800492e <_strtol_l.isra.0+0x4a>
 800491a:	2c30      	cmp	r4, #48	; 0x30
 800491c:	d107      	bne.n	800492e <_strtol_l.isra.0+0x4a>
 800491e:	782b      	ldrb	r3, [r5, #0]
 8004920:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004924:	2b58      	cmp	r3, #88	; 0x58
 8004926:	d14f      	bne.n	80049c8 <_strtol_l.isra.0+0xe4>
 8004928:	2610      	movs	r6, #16
 800492a:	786c      	ldrb	r4, [r5, #1]
 800492c:	3502      	adds	r5, #2
 800492e:	2a00      	cmp	r2, #0
 8004930:	bf14      	ite	ne
 8004932:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004936:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800493a:	2700      	movs	r7, #0
 800493c:	fbb1 fcf6 	udiv	ip, r1, r6
 8004940:	4638      	mov	r0, r7
 8004942:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004946:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800494a:	2b09      	cmp	r3, #9
 800494c:	d817      	bhi.n	800497e <_strtol_l.isra.0+0x9a>
 800494e:	461c      	mov	r4, r3
 8004950:	42a6      	cmp	r6, r4
 8004952:	dd23      	ble.n	800499c <_strtol_l.isra.0+0xb8>
 8004954:	1c7b      	adds	r3, r7, #1
 8004956:	d007      	beq.n	8004968 <_strtol_l.isra.0+0x84>
 8004958:	4584      	cmp	ip, r0
 800495a:	d31c      	bcc.n	8004996 <_strtol_l.isra.0+0xb2>
 800495c:	d101      	bne.n	8004962 <_strtol_l.isra.0+0x7e>
 800495e:	45a6      	cmp	lr, r4
 8004960:	db19      	blt.n	8004996 <_strtol_l.isra.0+0xb2>
 8004962:	2701      	movs	r7, #1
 8004964:	fb00 4006 	mla	r0, r0, r6, r4
 8004968:	f815 4b01 	ldrb.w	r4, [r5], #1
 800496c:	e7eb      	b.n	8004946 <_strtol_l.isra.0+0x62>
 800496e:	462f      	mov	r7, r5
 8004970:	e7bf      	b.n	80048f2 <_strtol_l.isra.0+0xe>
 8004972:	2c2b      	cmp	r4, #43	; 0x2b
 8004974:	bf04      	itt	eq
 8004976:	1cbd      	addeq	r5, r7, #2
 8004978:	787c      	ldrbeq	r4, [r7, #1]
 800497a:	461a      	mov	r2, r3
 800497c:	e7c9      	b.n	8004912 <_strtol_l.isra.0+0x2e>
 800497e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004982:	2b19      	cmp	r3, #25
 8004984:	d801      	bhi.n	800498a <_strtol_l.isra.0+0xa6>
 8004986:	3c37      	subs	r4, #55	; 0x37
 8004988:	e7e2      	b.n	8004950 <_strtol_l.isra.0+0x6c>
 800498a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800498e:	2b19      	cmp	r3, #25
 8004990:	d804      	bhi.n	800499c <_strtol_l.isra.0+0xb8>
 8004992:	3c57      	subs	r4, #87	; 0x57
 8004994:	e7dc      	b.n	8004950 <_strtol_l.isra.0+0x6c>
 8004996:	f04f 37ff 	mov.w	r7, #4294967295
 800499a:	e7e5      	b.n	8004968 <_strtol_l.isra.0+0x84>
 800499c:	1c7b      	adds	r3, r7, #1
 800499e:	d108      	bne.n	80049b2 <_strtol_l.isra.0+0xce>
 80049a0:	2322      	movs	r3, #34	; 0x22
 80049a2:	4608      	mov	r0, r1
 80049a4:	f8c8 3000 	str.w	r3, [r8]
 80049a8:	f1ba 0f00 	cmp.w	sl, #0
 80049ac:	d107      	bne.n	80049be <_strtol_l.isra.0+0xda>
 80049ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b2:	b102      	cbz	r2, 80049b6 <_strtol_l.isra.0+0xd2>
 80049b4:	4240      	negs	r0, r0
 80049b6:	f1ba 0f00 	cmp.w	sl, #0
 80049ba:	d0f8      	beq.n	80049ae <_strtol_l.isra.0+0xca>
 80049bc:	b10f      	cbz	r7, 80049c2 <_strtol_l.isra.0+0xde>
 80049be:	f105 39ff 	add.w	r9, r5, #4294967295
 80049c2:	f8ca 9000 	str.w	r9, [sl]
 80049c6:	e7f2      	b.n	80049ae <_strtol_l.isra.0+0xca>
 80049c8:	2430      	movs	r4, #48	; 0x30
 80049ca:	2e00      	cmp	r6, #0
 80049cc:	d1af      	bne.n	800492e <_strtol_l.isra.0+0x4a>
 80049ce:	2608      	movs	r6, #8
 80049d0:	e7ad      	b.n	800492e <_strtol_l.isra.0+0x4a>
 80049d2:	2c30      	cmp	r4, #48	; 0x30
 80049d4:	d0a3      	beq.n	800491e <_strtol_l.isra.0+0x3a>
 80049d6:	260a      	movs	r6, #10
 80049d8:	e7a9      	b.n	800492e <_strtol_l.isra.0+0x4a>
	...

080049dc <strtol>:
 80049dc:	4b08      	ldr	r3, [pc, #32]	; (8004a00 <strtol+0x24>)
 80049de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049e0:	681c      	ldr	r4, [r3, #0]
 80049e2:	4d08      	ldr	r5, [pc, #32]	; (8004a04 <strtol+0x28>)
 80049e4:	6a23      	ldr	r3, [r4, #32]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	bf08      	it	eq
 80049ea:	462b      	moveq	r3, r5
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	4613      	mov	r3, r2
 80049f0:	460a      	mov	r2, r1
 80049f2:	4601      	mov	r1, r0
 80049f4:	4620      	mov	r0, r4
 80049f6:	f7ff ff75 	bl	80048e4 <_strtol_l.isra.0>
 80049fa:	b003      	add	sp, #12
 80049fc:	bd30      	pop	{r4, r5, pc}
 80049fe:	bf00      	nop
 8004a00:	20000014 	.word	0x20000014
 8004a04:	20000078 	.word	0x20000078

08004a08 <quorem>:
 8004a08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0c:	6903      	ldr	r3, [r0, #16]
 8004a0e:	690c      	ldr	r4, [r1, #16]
 8004a10:	4680      	mov	r8, r0
 8004a12:	42a3      	cmp	r3, r4
 8004a14:	f2c0 8084 	blt.w	8004b20 <quorem+0x118>
 8004a18:	3c01      	subs	r4, #1
 8004a1a:	f101 0714 	add.w	r7, r1, #20
 8004a1e:	f100 0614 	add.w	r6, r0, #20
 8004a22:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004a26:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004a2a:	3501      	adds	r5, #1
 8004a2c:	fbb0 f5f5 	udiv	r5, r0, r5
 8004a30:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004a34:	eb06 030c 	add.w	r3, r6, ip
 8004a38:	eb07 090c 	add.w	r9, r7, ip
 8004a3c:	9301      	str	r3, [sp, #4]
 8004a3e:	b39d      	cbz	r5, 8004aa8 <quorem+0xa0>
 8004a40:	f04f 0a00 	mov.w	sl, #0
 8004a44:	4638      	mov	r0, r7
 8004a46:	46b6      	mov	lr, r6
 8004a48:	46d3      	mov	fp, sl
 8004a4a:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a4e:	b293      	uxth	r3, r2
 8004a50:	fb05 a303 	mla	r3, r5, r3, sl
 8004a54:	0c12      	lsrs	r2, r2, #16
 8004a56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a5a:	fb05 a202 	mla	r2, r5, r2, sl
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	ebab 0303 	sub.w	r3, fp, r3
 8004a64:	f8de b000 	ldr.w	fp, [lr]
 8004a68:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004a6c:	fa1f fb8b 	uxth.w	fp, fp
 8004a70:	445b      	add	r3, fp
 8004a72:	fa1f fb82 	uxth.w	fp, r2
 8004a76:	f8de 2000 	ldr.w	r2, [lr]
 8004a7a:	4581      	cmp	r9, r0
 8004a7c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004a80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a8a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004a8e:	f84e 3b04 	str.w	r3, [lr], #4
 8004a92:	d2da      	bcs.n	8004a4a <quorem+0x42>
 8004a94:	f856 300c 	ldr.w	r3, [r6, ip]
 8004a98:	b933      	cbnz	r3, 8004aa8 <quorem+0xa0>
 8004a9a:	9b01      	ldr	r3, [sp, #4]
 8004a9c:	3b04      	subs	r3, #4
 8004a9e:	429e      	cmp	r6, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	d331      	bcc.n	8004b08 <quorem+0x100>
 8004aa4:	f8c8 4010 	str.w	r4, [r8, #16]
 8004aa8:	4640      	mov	r0, r8
 8004aaa:	f001 f83f 	bl	8005b2c <__mcmp>
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	db26      	blt.n	8004b00 <quorem+0xf8>
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	f04f 0c00 	mov.w	ip, #0
 8004ab8:	3501      	adds	r5, #1
 8004aba:	f857 1b04 	ldr.w	r1, [r7], #4
 8004abe:	f8d0 e000 	ldr.w	lr, [r0]
 8004ac2:	b28b      	uxth	r3, r1
 8004ac4:	ebac 0303 	sub.w	r3, ip, r3
 8004ac8:	fa1f f28e 	uxth.w	r2, lr
 8004acc:	4413      	add	r3, r2
 8004ace:	0c0a      	lsrs	r2, r1, #16
 8004ad0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ad4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ade:	45b9      	cmp	r9, r7
 8004ae0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ae4:	f840 3b04 	str.w	r3, [r0], #4
 8004ae8:	d2e7      	bcs.n	8004aba <quorem+0xb2>
 8004aea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004aee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004af2:	b92a      	cbnz	r2, 8004b00 <quorem+0xf8>
 8004af4:	3b04      	subs	r3, #4
 8004af6:	429e      	cmp	r6, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	d30b      	bcc.n	8004b14 <quorem+0x10c>
 8004afc:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b00:	4628      	mov	r0, r5
 8004b02:	b003      	add	sp, #12
 8004b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	3b04      	subs	r3, #4
 8004b0c:	2a00      	cmp	r2, #0
 8004b0e:	d1c9      	bne.n	8004aa4 <quorem+0x9c>
 8004b10:	3c01      	subs	r4, #1
 8004b12:	e7c4      	b.n	8004a9e <quorem+0x96>
 8004b14:	6812      	ldr	r2, [r2, #0]
 8004b16:	3b04      	subs	r3, #4
 8004b18:	2a00      	cmp	r2, #0
 8004b1a:	d1ef      	bne.n	8004afc <quorem+0xf4>
 8004b1c:	3c01      	subs	r4, #1
 8004b1e:	e7ea      	b.n	8004af6 <quorem+0xee>
 8004b20:	2000      	movs	r0, #0
 8004b22:	e7ee      	b.n	8004b02 <quorem+0xfa>
 8004b24:	0000      	movs	r0, r0
	...

08004b28 <_dtoa_r>:
 8004b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2c:	4616      	mov	r6, r2
 8004b2e:	461f      	mov	r7, r3
 8004b30:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004b32:	b095      	sub	sp, #84	; 0x54
 8004b34:	4604      	mov	r4, r0
 8004b36:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004b3a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004b3e:	b93d      	cbnz	r5, 8004b50 <_dtoa_r+0x28>
 8004b40:	2010      	movs	r0, #16
 8004b42:	f000 fdb7 	bl	80056b4 <malloc>
 8004b46:	6260      	str	r0, [r4, #36]	; 0x24
 8004b48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004b4c:	6005      	str	r5, [r0, #0]
 8004b4e:	60c5      	str	r5, [r0, #12]
 8004b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b52:	6819      	ldr	r1, [r3, #0]
 8004b54:	b151      	cbz	r1, 8004b6c <_dtoa_r+0x44>
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	2301      	movs	r3, #1
 8004b5a:	4093      	lsls	r3, r2
 8004b5c:	604a      	str	r2, [r1, #4]
 8004b5e:	608b      	str	r3, [r1, #8]
 8004b60:	4620      	mov	r0, r4
 8004b62:	f000 fe03 	bl	800576c <_Bfree>
 8004b66:	2200      	movs	r2, #0
 8004b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	1e3b      	subs	r3, r7, #0
 8004b6e:	bfaf      	iteee	ge
 8004b70:	2300      	movge	r3, #0
 8004b72:	2201      	movlt	r2, #1
 8004b74:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004b78:	9303      	strlt	r3, [sp, #12]
 8004b7a:	bfac      	ite	ge
 8004b7c:	f8c8 3000 	strge.w	r3, [r8]
 8004b80:	f8c8 2000 	strlt.w	r2, [r8]
 8004b84:	4bae      	ldr	r3, [pc, #696]	; (8004e40 <_dtoa_r+0x318>)
 8004b86:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004b8a:	ea33 0308 	bics.w	r3, r3, r8
 8004b8e:	d11b      	bne.n	8004bc8 <_dtoa_r+0xa0>
 8004b90:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	9b02      	ldr	r3, [sp, #8]
 8004b9a:	b923      	cbnz	r3, 8004ba6 <_dtoa_r+0x7e>
 8004b9c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	f000 8545 	beq.w	8005630 <_dtoa_r+0xb08>
 8004ba6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ba8:	b953      	cbnz	r3, 8004bc0 <_dtoa_r+0x98>
 8004baa:	4ba6      	ldr	r3, [pc, #664]	; (8004e44 <_dtoa_r+0x31c>)
 8004bac:	e021      	b.n	8004bf2 <_dtoa_r+0xca>
 8004bae:	4ba6      	ldr	r3, [pc, #664]	; (8004e48 <_dtoa_r+0x320>)
 8004bb0:	9306      	str	r3, [sp, #24]
 8004bb2:	3308      	adds	r3, #8
 8004bb4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	9806      	ldr	r0, [sp, #24]
 8004bba:	b015      	add	sp, #84	; 0x54
 8004bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc0:	4ba0      	ldr	r3, [pc, #640]	; (8004e44 <_dtoa_r+0x31c>)
 8004bc2:	9306      	str	r3, [sp, #24]
 8004bc4:	3303      	adds	r3, #3
 8004bc6:	e7f5      	b.n	8004bb4 <_dtoa_r+0x8c>
 8004bc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	2300      	movs	r3, #0
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	4639      	mov	r1, r7
 8004bd4:	f7fb fee8 	bl	80009a8 <__aeabi_dcmpeq>
 8004bd8:	4682      	mov	sl, r0
 8004bda:	b160      	cbz	r0, 8004bf6 <_dtoa_r+0xce>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 8520 	beq.w	800562a <_dtoa_r+0xb02>
 8004bea:	4b98      	ldr	r3, [pc, #608]	; (8004e4c <_dtoa_r+0x324>)
 8004bec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	9306      	str	r3, [sp, #24]
 8004bf4:	e7e0      	b.n	8004bb8 <_dtoa_r+0x90>
 8004bf6:	ab12      	add	r3, sp, #72	; 0x48
 8004bf8:	9301      	str	r3, [sp, #4]
 8004bfa:	ab13      	add	r3, sp, #76	; 0x4c
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	4632      	mov	r2, r6
 8004c00:	463b      	mov	r3, r7
 8004c02:	4620      	mov	r0, r4
 8004c04:	f001 f80a 	bl	8005c1c <__d2b>
 8004c08:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004c0c:	4683      	mov	fp, r0
 8004c0e:	2d00      	cmp	r5, #0
 8004c10:	d07d      	beq.n	8004d0e <_dtoa_r+0x1e6>
 8004c12:	46b0      	mov	r8, r6
 8004c14:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004c18:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004c1c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004c20:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004c24:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004c28:	2200      	movs	r2, #0
 8004c2a:	4b89      	ldr	r3, [pc, #548]	; (8004e50 <_dtoa_r+0x328>)
 8004c2c:	4640      	mov	r0, r8
 8004c2e:	4649      	mov	r1, r9
 8004c30:	f7fb fa9a 	bl	8000168 <__aeabi_dsub>
 8004c34:	a37c      	add	r3, pc, #496	; (adr r3, 8004e28 <_dtoa_r+0x300>)
 8004c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3a:	f7fb fc4d 	bl	80004d8 <__aeabi_dmul>
 8004c3e:	a37c      	add	r3, pc, #496	; (adr r3, 8004e30 <_dtoa_r+0x308>)
 8004c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c44:	f7fb fa92 	bl	800016c <__adddf3>
 8004c48:	4606      	mov	r6, r0
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	460f      	mov	r7, r1
 8004c4e:	f7fb fbd9 	bl	8000404 <__aeabi_i2d>
 8004c52:	a379      	add	r3, pc, #484	; (adr r3, 8004e38 <_dtoa_r+0x310>)
 8004c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c58:	f7fb fc3e 	bl	80004d8 <__aeabi_dmul>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4630      	mov	r0, r6
 8004c62:	4639      	mov	r1, r7
 8004c64:	f7fb fa82 	bl	800016c <__adddf3>
 8004c68:	4606      	mov	r6, r0
 8004c6a:	460f      	mov	r7, r1
 8004c6c:	f7fb fee4 	bl	8000a38 <__aeabi_d2iz>
 8004c70:	2200      	movs	r2, #0
 8004c72:	4682      	mov	sl, r0
 8004c74:	2300      	movs	r3, #0
 8004c76:	4630      	mov	r0, r6
 8004c78:	4639      	mov	r1, r7
 8004c7a:	f7fb fe9f 	bl	80009bc <__aeabi_dcmplt>
 8004c7e:	b148      	cbz	r0, 8004c94 <_dtoa_r+0x16c>
 8004c80:	4650      	mov	r0, sl
 8004c82:	f7fb fbbf 	bl	8000404 <__aeabi_i2d>
 8004c86:	4632      	mov	r2, r6
 8004c88:	463b      	mov	r3, r7
 8004c8a:	f7fb fe8d 	bl	80009a8 <__aeabi_dcmpeq>
 8004c8e:	b908      	cbnz	r0, 8004c94 <_dtoa_r+0x16c>
 8004c90:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c94:	f1ba 0f16 	cmp.w	sl, #22
 8004c98:	d85a      	bhi.n	8004d50 <_dtoa_r+0x228>
 8004c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c9e:	496d      	ldr	r1, [pc, #436]	; (8004e54 <_dtoa_r+0x32c>)
 8004ca0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004ca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ca8:	f7fb fea6 	bl	80009f8 <__aeabi_dcmpgt>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d051      	beq.n	8004d54 <_dtoa_r+0x22c>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cb6:	930d      	str	r3, [sp, #52]	; 0x34
 8004cb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004cba:	1b5d      	subs	r5, r3, r5
 8004cbc:	1e6b      	subs	r3, r5, #1
 8004cbe:	9307      	str	r3, [sp, #28]
 8004cc0:	bf43      	ittte	mi
 8004cc2:	2300      	movmi	r3, #0
 8004cc4:	f1c5 0901 	rsbmi	r9, r5, #1
 8004cc8:	9307      	strmi	r3, [sp, #28]
 8004cca:	f04f 0900 	movpl.w	r9, #0
 8004cce:	f1ba 0f00 	cmp.w	sl, #0
 8004cd2:	db41      	blt.n	8004d58 <_dtoa_r+0x230>
 8004cd4:	9b07      	ldr	r3, [sp, #28]
 8004cd6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004cda:	4453      	add	r3, sl
 8004cdc:	9307      	str	r3, [sp, #28]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	9308      	str	r3, [sp, #32]
 8004ce2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004ce4:	2b09      	cmp	r3, #9
 8004ce6:	f200 808f 	bhi.w	8004e08 <_dtoa_r+0x2e0>
 8004cea:	2b05      	cmp	r3, #5
 8004cec:	bfc4      	itt	gt
 8004cee:	3b04      	subgt	r3, #4
 8004cf0:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004cf2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004cf4:	bfc8      	it	gt
 8004cf6:	2500      	movgt	r5, #0
 8004cf8:	f1a3 0302 	sub.w	r3, r3, #2
 8004cfc:	bfd8      	it	le
 8004cfe:	2501      	movle	r5, #1
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	f200 808d 	bhi.w	8004e20 <_dtoa_r+0x2f8>
 8004d06:	e8df f003 	tbb	[pc, r3]
 8004d0a:	7d7b      	.short	0x7d7b
 8004d0c:	6f2f      	.short	0x6f2f
 8004d0e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004d12:	441d      	add	r5, r3
 8004d14:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004d18:	2820      	cmp	r0, #32
 8004d1a:	dd13      	ble.n	8004d44 <_dtoa_r+0x21c>
 8004d1c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004d20:	9b02      	ldr	r3, [sp, #8]
 8004d22:	fa08 f800 	lsl.w	r8, r8, r0
 8004d26:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004d2a:	fa23 f000 	lsr.w	r0, r3, r0
 8004d2e:	ea48 0000 	orr.w	r0, r8, r0
 8004d32:	f7fb fb57 	bl	80003e4 <__aeabi_ui2d>
 8004d36:	2301      	movs	r3, #1
 8004d38:	4680      	mov	r8, r0
 8004d3a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004d3e:	3d01      	subs	r5, #1
 8004d40:	9310      	str	r3, [sp, #64]	; 0x40
 8004d42:	e771      	b.n	8004c28 <_dtoa_r+0x100>
 8004d44:	9b02      	ldr	r3, [sp, #8]
 8004d46:	f1c0 0020 	rsb	r0, r0, #32
 8004d4a:	fa03 f000 	lsl.w	r0, r3, r0
 8004d4e:	e7f0      	b.n	8004d32 <_dtoa_r+0x20a>
 8004d50:	2301      	movs	r3, #1
 8004d52:	e7b0      	b.n	8004cb6 <_dtoa_r+0x18e>
 8004d54:	900d      	str	r0, [sp, #52]	; 0x34
 8004d56:	e7af      	b.n	8004cb8 <_dtoa_r+0x190>
 8004d58:	f1ca 0300 	rsb	r3, sl, #0
 8004d5c:	9308      	str	r3, [sp, #32]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	eba9 090a 	sub.w	r9, r9, sl
 8004d64:	930c      	str	r3, [sp, #48]	; 0x30
 8004d66:	e7bc      	b.n	8004ce2 <_dtoa_r+0x1ba>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	dd74      	ble.n	8004e5c <_dtoa_r+0x334>
 8004d72:	4698      	mov	r8, r3
 8004d74:	9304      	str	r3, [sp, #16]
 8004d76:	2200      	movs	r2, #0
 8004d78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d7a:	6072      	str	r2, [r6, #4]
 8004d7c:	2204      	movs	r2, #4
 8004d7e:	f102 0014 	add.w	r0, r2, #20
 8004d82:	4298      	cmp	r0, r3
 8004d84:	6871      	ldr	r1, [r6, #4]
 8004d86:	d96e      	bls.n	8004e66 <_dtoa_r+0x33e>
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f000 fcbb 	bl	8005704 <_Balloc>
 8004d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d90:	6030      	str	r0, [r6, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f1b8 0f0e 	cmp.w	r8, #14
 8004d98:	9306      	str	r3, [sp, #24]
 8004d9a:	f200 80ed 	bhi.w	8004f78 <_dtoa_r+0x450>
 8004d9e:	2d00      	cmp	r5, #0
 8004da0:	f000 80ea 	beq.w	8004f78 <_dtoa_r+0x450>
 8004da4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004da8:	f1ba 0f00 	cmp.w	sl, #0
 8004dac:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004db0:	dd77      	ble.n	8004ea2 <_dtoa_r+0x37a>
 8004db2:	4a28      	ldr	r2, [pc, #160]	; (8004e54 <_dtoa_r+0x32c>)
 8004db4:	f00a 030f 	and.w	r3, sl, #15
 8004db8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004dbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004dc0:	06f0      	lsls	r0, r6, #27
 8004dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004dca:	d568      	bpl.n	8004e9e <_dtoa_r+0x376>
 8004dcc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004dd0:	4b21      	ldr	r3, [pc, #132]	; (8004e58 <_dtoa_r+0x330>)
 8004dd2:	2503      	movs	r5, #3
 8004dd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004dd8:	f7fb fca8 	bl	800072c <__aeabi_ddiv>
 8004ddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004de0:	f006 060f 	and.w	r6, r6, #15
 8004de4:	4f1c      	ldr	r7, [pc, #112]	; (8004e58 <_dtoa_r+0x330>)
 8004de6:	e04f      	b.n	8004e88 <_dtoa_r+0x360>
 8004de8:	2301      	movs	r3, #1
 8004dea:	9309      	str	r3, [sp, #36]	; 0x24
 8004dec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004dee:	4453      	add	r3, sl
 8004df0:	f103 0801 	add.w	r8, r3, #1
 8004df4:	9304      	str	r3, [sp, #16]
 8004df6:	4643      	mov	r3, r8
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	bfb8      	it	lt
 8004dfc:	2301      	movlt	r3, #1
 8004dfe:	e7ba      	b.n	8004d76 <_dtoa_r+0x24e>
 8004e00:	2300      	movs	r3, #0
 8004e02:	e7b2      	b.n	8004d6a <_dtoa_r+0x242>
 8004e04:	2300      	movs	r3, #0
 8004e06:	e7f0      	b.n	8004dea <_dtoa_r+0x2c2>
 8004e08:	2501      	movs	r5, #1
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	9509      	str	r5, [sp, #36]	; 0x24
 8004e0e:	931e      	str	r3, [sp, #120]	; 0x78
 8004e10:	f04f 33ff 	mov.w	r3, #4294967295
 8004e14:	2200      	movs	r2, #0
 8004e16:	9304      	str	r3, [sp, #16]
 8004e18:	4698      	mov	r8, r3
 8004e1a:	2312      	movs	r3, #18
 8004e1c:	921f      	str	r2, [sp, #124]	; 0x7c
 8004e1e:	e7aa      	b.n	8004d76 <_dtoa_r+0x24e>
 8004e20:	2301      	movs	r3, #1
 8004e22:	9309      	str	r3, [sp, #36]	; 0x24
 8004e24:	e7f4      	b.n	8004e10 <_dtoa_r+0x2e8>
 8004e26:	bf00      	nop
 8004e28:	636f4361 	.word	0x636f4361
 8004e2c:	3fd287a7 	.word	0x3fd287a7
 8004e30:	8b60c8b3 	.word	0x8b60c8b3
 8004e34:	3fc68a28 	.word	0x3fc68a28
 8004e38:	509f79fb 	.word	0x509f79fb
 8004e3c:	3fd34413 	.word	0x3fd34413
 8004e40:	7ff00000 	.word	0x7ff00000
 8004e44:	08007271 	.word	0x08007271
 8004e48:	08007268 	.word	0x08007268
 8004e4c:	08007245 	.word	0x08007245
 8004e50:	3ff80000 	.word	0x3ff80000
 8004e54:	080072a8 	.word	0x080072a8
 8004e58:	08007280 	.word	0x08007280
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	9304      	str	r3, [sp, #16]
 8004e60:	4698      	mov	r8, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	e7da      	b.n	8004e1c <_dtoa_r+0x2f4>
 8004e66:	3101      	adds	r1, #1
 8004e68:	6071      	str	r1, [r6, #4]
 8004e6a:	0052      	lsls	r2, r2, #1
 8004e6c:	e787      	b.n	8004d7e <_dtoa_r+0x256>
 8004e6e:	07f1      	lsls	r1, r6, #31
 8004e70:	d508      	bpl.n	8004e84 <_dtoa_r+0x35c>
 8004e72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e7a:	f7fb fb2d 	bl	80004d8 <__aeabi_dmul>
 8004e7e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e82:	3501      	adds	r5, #1
 8004e84:	1076      	asrs	r6, r6, #1
 8004e86:	3708      	adds	r7, #8
 8004e88:	2e00      	cmp	r6, #0
 8004e8a:	d1f0      	bne.n	8004e6e <_dtoa_r+0x346>
 8004e8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e94:	f7fb fc4a 	bl	800072c <__aeabi_ddiv>
 8004e98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e9c:	e01b      	b.n	8004ed6 <_dtoa_r+0x3ae>
 8004e9e:	2502      	movs	r5, #2
 8004ea0:	e7a0      	b.n	8004de4 <_dtoa_r+0x2bc>
 8004ea2:	f000 80a4 	beq.w	8004fee <_dtoa_r+0x4c6>
 8004ea6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004eaa:	f1ca 0600 	rsb	r6, sl, #0
 8004eae:	4ba0      	ldr	r3, [pc, #640]	; (8005130 <_dtoa_r+0x608>)
 8004eb0:	f006 020f 	and.w	r2, r6, #15
 8004eb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	f7fb fb0c 	bl	80004d8 <__aeabi_dmul>
 8004ec0:	2502      	movs	r5, #2
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ec8:	4f9a      	ldr	r7, [pc, #616]	; (8005134 <_dtoa_r+0x60c>)
 8004eca:	1136      	asrs	r6, r6, #4
 8004ecc:	2e00      	cmp	r6, #0
 8004ece:	f040 8083 	bne.w	8004fd8 <_dtoa_r+0x4b0>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1e0      	bne.n	8004e98 <_dtoa_r+0x370>
 8004ed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 808a 	beq.w	8004ff2 <_dtoa_r+0x4ca>
 8004ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ee2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004ee6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004eea:	2200      	movs	r2, #0
 8004eec:	4b92      	ldr	r3, [pc, #584]	; (8005138 <_dtoa_r+0x610>)
 8004eee:	f7fb fd65 	bl	80009bc <__aeabi_dcmplt>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d07d      	beq.n	8004ff2 <_dtoa_r+0x4ca>
 8004ef6:	f1b8 0f00 	cmp.w	r8, #0
 8004efa:	d07a      	beq.n	8004ff2 <_dtoa_r+0x4ca>
 8004efc:	9b04      	ldr	r3, [sp, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	dd36      	ble.n	8004f70 <_dtoa_r+0x448>
 8004f02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f06:	2200      	movs	r2, #0
 8004f08:	4b8c      	ldr	r3, [pc, #560]	; (800513c <_dtoa_r+0x614>)
 8004f0a:	f7fb fae5 	bl	80004d8 <__aeabi_dmul>
 8004f0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f12:	9e04      	ldr	r6, [sp, #16]
 8004f14:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004f18:	3501      	adds	r5, #1
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	f7fb fa72 	bl	8000404 <__aeabi_i2d>
 8004f20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f24:	f7fb fad8 	bl	80004d8 <__aeabi_dmul>
 8004f28:	2200      	movs	r2, #0
 8004f2a:	4b85      	ldr	r3, [pc, #532]	; (8005140 <_dtoa_r+0x618>)
 8004f2c:	f7fb f91e 	bl	800016c <__adddf3>
 8004f30:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004f34:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004f38:	950b      	str	r5, [sp, #44]	; 0x2c
 8004f3a:	2e00      	cmp	r6, #0
 8004f3c:	d15c      	bne.n	8004ff8 <_dtoa_r+0x4d0>
 8004f3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f42:	2200      	movs	r2, #0
 8004f44:	4b7f      	ldr	r3, [pc, #508]	; (8005144 <_dtoa_r+0x61c>)
 8004f46:	f7fb f90f 	bl	8000168 <__aeabi_dsub>
 8004f4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f4c:	462b      	mov	r3, r5
 8004f4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f52:	f7fb fd51 	bl	80009f8 <__aeabi_dcmpgt>
 8004f56:	2800      	cmp	r0, #0
 8004f58:	f040 8281 	bne.w	800545e <_dtoa_r+0x936>
 8004f5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f62:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004f66:	f7fb fd29 	bl	80009bc <__aeabi_dcmplt>
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	f040 8275 	bne.w	800545a <_dtoa_r+0x932>
 8004f70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004f74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f2c0 814b 	blt.w	8005216 <_dtoa_r+0x6ee>
 8004f80:	f1ba 0f0e 	cmp.w	sl, #14
 8004f84:	f300 8147 	bgt.w	8005216 <_dtoa_r+0x6ee>
 8004f88:	4b69      	ldr	r3, [pc, #420]	; (8005130 <_dtoa_r+0x608>)
 8004f8a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f96:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f280 80d7 	bge.w	800514c <_dtoa_r+0x624>
 8004f9e:	f1b8 0f00 	cmp.w	r8, #0
 8004fa2:	f300 80d3 	bgt.w	800514c <_dtoa_r+0x624>
 8004fa6:	f040 8257 	bne.w	8005458 <_dtoa_r+0x930>
 8004faa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	4b64      	ldr	r3, [pc, #400]	; (8005144 <_dtoa_r+0x61c>)
 8004fb2:	f7fb fa91 	bl	80004d8 <__aeabi_dmul>
 8004fb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fba:	f7fb fd13 	bl	80009e4 <__aeabi_dcmpge>
 8004fbe:	4646      	mov	r6, r8
 8004fc0:	4647      	mov	r7, r8
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	f040 822d 	bne.w	8005422 <_dtoa_r+0x8fa>
 8004fc8:	9b06      	ldr	r3, [sp, #24]
 8004fca:	9a06      	ldr	r2, [sp, #24]
 8004fcc:	1c5d      	adds	r5, r3, #1
 8004fce:	2331      	movs	r3, #49	; 0x31
 8004fd0:	f10a 0a01 	add.w	sl, sl, #1
 8004fd4:	7013      	strb	r3, [r2, #0]
 8004fd6:	e228      	b.n	800542a <_dtoa_r+0x902>
 8004fd8:	07f2      	lsls	r2, r6, #31
 8004fda:	d505      	bpl.n	8004fe8 <_dtoa_r+0x4c0>
 8004fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fe0:	f7fb fa7a 	bl	80004d8 <__aeabi_dmul>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	3501      	adds	r5, #1
 8004fe8:	1076      	asrs	r6, r6, #1
 8004fea:	3708      	adds	r7, #8
 8004fec:	e76e      	b.n	8004ecc <_dtoa_r+0x3a4>
 8004fee:	2502      	movs	r5, #2
 8004ff0:	e771      	b.n	8004ed6 <_dtoa_r+0x3ae>
 8004ff2:	4657      	mov	r7, sl
 8004ff4:	4646      	mov	r6, r8
 8004ff6:	e790      	b.n	8004f1a <_dtoa_r+0x3f2>
 8004ff8:	4b4d      	ldr	r3, [pc, #308]	; (8005130 <_dtoa_r+0x608>)
 8004ffa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004ffe:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005004:	2b00      	cmp	r3, #0
 8005006:	d048      	beq.n	800509a <_dtoa_r+0x572>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	2000      	movs	r0, #0
 800500e:	494e      	ldr	r1, [pc, #312]	; (8005148 <_dtoa_r+0x620>)
 8005010:	f7fb fb8c 	bl	800072c <__aeabi_ddiv>
 8005014:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005018:	f7fb f8a6 	bl	8000168 <__aeabi_dsub>
 800501c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005020:	9d06      	ldr	r5, [sp, #24]
 8005022:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005026:	f7fb fd07 	bl	8000a38 <__aeabi_d2iz>
 800502a:	9011      	str	r0, [sp, #68]	; 0x44
 800502c:	f7fb f9ea 	bl	8000404 <__aeabi_i2d>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005038:	f7fb f896 	bl	8000168 <__aeabi_dsub>
 800503c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800503e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005042:	3330      	adds	r3, #48	; 0x30
 8005044:	f805 3b01 	strb.w	r3, [r5], #1
 8005048:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800504c:	f7fb fcb6 	bl	80009bc <__aeabi_dcmplt>
 8005050:	2800      	cmp	r0, #0
 8005052:	d163      	bne.n	800511c <_dtoa_r+0x5f4>
 8005054:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005058:	2000      	movs	r0, #0
 800505a:	4937      	ldr	r1, [pc, #220]	; (8005138 <_dtoa_r+0x610>)
 800505c:	f7fb f884 	bl	8000168 <__aeabi_dsub>
 8005060:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005064:	f7fb fcaa 	bl	80009bc <__aeabi_dcmplt>
 8005068:	2800      	cmp	r0, #0
 800506a:	f040 80b5 	bne.w	80051d8 <_dtoa_r+0x6b0>
 800506e:	9b06      	ldr	r3, [sp, #24]
 8005070:	1aeb      	subs	r3, r5, r3
 8005072:	429e      	cmp	r6, r3
 8005074:	f77f af7c 	ble.w	8004f70 <_dtoa_r+0x448>
 8005078:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800507c:	2200      	movs	r2, #0
 800507e:	4b2f      	ldr	r3, [pc, #188]	; (800513c <_dtoa_r+0x614>)
 8005080:	f7fb fa2a 	bl	80004d8 <__aeabi_dmul>
 8005084:	2200      	movs	r2, #0
 8005086:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800508a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800508e:	4b2b      	ldr	r3, [pc, #172]	; (800513c <_dtoa_r+0x614>)
 8005090:	f7fb fa22 	bl	80004d8 <__aeabi_dmul>
 8005094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005098:	e7c3      	b.n	8005022 <_dtoa_r+0x4fa>
 800509a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800509e:	f7fb fa1b 	bl	80004d8 <__aeabi_dmul>
 80050a2:	9b06      	ldr	r3, [sp, #24]
 80050a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80050a8:	199d      	adds	r5, r3, r6
 80050aa:	461e      	mov	r6, r3
 80050ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050b0:	f7fb fcc2 	bl	8000a38 <__aeabi_d2iz>
 80050b4:	9011      	str	r0, [sp, #68]	; 0x44
 80050b6:	f7fb f9a5 	bl	8000404 <__aeabi_i2d>
 80050ba:	4602      	mov	r2, r0
 80050bc:	460b      	mov	r3, r1
 80050be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050c2:	f7fb f851 	bl	8000168 <__aeabi_dsub>
 80050c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050cc:	3330      	adds	r3, #48	; 0x30
 80050ce:	f806 3b01 	strb.w	r3, [r6], #1
 80050d2:	42ae      	cmp	r6, r5
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	d124      	bne.n	8005124 <_dtoa_r+0x5fc>
 80050da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80050de:	4b1a      	ldr	r3, [pc, #104]	; (8005148 <_dtoa_r+0x620>)
 80050e0:	f7fb f844 	bl	800016c <__adddf3>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050ec:	f7fb fc84 	bl	80009f8 <__aeabi_dcmpgt>
 80050f0:	2800      	cmp	r0, #0
 80050f2:	d171      	bne.n	80051d8 <_dtoa_r+0x6b0>
 80050f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050f8:	2000      	movs	r0, #0
 80050fa:	4913      	ldr	r1, [pc, #76]	; (8005148 <_dtoa_r+0x620>)
 80050fc:	f7fb f834 	bl	8000168 <__aeabi_dsub>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005108:	f7fb fc58 	bl	80009bc <__aeabi_dcmplt>
 800510c:	2800      	cmp	r0, #0
 800510e:	f43f af2f 	beq.w	8004f70 <_dtoa_r+0x448>
 8005112:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005116:	1e6a      	subs	r2, r5, #1
 8005118:	2b30      	cmp	r3, #48	; 0x30
 800511a:	d001      	beq.n	8005120 <_dtoa_r+0x5f8>
 800511c:	46ba      	mov	sl, r7
 800511e:	e04a      	b.n	80051b6 <_dtoa_r+0x68e>
 8005120:	4615      	mov	r5, r2
 8005122:	e7f6      	b.n	8005112 <_dtoa_r+0x5ea>
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <_dtoa_r+0x614>)
 8005126:	f7fb f9d7 	bl	80004d8 <__aeabi_dmul>
 800512a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800512e:	e7bd      	b.n	80050ac <_dtoa_r+0x584>
 8005130:	080072a8 	.word	0x080072a8
 8005134:	08007280 	.word	0x08007280
 8005138:	3ff00000 	.word	0x3ff00000
 800513c:	40240000 	.word	0x40240000
 8005140:	401c0000 	.word	0x401c0000
 8005144:	40140000 	.word	0x40140000
 8005148:	3fe00000 	.word	0x3fe00000
 800514c:	9d06      	ldr	r5, [sp, #24]
 800514e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005152:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005156:	4630      	mov	r0, r6
 8005158:	4639      	mov	r1, r7
 800515a:	f7fb fae7 	bl	800072c <__aeabi_ddiv>
 800515e:	f7fb fc6b 	bl	8000a38 <__aeabi_d2iz>
 8005162:	4681      	mov	r9, r0
 8005164:	f7fb f94e 	bl	8000404 <__aeabi_i2d>
 8005168:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800516c:	f7fb f9b4 	bl	80004d8 <__aeabi_dmul>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	4630      	mov	r0, r6
 8005176:	4639      	mov	r1, r7
 8005178:	f7fa fff6 	bl	8000168 <__aeabi_dsub>
 800517c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005180:	f805 6b01 	strb.w	r6, [r5], #1
 8005184:	9e06      	ldr	r6, [sp, #24]
 8005186:	4602      	mov	r2, r0
 8005188:	1bae      	subs	r6, r5, r6
 800518a:	45b0      	cmp	r8, r6
 800518c:	460b      	mov	r3, r1
 800518e:	d135      	bne.n	80051fc <_dtoa_r+0x6d4>
 8005190:	f7fa ffec 	bl	800016c <__adddf3>
 8005194:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005198:	4606      	mov	r6, r0
 800519a:	460f      	mov	r7, r1
 800519c:	f7fb fc2c 	bl	80009f8 <__aeabi_dcmpgt>
 80051a0:	b9c8      	cbnz	r0, 80051d6 <_dtoa_r+0x6ae>
 80051a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051a6:	4630      	mov	r0, r6
 80051a8:	4639      	mov	r1, r7
 80051aa:	f7fb fbfd 	bl	80009a8 <__aeabi_dcmpeq>
 80051ae:	b110      	cbz	r0, 80051b6 <_dtoa_r+0x68e>
 80051b0:	f019 0f01 	tst.w	r9, #1
 80051b4:	d10f      	bne.n	80051d6 <_dtoa_r+0x6ae>
 80051b6:	4659      	mov	r1, fp
 80051b8:	4620      	mov	r0, r4
 80051ba:	f000 fad7 	bl	800576c <_Bfree>
 80051be:	2300      	movs	r3, #0
 80051c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80051c2:	702b      	strb	r3, [r5, #0]
 80051c4:	f10a 0301 	add.w	r3, sl, #1
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f43f acf3 	beq.w	8004bb8 <_dtoa_r+0x90>
 80051d2:	601d      	str	r5, [r3, #0]
 80051d4:	e4f0      	b.n	8004bb8 <_dtoa_r+0x90>
 80051d6:	4657      	mov	r7, sl
 80051d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80051dc:	1e6b      	subs	r3, r5, #1
 80051de:	2a39      	cmp	r2, #57	; 0x39
 80051e0:	d106      	bne.n	80051f0 <_dtoa_r+0x6c8>
 80051e2:	9a06      	ldr	r2, [sp, #24]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d107      	bne.n	80051f8 <_dtoa_r+0x6d0>
 80051e8:	2330      	movs	r3, #48	; 0x30
 80051ea:	7013      	strb	r3, [r2, #0]
 80051ec:	4613      	mov	r3, r2
 80051ee:	3701      	adds	r7, #1
 80051f0:	781a      	ldrb	r2, [r3, #0]
 80051f2:	3201      	adds	r2, #1
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	e791      	b.n	800511c <_dtoa_r+0x5f4>
 80051f8:	461d      	mov	r5, r3
 80051fa:	e7ed      	b.n	80051d8 <_dtoa_r+0x6b0>
 80051fc:	2200      	movs	r2, #0
 80051fe:	4b99      	ldr	r3, [pc, #612]	; (8005464 <_dtoa_r+0x93c>)
 8005200:	f7fb f96a 	bl	80004d8 <__aeabi_dmul>
 8005204:	2200      	movs	r2, #0
 8005206:	2300      	movs	r3, #0
 8005208:	4606      	mov	r6, r0
 800520a:	460f      	mov	r7, r1
 800520c:	f7fb fbcc 	bl	80009a8 <__aeabi_dcmpeq>
 8005210:	2800      	cmp	r0, #0
 8005212:	d09e      	beq.n	8005152 <_dtoa_r+0x62a>
 8005214:	e7cf      	b.n	80051b6 <_dtoa_r+0x68e>
 8005216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005218:	2a00      	cmp	r2, #0
 800521a:	f000 8088 	beq.w	800532e <_dtoa_r+0x806>
 800521e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005220:	2a01      	cmp	r2, #1
 8005222:	dc6d      	bgt.n	8005300 <_dtoa_r+0x7d8>
 8005224:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005226:	2a00      	cmp	r2, #0
 8005228:	d066      	beq.n	80052f8 <_dtoa_r+0x7d0>
 800522a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800522e:	464d      	mov	r5, r9
 8005230:	9e08      	ldr	r6, [sp, #32]
 8005232:	9a07      	ldr	r2, [sp, #28]
 8005234:	2101      	movs	r1, #1
 8005236:	441a      	add	r2, r3
 8005238:	4620      	mov	r0, r4
 800523a:	4499      	add	r9, r3
 800523c:	9207      	str	r2, [sp, #28]
 800523e:	f000 fb35 	bl	80058ac <__i2b>
 8005242:	4607      	mov	r7, r0
 8005244:	2d00      	cmp	r5, #0
 8005246:	dd0b      	ble.n	8005260 <_dtoa_r+0x738>
 8005248:	9b07      	ldr	r3, [sp, #28]
 800524a:	2b00      	cmp	r3, #0
 800524c:	dd08      	ble.n	8005260 <_dtoa_r+0x738>
 800524e:	42ab      	cmp	r3, r5
 8005250:	bfa8      	it	ge
 8005252:	462b      	movge	r3, r5
 8005254:	9a07      	ldr	r2, [sp, #28]
 8005256:	eba9 0903 	sub.w	r9, r9, r3
 800525a:	1aed      	subs	r5, r5, r3
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	9307      	str	r3, [sp, #28]
 8005260:	9b08      	ldr	r3, [sp, #32]
 8005262:	b1eb      	cbz	r3, 80052a0 <_dtoa_r+0x778>
 8005264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005266:	2b00      	cmp	r3, #0
 8005268:	d065      	beq.n	8005336 <_dtoa_r+0x80e>
 800526a:	b18e      	cbz	r6, 8005290 <_dtoa_r+0x768>
 800526c:	4639      	mov	r1, r7
 800526e:	4632      	mov	r2, r6
 8005270:	4620      	mov	r0, r4
 8005272:	f000 fbb9 	bl	80059e8 <__pow5mult>
 8005276:	465a      	mov	r2, fp
 8005278:	4601      	mov	r1, r0
 800527a:	4607      	mov	r7, r0
 800527c:	4620      	mov	r0, r4
 800527e:	f000 fb1e 	bl	80058be <__multiply>
 8005282:	4659      	mov	r1, fp
 8005284:	900a      	str	r0, [sp, #40]	; 0x28
 8005286:	4620      	mov	r0, r4
 8005288:	f000 fa70 	bl	800576c <_Bfree>
 800528c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800528e:	469b      	mov	fp, r3
 8005290:	9b08      	ldr	r3, [sp, #32]
 8005292:	1b9a      	subs	r2, r3, r6
 8005294:	d004      	beq.n	80052a0 <_dtoa_r+0x778>
 8005296:	4659      	mov	r1, fp
 8005298:	4620      	mov	r0, r4
 800529a:	f000 fba5 	bl	80059e8 <__pow5mult>
 800529e:	4683      	mov	fp, r0
 80052a0:	2101      	movs	r1, #1
 80052a2:	4620      	mov	r0, r4
 80052a4:	f000 fb02 	bl	80058ac <__i2b>
 80052a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052aa:	4606      	mov	r6, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 81c6 	beq.w	800563e <_dtoa_r+0xb16>
 80052b2:	461a      	mov	r2, r3
 80052b4:	4601      	mov	r1, r0
 80052b6:	4620      	mov	r0, r4
 80052b8:	f000 fb96 	bl	80059e8 <__pow5mult>
 80052bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80052be:	4606      	mov	r6, r0
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	dc3e      	bgt.n	8005342 <_dtoa_r+0x81a>
 80052c4:	9b02      	ldr	r3, [sp, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d137      	bne.n	800533a <_dtoa_r+0x812>
 80052ca:	9b03      	ldr	r3, [sp, #12]
 80052cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d134      	bne.n	800533e <_dtoa_r+0x816>
 80052d4:	9b03      	ldr	r3, [sp, #12]
 80052d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052da:	0d1b      	lsrs	r3, r3, #20
 80052dc:	051b      	lsls	r3, r3, #20
 80052de:	b12b      	cbz	r3, 80052ec <_dtoa_r+0x7c4>
 80052e0:	9b07      	ldr	r3, [sp, #28]
 80052e2:	f109 0901 	add.w	r9, r9, #1
 80052e6:	3301      	adds	r3, #1
 80052e8:	9307      	str	r3, [sp, #28]
 80052ea:	2301      	movs	r3, #1
 80052ec:	9308      	str	r3, [sp, #32]
 80052ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d128      	bne.n	8005346 <_dtoa_r+0x81e>
 80052f4:	2001      	movs	r0, #1
 80052f6:	e02e      	b.n	8005356 <_dtoa_r+0x82e>
 80052f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80052fe:	e796      	b.n	800522e <_dtoa_r+0x706>
 8005300:	9b08      	ldr	r3, [sp, #32]
 8005302:	f108 36ff 	add.w	r6, r8, #4294967295
 8005306:	42b3      	cmp	r3, r6
 8005308:	bfb7      	itett	lt
 800530a:	9b08      	ldrlt	r3, [sp, #32]
 800530c:	1b9e      	subge	r6, r3, r6
 800530e:	1af2      	sublt	r2, r6, r3
 8005310:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005312:	bfbf      	itttt	lt
 8005314:	9608      	strlt	r6, [sp, #32]
 8005316:	189b      	addlt	r3, r3, r2
 8005318:	930c      	strlt	r3, [sp, #48]	; 0x30
 800531a:	2600      	movlt	r6, #0
 800531c:	f1b8 0f00 	cmp.w	r8, #0
 8005320:	bfb9      	ittee	lt
 8005322:	eba9 0508 	sublt.w	r5, r9, r8
 8005326:	2300      	movlt	r3, #0
 8005328:	464d      	movge	r5, r9
 800532a:	4643      	movge	r3, r8
 800532c:	e781      	b.n	8005232 <_dtoa_r+0x70a>
 800532e:	9e08      	ldr	r6, [sp, #32]
 8005330:	464d      	mov	r5, r9
 8005332:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005334:	e786      	b.n	8005244 <_dtoa_r+0x71c>
 8005336:	9a08      	ldr	r2, [sp, #32]
 8005338:	e7ad      	b.n	8005296 <_dtoa_r+0x76e>
 800533a:	2300      	movs	r3, #0
 800533c:	e7d6      	b.n	80052ec <_dtoa_r+0x7c4>
 800533e:	9b02      	ldr	r3, [sp, #8]
 8005340:	e7d4      	b.n	80052ec <_dtoa_r+0x7c4>
 8005342:	2300      	movs	r3, #0
 8005344:	9308      	str	r3, [sp, #32]
 8005346:	6933      	ldr	r3, [r6, #16]
 8005348:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800534c:	6918      	ldr	r0, [r3, #16]
 800534e:	f000 fa5f 	bl	8005810 <__hi0bits>
 8005352:	f1c0 0020 	rsb	r0, r0, #32
 8005356:	9b07      	ldr	r3, [sp, #28]
 8005358:	4418      	add	r0, r3
 800535a:	f010 001f 	ands.w	r0, r0, #31
 800535e:	d047      	beq.n	80053f0 <_dtoa_r+0x8c8>
 8005360:	f1c0 0320 	rsb	r3, r0, #32
 8005364:	2b04      	cmp	r3, #4
 8005366:	dd3b      	ble.n	80053e0 <_dtoa_r+0x8b8>
 8005368:	9b07      	ldr	r3, [sp, #28]
 800536a:	f1c0 001c 	rsb	r0, r0, #28
 800536e:	4481      	add	r9, r0
 8005370:	4405      	add	r5, r0
 8005372:	4403      	add	r3, r0
 8005374:	9307      	str	r3, [sp, #28]
 8005376:	f1b9 0f00 	cmp.w	r9, #0
 800537a:	dd05      	ble.n	8005388 <_dtoa_r+0x860>
 800537c:	4659      	mov	r1, fp
 800537e:	464a      	mov	r2, r9
 8005380:	4620      	mov	r0, r4
 8005382:	f000 fb7f 	bl	8005a84 <__lshift>
 8005386:	4683      	mov	fp, r0
 8005388:	9b07      	ldr	r3, [sp, #28]
 800538a:	2b00      	cmp	r3, #0
 800538c:	dd05      	ble.n	800539a <_dtoa_r+0x872>
 800538e:	4631      	mov	r1, r6
 8005390:	461a      	mov	r2, r3
 8005392:	4620      	mov	r0, r4
 8005394:	f000 fb76 	bl	8005a84 <__lshift>
 8005398:	4606      	mov	r6, r0
 800539a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800539c:	b353      	cbz	r3, 80053f4 <_dtoa_r+0x8cc>
 800539e:	4631      	mov	r1, r6
 80053a0:	4658      	mov	r0, fp
 80053a2:	f000 fbc3 	bl	8005b2c <__mcmp>
 80053a6:	2800      	cmp	r0, #0
 80053a8:	da24      	bge.n	80053f4 <_dtoa_r+0x8cc>
 80053aa:	2300      	movs	r3, #0
 80053ac:	4659      	mov	r1, fp
 80053ae:	220a      	movs	r2, #10
 80053b0:	4620      	mov	r0, r4
 80053b2:	f000 f9f2 	bl	800579a <__multadd>
 80053b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053bc:	4683      	mov	fp, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 8144 	beq.w	800564c <_dtoa_r+0xb24>
 80053c4:	2300      	movs	r3, #0
 80053c6:	4639      	mov	r1, r7
 80053c8:	220a      	movs	r2, #10
 80053ca:	4620      	mov	r0, r4
 80053cc:	f000 f9e5 	bl	800579a <__multadd>
 80053d0:	9b04      	ldr	r3, [sp, #16]
 80053d2:	4607      	mov	r7, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	dc4d      	bgt.n	8005474 <_dtoa_r+0x94c>
 80053d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053da:	2b02      	cmp	r3, #2
 80053dc:	dd4a      	ble.n	8005474 <_dtoa_r+0x94c>
 80053de:	e011      	b.n	8005404 <_dtoa_r+0x8dc>
 80053e0:	d0c9      	beq.n	8005376 <_dtoa_r+0x84e>
 80053e2:	9a07      	ldr	r2, [sp, #28]
 80053e4:	331c      	adds	r3, #28
 80053e6:	441a      	add	r2, r3
 80053e8:	4499      	add	r9, r3
 80053ea:	441d      	add	r5, r3
 80053ec:	4613      	mov	r3, r2
 80053ee:	e7c1      	b.n	8005374 <_dtoa_r+0x84c>
 80053f0:	4603      	mov	r3, r0
 80053f2:	e7f6      	b.n	80053e2 <_dtoa_r+0x8ba>
 80053f4:	f1b8 0f00 	cmp.w	r8, #0
 80053f8:	dc36      	bgt.n	8005468 <_dtoa_r+0x940>
 80053fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	dd33      	ble.n	8005468 <_dtoa_r+0x940>
 8005400:	f8cd 8010 	str.w	r8, [sp, #16]
 8005404:	9b04      	ldr	r3, [sp, #16]
 8005406:	b963      	cbnz	r3, 8005422 <_dtoa_r+0x8fa>
 8005408:	4631      	mov	r1, r6
 800540a:	2205      	movs	r2, #5
 800540c:	4620      	mov	r0, r4
 800540e:	f000 f9c4 	bl	800579a <__multadd>
 8005412:	4601      	mov	r1, r0
 8005414:	4606      	mov	r6, r0
 8005416:	4658      	mov	r0, fp
 8005418:	f000 fb88 	bl	8005b2c <__mcmp>
 800541c:	2800      	cmp	r0, #0
 800541e:	f73f add3 	bgt.w	8004fc8 <_dtoa_r+0x4a0>
 8005422:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005424:	9d06      	ldr	r5, [sp, #24]
 8005426:	ea6f 0a03 	mvn.w	sl, r3
 800542a:	f04f 0900 	mov.w	r9, #0
 800542e:	4631      	mov	r1, r6
 8005430:	4620      	mov	r0, r4
 8005432:	f000 f99b 	bl	800576c <_Bfree>
 8005436:	2f00      	cmp	r7, #0
 8005438:	f43f aebd 	beq.w	80051b6 <_dtoa_r+0x68e>
 800543c:	f1b9 0f00 	cmp.w	r9, #0
 8005440:	d005      	beq.n	800544e <_dtoa_r+0x926>
 8005442:	45b9      	cmp	r9, r7
 8005444:	d003      	beq.n	800544e <_dtoa_r+0x926>
 8005446:	4649      	mov	r1, r9
 8005448:	4620      	mov	r0, r4
 800544a:	f000 f98f 	bl	800576c <_Bfree>
 800544e:	4639      	mov	r1, r7
 8005450:	4620      	mov	r0, r4
 8005452:	f000 f98b 	bl	800576c <_Bfree>
 8005456:	e6ae      	b.n	80051b6 <_dtoa_r+0x68e>
 8005458:	2600      	movs	r6, #0
 800545a:	4637      	mov	r7, r6
 800545c:	e7e1      	b.n	8005422 <_dtoa_r+0x8fa>
 800545e:	46ba      	mov	sl, r7
 8005460:	4637      	mov	r7, r6
 8005462:	e5b1      	b.n	8004fc8 <_dtoa_r+0x4a0>
 8005464:	40240000 	.word	0x40240000
 8005468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800546a:	f8cd 8010 	str.w	r8, [sp, #16]
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 80f3 	beq.w	800565a <_dtoa_r+0xb32>
 8005474:	2d00      	cmp	r5, #0
 8005476:	dd05      	ble.n	8005484 <_dtoa_r+0x95c>
 8005478:	4639      	mov	r1, r7
 800547a:	462a      	mov	r2, r5
 800547c:	4620      	mov	r0, r4
 800547e:	f000 fb01 	bl	8005a84 <__lshift>
 8005482:	4607      	mov	r7, r0
 8005484:	9b08      	ldr	r3, [sp, #32]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d04c      	beq.n	8005524 <_dtoa_r+0x9fc>
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	4620      	mov	r0, r4
 800548e:	f000 f939 	bl	8005704 <_Balloc>
 8005492:	4605      	mov	r5, r0
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	f107 010c 	add.w	r1, r7, #12
 800549a:	3202      	adds	r2, #2
 800549c:	0092      	lsls	r2, r2, #2
 800549e:	300c      	adds	r0, #12
 80054a0:	f7fe fd16 	bl	8003ed0 <memcpy>
 80054a4:	2201      	movs	r2, #1
 80054a6:	4629      	mov	r1, r5
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 faeb 	bl	8005a84 <__lshift>
 80054ae:	46b9      	mov	r9, r7
 80054b0:	4607      	mov	r7, r0
 80054b2:	9b06      	ldr	r3, [sp, #24]
 80054b4:	9307      	str	r3, [sp, #28]
 80054b6:	9b02      	ldr	r3, [sp, #8]
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	9308      	str	r3, [sp, #32]
 80054be:	4631      	mov	r1, r6
 80054c0:	4658      	mov	r0, fp
 80054c2:	f7ff faa1 	bl	8004a08 <quorem>
 80054c6:	4649      	mov	r1, r9
 80054c8:	4605      	mov	r5, r0
 80054ca:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80054ce:	4658      	mov	r0, fp
 80054d0:	f000 fb2c 	bl	8005b2c <__mcmp>
 80054d4:	463a      	mov	r2, r7
 80054d6:	9002      	str	r0, [sp, #8]
 80054d8:	4631      	mov	r1, r6
 80054da:	4620      	mov	r0, r4
 80054dc:	f000 fb40 	bl	8005b60 <__mdiff>
 80054e0:	68c3      	ldr	r3, [r0, #12]
 80054e2:	4602      	mov	r2, r0
 80054e4:	bb03      	cbnz	r3, 8005528 <_dtoa_r+0xa00>
 80054e6:	4601      	mov	r1, r0
 80054e8:	9009      	str	r0, [sp, #36]	; 0x24
 80054ea:	4658      	mov	r0, fp
 80054ec:	f000 fb1e 	bl	8005b2c <__mcmp>
 80054f0:	4603      	mov	r3, r0
 80054f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054f4:	4611      	mov	r1, r2
 80054f6:	4620      	mov	r0, r4
 80054f8:	9309      	str	r3, [sp, #36]	; 0x24
 80054fa:	f000 f937 	bl	800576c <_Bfree>
 80054fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005500:	b9a3      	cbnz	r3, 800552c <_dtoa_r+0xa04>
 8005502:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005504:	b992      	cbnz	r2, 800552c <_dtoa_r+0xa04>
 8005506:	9a08      	ldr	r2, [sp, #32]
 8005508:	b982      	cbnz	r2, 800552c <_dtoa_r+0xa04>
 800550a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800550e:	d029      	beq.n	8005564 <_dtoa_r+0xa3c>
 8005510:	9b02      	ldr	r3, [sp, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	dd01      	ble.n	800551a <_dtoa_r+0x9f2>
 8005516:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800551a:	9b07      	ldr	r3, [sp, #28]
 800551c:	1c5d      	adds	r5, r3, #1
 800551e:	f883 8000 	strb.w	r8, [r3]
 8005522:	e784      	b.n	800542e <_dtoa_r+0x906>
 8005524:	4638      	mov	r0, r7
 8005526:	e7c2      	b.n	80054ae <_dtoa_r+0x986>
 8005528:	2301      	movs	r3, #1
 800552a:	e7e3      	b.n	80054f4 <_dtoa_r+0x9cc>
 800552c:	9a02      	ldr	r2, [sp, #8]
 800552e:	2a00      	cmp	r2, #0
 8005530:	db04      	blt.n	800553c <_dtoa_r+0xa14>
 8005532:	d123      	bne.n	800557c <_dtoa_r+0xa54>
 8005534:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005536:	bb0a      	cbnz	r2, 800557c <_dtoa_r+0xa54>
 8005538:	9a08      	ldr	r2, [sp, #32]
 800553a:	b9fa      	cbnz	r2, 800557c <_dtoa_r+0xa54>
 800553c:	2b00      	cmp	r3, #0
 800553e:	ddec      	ble.n	800551a <_dtoa_r+0x9f2>
 8005540:	4659      	mov	r1, fp
 8005542:	2201      	movs	r2, #1
 8005544:	4620      	mov	r0, r4
 8005546:	f000 fa9d 	bl	8005a84 <__lshift>
 800554a:	4631      	mov	r1, r6
 800554c:	4683      	mov	fp, r0
 800554e:	f000 faed 	bl	8005b2c <__mcmp>
 8005552:	2800      	cmp	r0, #0
 8005554:	dc03      	bgt.n	800555e <_dtoa_r+0xa36>
 8005556:	d1e0      	bne.n	800551a <_dtoa_r+0x9f2>
 8005558:	f018 0f01 	tst.w	r8, #1
 800555c:	d0dd      	beq.n	800551a <_dtoa_r+0x9f2>
 800555e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005562:	d1d8      	bne.n	8005516 <_dtoa_r+0x9ee>
 8005564:	9b07      	ldr	r3, [sp, #28]
 8005566:	9a07      	ldr	r2, [sp, #28]
 8005568:	1c5d      	adds	r5, r3, #1
 800556a:	2339      	movs	r3, #57	; 0x39
 800556c:	7013      	strb	r3, [r2, #0]
 800556e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005572:	1e6a      	subs	r2, r5, #1
 8005574:	2b39      	cmp	r3, #57	; 0x39
 8005576:	d04d      	beq.n	8005614 <_dtoa_r+0xaec>
 8005578:	3301      	adds	r3, #1
 800557a:	e052      	b.n	8005622 <_dtoa_r+0xafa>
 800557c:	9a07      	ldr	r2, [sp, #28]
 800557e:	2b00      	cmp	r3, #0
 8005580:	f102 0501 	add.w	r5, r2, #1
 8005584:	dd06      	ble.n	8005594 <_dtoa_r+0xa6c>
 8005586:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800558a:	d0eb      	beq.n	8005564 <_dtoa_r+0xa3c>
 800558c:	f108 0801 	add.w	r8, r8, #1
 8005590:	9b07      	ldr	r3, [sp, #28]
 8005592:	e7c4      	b.n	800551e <_dtoa_r+0x9f6>
 8005594:	9b06      	ldr	r3, [sp, #24]
 8005596:	9a04      	ldr	r2, [sp, #16]
 8005598:	1aeb      	subs	r3, r5, r3
 800559a:	4293      	cmp	r3, r2
 800559c:	f805 8c01 	strb.w	r8, [r5, #-1]
 80055a0:	d021      	beq.n	80055e6 <_dtoa_r+0xabe>
 80055a2:	4659      	mov	r1, fp
 80055a4:	2300      	movs	r3, #0
 80055a6:	220a      	movs	r2, #10
 80055a8:	4620      	mov	r0, r4
 80055aa:	f000 f8f6 	bl	800579a <__multadd>
 80055ae:	45b9      	cmp	r9, r7
 80055b0:	4683      	mov	fp, r0
 80055b2:	f04f 0300 	mov.w	r3, #0
 80055b6:	f04f 020a 	mov.w	r2, #10
 80055ba:	4649      	mov	r1, r9
 80055bc:	4620      	mov	r0, r4
 80055be:	d105      	bne.n	80055cc <_dtoa_r+0xaa4>
 80055c0:	f000 f8eb 	bl	800579a <__multadd>
 80055c4:	4681      	mov	r9, r0
 80055c6:	4607      	mov	r7, r0
 80055c8:	9507      	str	r5, [sp, #28]
 80055ca:	e778      	b.n	80054be <_dtoa_r+0x996>
 80055cc:	f000 f8e5 	bl	800579a <__multadd>
 80055d0:	4639      	mov	r1, r7
 80055d2:	4681      	mov	r9, r0
 80055d4:	2300      	movs	r3, #0
 80055d6:	220a      	movs	r2, #10
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 f8de 	bl	800579a <__multadd>
 80055de:	4607      	mov	r7, r0
 80055e0:	e7f2      	b.n	80055c8 <_dtoa_r+0xaa0>
 80055e2:	f04f 0900 	mov.w	r9, #0
 80055e6:	4659      	mov	r1, fp
 80055e8:	2201      	movs	r2, #1
 80055ea:	4620      	mov	r0, r4
 80055ec:	f000 fa4a 	bl	8005a84 <__lshift>
 80055f0:	4631      	mov	r1, r6
 80055f2:	4683      	mov	fp, r0
 80055f4:	f000 fa9a 	bl	8005b2c <__mcmp>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	dcb8      	bgt.n	800556e <_dtoa_r+0xa46>
 80055fc:	d102      	bne.n	8005604 <_dtoa_r+0xadc>
 80055fe:	f018 0f01 	tst.w	r8, #1
 8005602:	d1b4      	bne.n	800556e <_dtoa_r+0xa46>
 8005604:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005608:	1e6a      	subs	r2, r5, #1
 800560a:	2b30      	cmp	r3, #48	; 0x30
 800560c:	f47f af0f 	bne.w	800542e <_dtoa_r+0x906>
 8005610:	4615      	mov	r5, r2
 8005612:	e7f7      	b.n	8005604 <_dtoa_r+0xadc>
 8005614:	9b06      	ldr	r3, [sp, #24]
 8005616:	4293      	cmp	r3, r2
 8005618:	d105      	bne.n	8005626 <_dtoa_r+0xafe>
 800561a:	2331      	movs	r3, #49	; 0x31
 800561c:	9a06      	ldr	r2, [sp, #24]
 800561e:	f10a 0a01 	add.w	sl, sl, #1
 8005622:	7013      	strb	r3, [r2, #0]
 8005624:	e703      	b.n	800542e <_dtoa_r+0x906>
 8005626:	4615      	mov	r5, r2
 8005628:	e7a1      	b.n	800556e <_dtoa_r+0xa46>
 800562a:	4b17      	ldr	r3, [pc, #92]	; (8005688 <_dtoa_r+0xb60>)
 800562c:	f7ff bae1 	b.w	8004bf2 <_dtoa_r+0xca>
 8005630:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005632:	2b00      	cmp	r3, #0
 8005634:	f47f aabb 	bne.w	8004bae <_dtoa_r+0x86>
 8005638:	4b14      	ldr	r3, [pc, #80]	; (800568c <_dtoa_r+0xb64>)
 800563a:	f7ff bada 	b.w	8004bf2 <_dtoa_r+0xca>
 800563e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005640:	2b01      	cmp	r3, #1
 8005642:	f77f ae3f 	ble.w	80052c4 <_dtoa_r+0x79c>
 8005646:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005648:	9308      	str	r3, [sp, #32]
 800564a:	e653      	b.n	80052f4 <_dtoa_r+0x7cc>
 800564c:	9b04      	ldr	r3, [sp, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	dc03      	bgt.n	800565a <_dtoa_r+0xb32>
 8005652:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005654:	2b02      	cmp	r3, #2
 8005656:	f73f aed5 	bgt.w	8005404 <_dtoa_r+0x8dc>
 800565a:	9d06      	ldr	r5, [sp, #24]
 800565c:	4631      	mov	r1, r6
 800565e:	4658      	mov	r0, fp
 8005660:	f7ff f9d2 	bl	8004a08 <quorem>
 8005664:	9b06      	ldr	r3, [sp, #24]
 8005666:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800566a:	f805 8b01 	strb.w	r8, [r5], #1
 800566e:	9a04      	ldr	r2, [sp, #16]
 8005670:	1aeb      	subs	r3, r5, r3
 8005672:	429a      	cmp	r2, r3
 8005674:	ddb5      	ble.n	80055e2 <_dtoa_r+0xaba>
 8005676:	4659      	mov	r1, fp
 8005678:	2300      	movs	r3, #0
 800567a:	220a      	movs	r2, #10
 800567c:	4620      	mov	r0, r4
 800567e:	f000 f88c 	bl	800579a <__multadd>
 8005682:	4683      	mov	fp, r0
 8005684:	e7ea      	b.n	800565c <_dtoa_r+0xb34>
 8005686:	bf00      	nop
 8005688:	08007244 	.word	0x08007244
 800568c:	08007268 	.word	0x08007268

08005690 <__locale_ctype_ptr_l>:
 8005690:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005694:	4770      	bx	lr
	...

08005698 <_localeconv_r>:
 8005698:	4b04      	ldr	r3, [pc, #16]	; (80056ac <_localeconv_r+0x14>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6a18      	ldr	r0, [r3, #32]
 800569e:	4b04      	ldr	r3, [pc, #16]	; (80056b0 <_localeconv_r+0x18>)
 80056a0:	2800      	cmp	r0, #0
 80056a2:	bf08      	it	eq
 80056a4:	4618      	moveq	r0, r3
 80056a6:	30f0      	adds	r0, #240	; 0xf0
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	20000014 	.word	0x20000014
 80056b0:	20000078 	.word	0x20000078

080056b4 <malloc>:
 80056b4:	4b02      	ldr	r3, [pc, #8]	; (80056c0 <malloc+0xc>)
 80056b6:	4601      	mov	r1, r0
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	f000 bb59 	b.w	8005d70 <_malloc_r>
 80056be:	bf00      	nop
 80056c0:	20000014 	.word	0x20000014

080056c4 <__ascii_mbtowc>:
 80056c4:	b082      	sub	sp, #8
 80056c6:	b901      	cbnz	r1, 80056ca <__ascii_mbtowc+0x6>
 80056c8:	a901      	add	r1, sp, #4
 80056ca:	b142      	cbz	r2, 80056de <__ascii_mbtowc+0x1a>
 80056cc:	b14b      	cbz	r3, 80056e2 <__ascii_mbtowc+0x1e>
 80056ce:	7813      	ldrb	r3, [r2, #0]
 80056d0:	600b      	str	r3, [r1, #0]
 80056d2:	7812      	ldrb	r2, [r2, #0]
 80056d4:	1c10      	adds	r0, r2, #0
 80056d6:	bf18      	it	ne
 80056d8:	2001      	movne	r0, #1
 80056da:	b002      	add	sp, #8
 80056dc:	4770      	bx	lr
 80056de:	4610      	mov	r0, r2
 80056e0:	e7fb      	b.n	80056da <__ascii_mbtowc+0x16>
 80056e2:	f06f 0001 	mvn.w	r0, #1
 80056e6:	e7f8      	b.n	80056da <__ascii_mbtowc+0x16>

080056e8 <memchr>:
 80056e8:	b510      	push	{r4, lr}
 80056ea:	b2c9      	uxtb	r1, r1
 80056ec:	4402      	add	r2, r0
 80056ee:	4290      	cmp	r0, r2
 80056f0:	4603      	mov	r3, r0
 80056f2:	d101      	bne.n	80056f8 <memchr+0x10>
 80056f4:	2300      	movs	r3, #0
 80056f6:	e003      	b.n	8005700 <memchr+0x18>
 80056f8:	781c      	ldrb	r4, [r3, #0]
 80056fa:	3001      	adds	r0, #1
 80056fc:	428c      	cmp	r4, r1
 80056fe:	d1f6      	bne.n	80056ee <memchr+0x6>
 8005700:	4618      	mov	r0, r3
 8005702:	bd10      	pop	{r4, pc}

08005704 <_Balloc>:
 8005704:	b570      	push	{r4, r5, r6, lr}
 8005706:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005708:	4604      	mov	r4, r0
 800570a:	460e      	mov	r6, r1
 800570c:	b93d      	cbnz	r5, 800571e <_Balloc+0x1a>
 800570e:	2010      	movs	r0, #16
 8005710:	f7ff ffd0 	bl	80056b4 <malloc>
 8005714:	6260      	str	r0, [r4, #36]	; 0x24
 8005716:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800571a:	6005      	str	r5, [r0, #0]
 800571c:	60c5      	str	r5, [r0, #12]
 800571e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005720:	68eb      	ldr	r3, [r5, #12]
 8005722:	b183      	cbz	r3, 8005746 <_Balloc+0x42>
 8005724:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800572c:	b9b8      	cbnz	r0, 800575e <_Balloc+0x5a>
 800572e:	2101      	movs	r1, #1
 8005730:	fa01 f506 	lsl.w	r5, r1, r6
 8005734:	1d6a      	adds	r2, r5, #5
 8005736:	0092      	lsls	r2, r2, #2
 8005738:	4620      	mov	r0, r4
 800573a:	f000 fabe 	bl	8005cba <_calloc_r>
 800573e:	b160      	cbz	r0, 800575a <_Balloc+0x56>
 8005740:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005744:	e00e      	b.n	8005764 <_Balloc+0x60>
 8005746:	2221      	movs	r2, #33	; 0x21
 8005748:	2104      	movs	r1, #4
 800574a:	4620      	mov	r0, r4
 800574c:	f000 fab5 	bl	8005cba <_calloc_r>
 8005750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005752:	60e8      	str	r0, [r5, #12]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1e4      	bne.n	8005724 <_Balloc+0x20>
 800575a:	2000      	movs	r0, #0
 800575c:	bd70      	pop	{r4, r5, r6, pc}
 800575e:	6802      	ldr	r2, [r0, #0]
 8005760:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005764:	2300      	movs	r3, #0
 8005766:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800576a:	e7f7      	b.n	800575c <_Balloc+0x58>

0800576c <_Bfree>:
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005770:	4606      	mov	r6, r0
 8005772:	460d      	mov	r5, r1
 8005774:	b93c      	cbnz	r4, 8005786 <_Bfree+0x1a>
 8005776:	2010      	movs	r0, #16
 8005778:	f7ff ff9c 	bl	80056b4 <malloc>
 800577c:	6270      	str	r0, [r6, #36]	; 0x24
 800577e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005782:	6004      	str	r4, [r0, #0]
 8005784:	60c4      	str	r4, [r0, #12]
 8005786:	b13d      	cbz	r5, 8005798 <_Bfree+0x2c>
 8005788:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800578a:	686a      	ldr	r2, [r5, #4]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005792:	6029      	str	r1, [r5, #0]
 8005794:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005798:	bd70      	pop	{r4, r5, r6, pc}

0800579a <__multadd>:
 800579a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800579e:	461f      	mov	r7, r3
 80057a0:	4606      	mov	r6, r0
 80057a2:	460c      	mov	r4, r1
 80057a4:	2300      	movs	r3, #0
 80057a6:	690d      	ldr	r5, [r1, #16]
 80057a8:	f101 0c14 	add.w	ip, r1, #20
 80057ac:	f8dc 0000 	ldr.w	r0, [ip]
 80057b0:	3301      	adds	r3, #1
 80057b2:	b281      	uxth	r1, r0
 80057b4:	fb02 7101 	mla	r1, r2, r1, r7
 80057b8:	0c00      	lsrs	r0, r0, #16
 80057ba:	0c0f      	lsrs	r7, r1, #16
 80057bc:	fb02 7000 	mla	r0, r2, r0, r7
 80057c0:	b289      	uxth	r1, r1
 80057c2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80057c6:	429d      	cmp	r5, r3
 80057c8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80057cc:	f84c 1b04 	str.w	r1, [ip], #4
 80057d0:	dcec      	bgt.n	80057ac <__multadd+0x12>
 80057d2:	b1d7      	cbz	r7, 800580a <__multadd+0x70>
 80057d4:	68a3      	ldr	r3, [r4, #8]
 80057d6:	42ab      	cmp	r3, r5
 80057d8:	dc12      	bgt.n	8005800 <__multadd+0x66>
 80057da:	6861      	ldr	r1, [r4, #4]
 80057dc:	4630      	mov	r0, r6
 80057de:	3101      	adds	r1, #1
 80057e0:	f7ff ff90 	bl	8005704 <_Balloc>
 80057e4:	4680      	mov	r8, r0
 80057e6:	6922      	ldr	r2, [r4, #16]
 80057e8:	f104 010c 	add.w	r1, r4, #12
 80057ec:	3202      	adds	r2, #2
 80057ee:	0092      	lsls	r2, r2, #2
 80057f0:	300c      	adds	r0, #12
 80057f2:	f7fe fb6d 	bl	8003ed0 <memcpy>
 80057f6:	4621      	mov	r1, r4
 80057f8:	4630      	mov	r0, r6
 80057fa:	f7ff ffb7 	bl	800576c <_Bfree>
 80057fe:	4644      	mov	r4, r8
 8005800:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005804:	3501      	adds	r5, #1
 8005806:	615f      	str	r7, [r3, #20]
 8005808:	6125      	str	r5, [r4, #16]
 800580a:	4620      	mov	r0, r4
 800580c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005810 <__hi0bits>:
 8005810:	0c02      	lsrs	r2, r0, #16
 8005812:	0412      	lsls	r2, r2, #16
 8005814:	4603      	mov	r3, r0
 8005816:	b9b2      	cbnz	r2, 8005846 <__hi0bits+0x36>
 8005818:	0403      	lsls	r3, r0, #16
 800581a:	2010      	movs	r0, #16
 800581c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005820:	bf04      	itt	eq
 8005822:	021b      	lsleq	r3, r3, #8
 8005824:	3008      	addeq	r0, #8
 8005826:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800582a:	bf04      	itt	eq
 800582c:	011b      	lsleq	r3, r3, #4
 800582e:	3004      	addeq	r0, #4
 8005830:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005834:	bf04      	itt	eq
 8005836:	009b      	lsleq	r3, r3, #2
 8005838:	3002      	addeq	r0, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	db06      	blt.n	800584c <__hi0bits+0x3c>
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	d503      	bpl.n	800584a <__hi0bits+0x3a>
 8005842:	3001      	adds	r0, #1
 8005844:	4770      	bx	lr
 8005846:	2000      	movs	r0, #0
 8005848:	e7e8      	b.n	800581c <__hi0bits+0xc>
 800584a:	2020      	movs	r0, #32
 800584c:	4770      	bx	lr

0800584e <__lo0bits>:
 800584e:	6803      	ldr	r3, [r0, #0]
 8005850:	4601      	mov	r1, r0
 8005852:	f013 0207 	ands.w	r2, r3, #7
 8005856:	d00b      	beq.n	8005870 <__lo0bits+0x22>
 8005858:	07da      	lsls	r2, r3, #31
 800585a:	d423      	bmi.n	80058a4 <__lo0bits+0x56>
 800585c:	0798      	lsls	r0, r3, #30
 800585e:	bf49      	itett	mi
 8005860:	085b      	lsrmi	r3, r3, #1
 8005862:	089b      	lsrpl	r3, r3, #2
 8005864:	2001      	movmi	r0, #1
 8005866:	600b      	strmi	r3, [r1, #0]
 8005868:	bf5c      	itt	pl
 800586a:	600b      	strpl	r3, [r1, #0]
 800586c:	2002      	movpl	r0, #2
 800586e:	4770      	bx	lr
 8005870:	b298      	uxth	r0, r3
 8005872:	b9a8      	cbnz	r0, 80058a0 <__lo0bits+0x52>
 8005874:	2010      	movs	r0, #16
 8005876:	0c1b      	lsrs	r3, r3, #16
 8005878:	f013 0fff 	tst.w	r3, #255	; 0xff
 800587c:	bf04      	itt	eq
 800587e:	0a1b      	lsreq	r3, r3, #8
 8005880:	3008      	addeq	r0, #8
 8005882:	071a      	lsls	r2, r3, #28
 8005884:	bf04      	itt	eq
 8005886:	091b      	lsreq	r3, r3, #4
 8005888:	3004      	addeq	r0, #4
 800588a:	079a      	lsls	r2, r3, #30
 800588c:	bf04      	itt	eq
 800588e:	089b      	lsreq	r3, r3, #2
 8005890:	3002      	addeq	r0, #2
 8005892:	07da      	lsls	r2, r3, #31
 8005894:	d402      	bmi.n	800589c <__lo0bits+0x4e>
 8005896:	085b      	lsrs	r3, r3, #1
 8005898:	d006      	beq.n	80058a8 <__lo0bits+0x5a>
 800589a:	3001      	adds	r0, #1
 800589c:	600b      	str	r3, [r1, #0]
 800589e:	4770      	bx	lr
 80058a0:	4610      	mov	r0, r2
 80058a2:	e7e9      	b.n	8005878 <__lo0bits+0x2a>
 80058a4:	2000      	movs	r0, #0
 80058a6:	4770      	bx	lr
 80058a8:	2020      	movs	r0, #32
 80058aa:	4770      	bx	lr

080058ac <__i2b>:
 80058ac:	b510      	push	{r4, lr}
 80058ae:	460c      	mov	r4, r1
 80058b0:	2101      	movs	r1, #1
 80058b2:	f7ff ff27 	bl	8005704 <_Balloc>
 80058b6:	2201      	movs	r2, #1
 80058b8:	6144      	str	r4, [r0, #20]
 80058ba:	6102      	str	r2, [r0, #16]
 80058bc:	bd10      	pop	{r4, pc}

080058be <__multiply>:
 80058be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c2:	4614      	mov	r4, r2
 80058c4:	690a      	ldr	r2, [r1, #16]
 80058c6:	6923      	ldr	r3, [r4, #16]
 80058c8:	4688      	mov	r8, r1
 80058ca:	429a      	cmp	r2, r3
 80058cc:	bfbe      	ittt	lt
 80058ce:	460b      	movlt	r3, r1
 80058d0:	46a0      	movlt	r8, r4
 80058d2:	461c      	movlt	r4, r3
 80058d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80058d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80058dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80058e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80058e4:	eb07 0609 	add.w	r6, r7, r9
 80058e8:	42b3      	cmp	r3, r6
 80058ea:	bfb8      	it	lt
 80058ec:	3101      	addlt	r1, #1
 80058ee:	f7ff ff09 	bl	8005704 <_Balloc>
 80058f2:	f100 0514 	add.w	r5, r0, #20
 80058f6:	462b      	mov	r3, r5
 80058f8:	2200      	movs	r2, #0
 80058fa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80058fe:	4573      	cmp	r3, lr
 8005900:	d316      	bcc.n	8005930 <__multiply+0x72>
 8005902:	f104 0214 	add.w	r2, r4, #20
 8005906:	f108 0114 	add.w	r1, r8, #20
 800590a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800590e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	9b00      	ldr	r3, [sp, #0]
 8005916:	9201      	str	r2, [sp, #4]
 8005918:	4293      	cmp	r3, r2
 800591a:	d80c      	bhi.n	8005936 <__multiply+0x78>
 800591c:	2e00      	cmp	r6, #0
 800591e:	dd03      	ble.n	8005928 <__multiply+0x6a>
 8005920:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005924:	2b00      	cmp	r3, #0
 8005926:	d05d      	beq.n	80059e4 <__multiply+0x126>
 8005928:	6106      	str	r6, [r0, #16]
 800592a:	b003      	add	sp, #12
 800592c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005930:	f843 2b04 	str.w	r2, [r3], #4
 8005934:	e7e3      	b.n	80058fe <__multiply+0x40>
 8005936:	f8b2 b000 	ldrh.w	fp, [r2]
 800593a:	f1bb 0f00 	cmp.w	fp, #0
 800593e:	d023      	beq.n	8005988 <__multiply+0xca>
 8005940:	4689      	mov	r9, r1
 8005942:	46ac      	mov	ip, r5
 8005944:	f04f 0800 	mov.w	r8, #0
 8005948:	f859 4b04 	ldr.w	r4, [r9], #4
 800594c:	f8dc a000 	ldr.w	sl, [ip]
 8005950:	b2a3      	uxth	r3, r4
 8005952:	fa1f fa8a 	uxth.w	sl, sl
 8005956:	fb0b a303 	mla	r3, fp, r3, sl
 800595a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800595e:	f8dc 4000 	ldr.w	r4, [ip]
 8005962:	4443      	add	r3, r8
 8005964:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005968:	fb0b 840a 	mla	r4, fp, sl, r8
 800596c:	46e2      	mov	sl, ip
 800596e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005972:	b29b      	uxth	r3, r3
 8005974:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005978:	454f      	cmp	r7, r9
 800597a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800597e:	f84a 3b04 	str.w	r3, [sl], #4
 8005982:	d82b      	bhi.n	80059dc <__multiply+0x11e>
 8005984:	f8cc 8004 	str.w	r8, [ip, #4]
 8005988:	9b01      	ldr	r3, [sp, #4]
 800598a:	3204      	adds	r2, #4
 800598c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005990:	f1ba 0f00 	cmp.w	sl, #0
 8005994:	d020      	beq.n	80059d8 <__multiply+0x11a>
 8005996:	4689      	mov	r9, r1
 8005998:	46a8      	mov	r8, r5
 800599a:	f04f 0b00 	mov.w	fp, #0
 800599e:	682b      	ldr	r3, [r5, #0]
 80059a0:	f8b9 c000 	ldrh.w	ip, [r9]
 80059a4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	fb0a 440c 	mla	r4, sl, ip, r4
 80059ae:	46c4      	mov	ip, r8
 80059b0:	445c      	add	r4, fp
 80059b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80059b6:	f84c 3b04 	str.w	r3, [ip], #4
 80059ba:	f859 3b04 	ldr.w	r3, [r9], #4
 80059be:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80059c2:	0c1b      	lsrs	r3, r3, #16
 80059c4:	fb0a b303 	mla	r3, sl, r3, fp
 80059c8:	454f      	cmp	r7, r9
 80059ca:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80059ce:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80059d2:	d805      	bhi.n	80059e0 <__multiply+0x122>
 80059d4:	f8c8 3004 	str.w	r3, [r8, #4]
 80059d8:	3504      	adds	r5, #4
 80059da:	e79b      	b.n	8005914 <__multiply+0x56>
 80059dc:	46d4      	mov	ip, sl
 80059de:	e7b3      	b.n	8005948 <__multiply+0x8a>
 80059e0:	46e0      	mov	r8, ip
 80059e2:	e7dd      	b.n	80059a0 <__multiply+0xe2>
 80059e4:	3e01      	subs	r6, #1
 80059e6:	e799      	b.n	800591c <__multiply+0x5e>

080059e8 <__pow5mult>:
 80059e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059ec:	4615      	mov	r5, r2
 80059ee:	f012 0203 	ands.w	r2, r2, #3
 80059f2:	4606      	mov	r6, r0
 80059f4:	460f      	mov	r7, r1
 80059f6:	d007      	beq.n	8005a08 <__pow5mult+0x20>
 80059f8:	4c21      	ldr	r4, [pc, #132]	; (8005a80 <__pow5mult+0x98>)
 80059fa:	3a01      	subs	r2, #1
 80059fc:	2300      	movs	r3, #0
 80059fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a02:	f7ff feca 	bl	800579a <__multadd>
 8005a06:	4607      	mov	r7, r0
 8005a08:	10ad      	asrs	r5, r5, #2
 8005a0a:	d035      	beq.n	8005a78 <__pow5mult+0x90>
 8005a0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005a0e:	b93c      	cbnz	r4, 8005a20 <__pow5mult+0x38>
 8005a10:	2010      	movs	r0, #16
 8005a12:	f7ff fe4f 	bl	80056b4 <malloc>
 8005a16:	6270      	str	r0, [r6, #36]	; 0x24
 8005a18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a1c:	6004      	str	r4, [r0, #0]
 8005a1e:	60c4      	str	r4, [r0, #12]
 8005a20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005a24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a28:	b94c      	cbnz	r4, 8005a3e <__pow5mult+0x56>
 8005a2a:	f240 2171 	movw	r1, #625	; 0x271
 8005a2e:	4630      	mov	r0, r6
 8005a30:	f7ff ff3c 	bl	80058ac <__i2b>
 8005a34:	2300      	movs	r3, #0
 8005a36:	4604      	mov	r4, r0
 8005a38:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a3c:	6003      	str	r3, [r0, #0]
 8005a3e:	f04f 0800 	mov.w	r8, #0
 8005a42:	07eb      	lsls	r3, r5, #31
 8005a44:	d50a      	bpl.n	8005a5c <__pow5mult+0x74>
 8005a46:	4639      	mov	r1, r7
 8005a48:	4622      	mov	r2, r4
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	f7ff ff37 	bl	80058be <__multiply>
 8005a50:	4681      	mov	r9, r0
 8005a52:	4639      	mov	r1, r7
 8005a54:	4630      	mov	r0, r6
 8005a56:	f7ff fe89 	bl	800576c <_Bfree>
 8005a5a:	464f      	mov	r7, r9
 8005a5c:	106d      	asrs	r5, r5, #1
 8005a5e:	d00b      	beq.n	8005a78 <__pow5mult+0x90>
 8005a60:	6820      	ldr	r0, [r4, #0]
 8005a62:	b938      	cbnz	r0, 8005a74 <__pow5mult+0x8c>
 8005a64:	4622      	mov	r2, r4
 8005a66:	4621      	mov	r1, r4
 8005a68:	4630      	mov	r0, r6
 8005a6a:	f7ff ff28 	bl	80058be <__multiply>
 8005a6e:	6020      	str	r0, [r4, #0]
 8005a70:	f8c0 8000 	str.w	r8, [r0]
 8005a74:	4604      	mov	r4, r0
 8005a76:	e7e4      	b.n	8005a42 <__pow5mult+0x5a>
 8005a78:	4638      	mov	r0, r7
 8005a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a7e:	bf00      	nop
 8005a80:	08007370 	.word	0x08007370

08005a84 <__lshift>:
 8005a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a88:	460c      	mov	r4, r1
 8005a8a:	4607      	mov	r7, r0
 8005a8c:	4616      	mov	r6, r2
 8005a8e:	6923      	ldr	r3, [r4, #16]
 8005a90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a94:	eb0a 0903 	add.w	r9, sl, r3
 8005a98:	6849      	ldr	r1, [r1, #4]
 8005a9a:	68a3      	ldr	r3, [r4, #8]
 8005a9c:	f109 0501 	add.w	r5, r9, #1
 8005aa0:	42ab      	cmp	r3, r5
 8005aa2:	db32      	blt.n	8005b0a <__lshift+0x86>
 8005aa4:	4638      	mov	r0, r7
 8005aa6:	f7ff fe2d 	bl	8005704 <_Balloc>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	4680      	mov	r8, r0
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f100 0114 	add.w	r1, r0, #20
 8005ab4:	4553      	cmp	r3, sl
 8005ab6:	db2b      	blt.n	8005b10 <__lshift+0x8c>
 8005ab8:	6920      	ldr	r0, [r4, #16]
 8005aba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005abe:	f104 0314 	add.w	r3, r4, #20
 8005ac2:	f016 021f 	ands.w	r2, r6, #31
 8005ac6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005aca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ace:	d025      	beq.n	8005b1c <__lshift+0x98>
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	f1c2 0e20 	rsb	lr, r2, #32
 8005ad6:	468a      	mov	sl, r1
 8005ad8:	681e      	ldr	r6, [r3, #0]
 8005ada:	4096      	lsls	r6, r2
 8005adc:	4330      	orrs	r0, r6
 8005ade:	f84a 0b04 	str.w	r0, [sl], #4
 8005ae2:	f853 0b04 	ldr.w	r0, [r3], #4
 8005ae6:	459c      	cmp	ip, r3
 8005ae8:	fa20 f00e 	lsr.w	r0, r0, lr
 8005aec:	d814      	bhi.n	8005b18 <__lshift+0x94>
 8005aee:	6048      	str	r0, [r1, #4]
 8005af0:	b108      	cbz	r0, 8005af6 <__lshift+0x72>
 8005af2:	f109 0502 	add.w	r5, r9, #2
 8005af6:	3d01      	subs	r5, #1
 8005af8:	4638      	mov	r0, r7
 8005afa:	f8c8 5010 	str.w	r5, [r8, #16]
 8005afe:	4621      	mov	r1, r4
 8005b00:	f7ff fe34 	bl	800576c <_Bfree>
 8005b04:	4640      	mov	r0, r8
 8005b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b0a:	3101      	adds	r1, #1
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	e7c7      	b.n	8005aa0 <__lshift+0x1c>
 8005b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005b14:	3301      	adds	r3, #1
 8005b16:	e7cd      	b.n	8005ab4 <__lshift+0x30>
 8005b18:	4651      	mov	r1, sl
 8005b1a:	e7dc      	b.n	8005ad6 <__lshift+0x52>
 8005b1c:	3904      	subs	r1, #4
 8005b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b22:	459c      	cmp	ip, r3
 8005b24:	f841 2f04 	str.w	r2, [r1, #4]!
 8005b28:	d8f9      	bhi.n	8005b1e <__lshift+0x9a>
 8005b2a:	e7e4      	b.n	8005af6 <__lshift+0x72>

08005b2c <__mcmp>:
 8005b2c:	6903      	ldr	r3, [r0, #16]
 8005b2e:	690a      	ldr	r2, [r1, #16]
 8005b30:	b530      	push	{r4, r5, lr}
 8005b32:	1a9b      	subs	r3, r3, r2
 8005b34:	d10c      	bne.n	8005b50 <__mcmp+0x24>
 8005b36:	0092      	lsls	r2, r2, #2
 8005b38:	3014      	adds	r0, #20
 8005b3a:	3114      	adds	r1, #20
 8005b3c:	1884      	adds	r4, r0, r2
 8005b3e:	4411      	add	r1, r2
 8005b40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005b44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005b48:	4295      	cmp	r5, r2
 8005b4a:	d003      	beq.n	8005b54 <__mcmp+0x28>
 8005b4c:	d305      	bcc.n	8005b5a <__mcmp+0x2e>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	4618      	mov	r0, r3
 8005b52:	bd30      	pop	{r4, r5, pc}
 8005b54:	42a0      	cmp	r0, r4
 8005b56:	d3f3      	bcc.n	8005b40 <__mcmp+0x14>
 8005b58:	e7fa      	b.n	8005b50 <__mcmp+0x24>
 8005b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5e:	e7f7      	b.n	8005b50 <__mcmp+0x24>

08005b60 <__mdiff>:
 8005b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b64:	460d      	mov	r5, r1
 8005b66:	4607      	mov	r7, r0
 8005b68:	4611      	mov	r1, r2
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	4614      	mov	r4, r2
 8005b6e:	f7ff ffdd 	bl	8005b2c <__mcmp>
 8005b72:	1e06      	subs	r6, r0, #0
 8005b74:	d108      	bne.n	8005b88 <__mdiff+0x28>
 8005b76:	4631      	mov	r1, r6
 8005b78:	4638      	mov	r0, r7
 8005b7a:	f7ff fdc3 	bl	8005704 <_Balloc>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b88:	bfa4      	itt	ge
 8005b8a:	4623      	movge	r3, r4
 8005b8c:	462c      	movge	r4, r5
 8005b8e:	4638      	mov	r0, r7
 8005b90:	6861      	ldr	r1, [r4, #4]
 8005b92:	bfa6      	itte	ge
 8005b94:	461d      	movge	r5, r3
 8005b96:	2600      	movge	r6, #0
 8005b98:	2601      	movlt	r6, #1
 8005b9a:	f7ff fdb3 	bl	8005704 <_Balloc>
 8005b9e:	f04f 0e00 	mov.w	lr, #0
 8005ba2:	60c6      	str	r6, [r0, #12]
 8005ba4:	692b      	ldr	r3, [r5, #16]
 8005ba6:	6926      	ldr	r6, [r4, #16]
 8005ba8:	f104 0214 	add.w	r2, r4, #20
 8005bac:	f105 0914 	add.w	r9, r5, #20
 8005bb0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005bb4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005bb8:	f100 0114 	add.w	r1, r0, #20
 8005bbc:	f852 ab04 	ldr.w	sl, [r2], #4
 8005bc0:	f859 5b04 	ldr.w	r5, [r9], #4
 8005bc4:	fa1f f38a 	uxth.w	r3, sl
 8005bc8:	4473      	add	r3, lr
 8005bca:	b2ac      	uxth	r4, r5
 8005bcc:	1b1b      	subs	r3, r3, r4
 8005bce:	0c2c      	lsrs	r4, r5, #16
 8005bd0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005bd4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005bde:	45c8      	cmp	r8, r9
 8005be0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005be4:	4694      	mov	ip, r2
 8005be6:	f841 4b04 	str.w	r4, [r1], #4
 8005bea:	d8e7      	bhi.n	8005bbc <__mdiff+0x5c>
 8005bec:	45bc      	cmp	ip, r7
 8005bee:	d304      	bcc.n	8005bfa <__mdiff+0x9a>
 8005bf0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005bf4:	b183      	cbz	r3, 8005c18 <__mdiff+0xb8>
 8005bf6:	6106      	str	r6, [r0, #16]
 8005bf8:	e7c4      	b.n	8005b84 <__mdiff+0x24>
 8005bfa:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005bfe:	b2a2      	uxth	r2, r4
 8005c00:	4472      	add	r2, lr
 8005c02:	1413      	asrs	r3, r2, #16
 8005c04:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005c08:	b292      	uxth	r2, r2
 8005c0a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005c0e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005c12:	f841 2b04 	str.w	r2, [r1], #4
 8005c16:	e7e9      	b.n	8005bec <__mdiff+0x8c>
 8005c18:	3e01      	subs	r6, #1
 8005c1a:	e7e9      	b.n	8005bf0 <__mdiff+0x90>

08005c1c <__d2b>:
 8005c1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005c20:	461c      	mov	r4, r3
 8005c22:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005c26:	2101      	movs	r1, #1
 8005c28:	4690      	mov	r8, r2
 8005c2a:	f7ff fd6b 	bl	8005704 <_Balloc>
 8005c2e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005c32:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005c36:	4607      	mov	r7, r0
 8005c38:	bb34      	cbnz	r4, 8005c88 <__d2b+0x6c>
 8005c3a:	9201      	str	r2, [sp, #4]
 8005c3c:	f1b8 0200 	subs.w	r2, r8, #0
 8005c40:	d027      	beq.n	8005c92 <__d2b+0x76>
 8005c42:	a802      	add	r0, sp, #8
 8005c44:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005c48:	f7ff fe01 	bl	800584e <__lo0bits>
 8005c4c:	9900      	ldr	r1, [sp, #0]
 8005c4e:	b1f0      	cbz	r0, 8005c8e <__d2b+0x72>
 8005c50:	9a01      	ldr	r2, [sp, #4]
 8005c52:	f1c0 0320 	rsb	r3, r0, #32
 8005c56:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5a:	430b      	orrs	r3, r1
 8005c5c:	40c2      	lsrs	r2, r0
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	9201      	str	r2, [sp, #4]
 8005c62:	9b01      	ldr	r3, [sp, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	bf14      	ite	ne
 8005c68:	2102      	movne	r1, #2
 8005c6a:	2101      	moveq	r1, #1
 8005c6c:	61bb      	str	r3, [r7, #24]
 8005c6e:	6139      	str	r1, [r7, #16]
 8005c70:	b1c4      	cbz	r4, 8005ca4 <__d2b+0x88>
 8005c72:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005c76:	4404      	add	r4, r0
 8005c78:	6034      	str	r4, [r6, #0]
 8005c7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c7e:	6028      	str	r0, [r5, #0]
 8005c80:	4638      	mov	r0, r7
 8005c82:	b002      	add	sp, #8
 8005c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c88:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005c8c:	e7d5      	b.n	8005c3a <__d2b+0x1e>
 8005c8e:	6179      	str	r1, [r7, #20]
 8005c90:	e7e7      	b.n	8005c62 <__d2b+0x46>
 8005c92:	a801      	add	r0, sp, #4
 8005c94:	f7ff fddb 	bl	800584e <__lo0bits>
 8005c98:	2101      	movs	r1, #1
 8005c9a:	9b01      	ldr	r3, [sp, #4]
 8005c9c:	6139      	str	r1, [r7, #16]
 8005c9e:	617b      	str	r3, [r7, #20]
 8005ca0:	3020      	adds	r0, #32
 8005ca2:	e7e5      	b.n	8005c70 <__d2b+0x54>
 8005ca4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005ca8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005cac:	6030      	str	r0, [r6, #0]
 8005cae:	6918      	ldr	r0, [r3, #16]
 8005cb0:	f7ff fdae 	bl	8005810 <__hi0bits>
 8005cb4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005cb8:	e7e1      	b.n	8005c7e <__d2b+0x62>

08005cba <_calloc_r>:
 8005cba:	b538      	push	{r3, r4, r5, lr}
 8005cbc:	fb02 f401 	mul.w	r4, r2, r1
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	f000 f855 	bl	8005d70 <_malloc_r>
 8005cc6:	4605      	mov	r5, r0
 8005cc8:	b118      	cbz	r0, 8005cd2 <_calloc_r+0x18>
 8005cca:	4622      	mov	r2, r4
 8005ccc:	2100      	movs	r1, #0
 8005cce:	f7fe f90a 	bl	8003ee6 <memset>
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	bd38      	pop	{r3, r4, r5, pc}
	...

08005cd8 <_free_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4605      	mov	r5, r0
 8005cdc:	2900      	cmp	r1, #0
 8005cde:	d043      	beq.n	8005d68 <_free_r+0x90>
 8005ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ce4:	1f0c      	subs	r4, r1, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	bfb8      	it	lt
 8005cea:	18e4      	addlt	r4, r4, r3
 8005cec:	f000 fa22 	bl	8006134 <__malloc_lock>
 8005cf0:	4a1e      	ldr	r2, [pc, #120]	; (8005d6c <_free_r+0x94>)
 8005cf2:	6813      	ldr	r3, [r2, #0]
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	b933      	cbnz	r3, 8005d06 <_free_r+0x2e>
 8005cf8:	6063      	str	r3, [r4, #4]
 8005cfa:	6014      	str	r4, [r2, #0]
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d02:	f000 ba18 	b.w	8006136 <__malloc_unlock>
 8005d06:	42a3      	cmp	r3, r4
 8005d08:	d90b      	bls.n	8005d22 <_free_r+0x4a>
 8005d0a:	6821      	ldr	r1, [r4, #0]
 8005d0c:	1862      	adds	r2, r4, r1
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	bf01      	itttt	eq
 8005d12:	681a      	ldreq	r2, [r3, #0]
 8005d14:	685b      	ldreq	r3, [r3, #4]
 8005d16:	1852      	addeq	r2, r2, r1
 8005d18:	6022      	streq	r2, [r4, #0]
 8005d1a:	6063      	str	r3, [r4, #4]
 8005d1c:	6004      	str	r4, [r0, #0]
 8005d1e:	e7ed      	b.n	8005cfc <_free_r+0x24>
 8005d20:	4613      	mov	r3, r2
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	b10a      	cbz	r2, 8005d2a <_free_r+0x52>
 8005d26:	42a2      	cmp	r2, r4
 8005d28:	d9fa      	bls.n	8005d20 <_free_r+0x48>
 8005d2a:	6819      	ldr	r1, [r3, #0]
 8005d2c:	1858      	adds	r0, r3, r1
 8005d2e:	42a0      	cmp	r0, r4
 8005d30:	d10b      	bne.n	8005d4a <_free_r+0x72>
 8005d32:	6820      	ldr	r0, [r4, #0]
 8005d34:	4401      	add	r1, r0
 8005d36:	1858      	adds	r0, r3, r1
 8005d38:	4282      	cmp	r2, r0
 8005d3a:	6019      	str	r1, [r3, #0]
 8005d3c:	d1de      	bne.n	8005cfc <_free_r+0x24>
 8005d3e:	6810      	ldr	r0, [r2, #0]
 8005d40:	6852      	ldr	r2, [r2, #4]
 8005d42:	4401      	add	r1, r0
 8005d44:	6019      	str	r1, [r3, #0]
 8005d46:	605a      	str	r2, [r3, #4]
 8005d48:	e7d8      	b.n	8005cfc <_free_r+0x24>
 8005d4a:	d902      	bls.n	8005d52 <_free_r+0x7a>
 8005d4c:	230c      	movs	r3, #12
 8005d4e:	602b      	str	r3, [r5, #0]
 8005d50:	e7d4      	b.n	8005cfc <_free_r+0x24>
 8005d52:	6820      	ldr	r0, [r4, #0]
 8005d54:	1821      	adds	r1, r4, r0
 8005d56:	428a      	cmp	r2, r1
 8005d58:	bf01      	itttt	eq
 8005d5a:	6811      	ldreq	r1, [r2, #0]
 8005d5c:	6852      	ldreq	r2, [r2, #4]
 8005d5e:	1809      	addeq	r1, r1, r0
 8005d60:	6021      	streq	r1, [r4, #0]
 8005d62:	6062      	str	r2, [r4, #4]
 8005d64:	605c      	str	r4, [r3, #4]
 8005d66:	e7c9      	b.n	8005cfc <_free_r+0x24>
 8005d68:	bd38      	pop	{r3, r4, r5, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20000228 	.word	0x20000228

08005d70 <_malloc_r>:
 8005d70:	b570      	push	{r4, r5, r6, lr}
 8005d72:	1ccd      	adds	r5, r1, #3
 8005d74:	f025 0503 	bic.w	r5, r5, #3
 8005d78:	3508      	adds	r5, #8
 8005d7a:	2d0c      	cmp	r5, #12
 8005d7c:	bf38      	it	cc
 8005d7e:	250c      	movcc	r5, #12
 8005d80:	2d00      	cmp	r5, #0
 8005d82:	4606      	mov	r6, r0
 8005d84:	db01      	blt.n	8005d8a <_malloc_r+0x1a>
 8005d86:	42a9      	cmp	r1, r5
 8005d88:	d903      	bls.n	8005d92 <_malloc_r+0x22>
 8005d8a:	230c      	movs	r3, #12
 8005d8c:	6033      	str	r3, [r6, #0]
 8005d8e:	2000      	movs	r0, #0
 8005d90:	bd70      	pop	{r4, r5, r6, pc}
 8005d92:	f000 f9cf 	bl	8006134 <__malloc_lock>
 8005d96:	4a21      	ldr	r2, [pc, #132]	; (8005e1c <_malloc_r+0xac>)
 8005d98:	6814      	ldr	r4, [r2, #0]
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	b991      	cbnz	r1, 8005dc4 <_malloc_r+0x54>
 8005d9e:	4c20      	ldr	r4, [pc, #128]	; (8005e20 <_malloc_r+0xb0>)
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	b91b      	cbnz	r3, 8005dac <_malloc_r+0x3c>
 8005da4:	4630      	mov	r0, r6
 8005da6:	f000 f98f 	bl	80060c8 <_sbrk_r>
 8005daa:	6020      	str	r0, [r4, #0]
 8005dac:	4629      	mov	r1, r5
 8005dae:	4630      	mov	r0, r6
 8005db0:	f000 f98a 	bl	80060c8 <_sbrk_r>
 8005db4:	1c43      	adds	r3, r0, #1
 8005db6:	d124      	bne.n	8005e02 <_malloc_r+0x92>
 8005db8:	230c      	movs	r3, #12
 8005dba:	4630      	mov	r0, r6
 8005dbc:	6033      	str	r3, [r6, #0]
 8005dbe:	f000 f9ba 	bl	8006136 <__malloc_unlock>
 8005dc2:	e7e4      	b.n	8005d8e <_malloc_r+0x1e>
 8005dc4:	680b      	ldr	r3, [r1, #0]
 8005dc6:	1b5b      	subs	r3, r3, r5
 8005dc8:	d418      	bmi.n	8005dfc <_malloc_r+0x8c>
 8005dca:	2b0b      	cmp	r3, #11
 8005dcc:	d90f      	bls.n	8005dee <_malloc_r+0x7e>
 8005dce:	600b      	str	r3, [r1, #0]
 8005dd0:	18cc      	adds	r4, r1, r3
 8005dd2:	50cd      	str	r5, [r1, r3]
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	f000 f9ae 	bl	8006136 <__malloc_unlock>
 8005dda:	f104 000b 	add.w	r0, r4, #11
 8005dde:	1d23      	adds	r3, r4, #4
 8005de0:	f020 0007 	bic.w	r0, r0, #7
 8005de4:	1ac3      	subs	r3, r0, r3
 8005de6:	d0d3      	beq.n	8005d90 <_malloc_r+0x20>
 8005de8:	425a      	negs	r2, r3
 8005dea:	50e2      	str	r2, [r4, r3]
 8005dec:	e7d0      	b.n	8005d90 <_malloc_r+0x20>
 8005dee:	684b      	ldr	r3, [r1, #4]
 8005df0:	428c      	cmp	r4, r1
 8005df2:	bf16      	itet	ne
 8005df4:	6063      	strne	r3, [r4, #4]
 8005df6:	6013      	streq	r3, [r2, #0]
 8005df8:	460c      	movne	r4, r1
 8005dfa:	e7eb      	b.n	8005dd4 <_malloc_r+0x64>
 8005dfc:	460c      	mov	r4, r1
 8005dfe:	6849      	ldr	r1, [r1, #4]
 8005e00:	e7cc      	b.n	8005d9c <_malloc_r+0x2c>
 8005e02:	1cc4      	adds	r4, r0, #3
 8005e04:	f024 0403 	bic.w	r4, r4, #3
 8005e08:	42a0      	cmp	r0, r4
 8005e0a:	d005      	beq.n	8005e18 <_malloc_r+0xa8>
 8005e0c:	1a21      	subs	r1, r4, r0
 8005e0e:	4630      	mov	r0, r6
 8005e10:	f000 f95a 	bl	80060c8 <_sbrk_r>
 8005e14:	3001      	adds	r0, #1
 8005e16:	d0cf      	beq.n	8005db8 <_malloc_r+0x48>
 8005e18:	6025      	str	r5, [r4, #0]
 8005e1a:	e7db      	b.n	8005dd4 <_malloc_r+0x64>
 8005e1c:	20000228 	.word	0x20000228
 8005e20:	2000022c 	.word	0x2000022c

08005e24 <__ssputs_r>:
 8005e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e28:	688e      	ldr	r6, [r1, #8]
 8005e2a:	4682      	mov	sl, r0
 8005e2c:	429e      	cmp	r6, r3
 8005e2e:	460c      	mov	r4, r1
 8005e30:	4690      	mov	r8, r2
 8005e32:	4699      	mov	r9, r3
 8005e34:	d837      	bhi.n	8005ea6 <__ssputs_r+0x82>
 8005e36:	898a      	ldrh	r2, [r1, #12]
 8005e38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e3c:	d031      	beq.n	8005ea2 <__ssputs_r+0x7e>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	6825      	ldr	r5, [r4, #0]
 8005e42:	6909      	ldr	r1, [r1, #16]
 8005e44:	1a6f      	subs	r7, r5, r1
 8005e46:	6965      	ldr	r5, [r4, #20]
 8005e48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e4c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005e50:	f109 0301 	add.w	r3, r9, #1
 8005e54:	443b      	add	r3, r7
 8005e56:	429d      	cmp	r5, r3
 8005e58:	bf38      	it	cc
 8005e5a:	461d      	movcc	r5, r3
 8005e5c:	0553      	lsls	r3, r2, #21
 8005e5e:	d530      	bpl.n	8005ec2 <__ssputs_r+0x9e>
 8005e60:	4629      	mov	r1, r5
 8005e62:	f7ff ff85 	bl	8005d70 <_malloc_r>
 8005e66:	4606      	mov	r6, r0
 8005e68:	b950      	cbnz	r0, 8005e80 <__ssputs_r+0x5c>
 8005e6a:	230c      	movs	r3, #12
 8005e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e70:	f8ca 3000 	str.w	r3, [sl]
 8005e74:	89a3      	ldrh	r3, [r4, #12]
 8005e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e7a:	81a3      	strh	r3, [r4, #12]
 8005e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e80:	463a      	mov	r2, r7
 8005e82:	6921      	ldr	r1, [r4, #16]
 8005e84:	f7fe f824 	bl	8003ed0 <memcpy>
 8005e88:	89a3      	ldrh	r3, [r4, #12]
 8005e8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e92:	81a3      	strh	r3, [r4, #12]
 8005e94:	6126      	str	r6, [r4, #16]
 8005e96:	443e      	add	r6, r7
 8005e98:	6026      	str	r6, [r4, #0]
 8005e9a:	464e      	mov	r6, r9
 8005e9c:	6165      	str	r5, [r4, #20]
 8005e9e:	1bed      	subs	r5, r5, r7
 8005ea0:	60a5      	str	r5, [r4, #8]
 8005ea2:	454e      	cmp	r6, r9
 8005ea4:	d900      	bls.n	8005ea8 <__ssputs_r+0x84>
 8005ea6:	464e      	mov	r6, r9
 8005ea8:	4632      	mov	r2, r6
 8005eaa:	4641      	mov	r1, r8
 8005eac:	6820      	ldr	r0, [r4, #0]
 8005eae:	f000 f928 	bl	8006102 <memmove>
 8005eb2:	68a3      	ldr	r3, [r4, #8]
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	1b9b      	subs	r3, r3, r6
 8005eb8:	60a3      	str	r3, [r4, #8]
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	441e      	add	r6, r3
 8005ebe:	6026      	str	r6, [r4, #0]
 8005ec0:	e7dc      	b.n	8005e7c <__ssputs_r+0x58>
 8005ec2:	462a      	mov	r2, r5
 8005ec4:	f000 f938 	bl	8006138 <_realloc_r>
 8005ec8:	4606      	mov	r6, r0
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d1e2      	bne.n	8005e94 <__ssputs_r+0x70>
 8005ece:	6921      	ldr	r1, [r4, #16]
 8005ed0:	4650      	mov	r0, sl
 8005ed2:	f7ff ff01 	bl	8005cd8 <_free_r>
 8005ed6:	e7c8      	b.n	8005e6a <__ssputs_r+0x46>

08005ed8 <_svfiprintf_r>:
 8005ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005edc:	461d      	mov	r5, r3
 8005ede:	898b      	ldrh	r3, [r1, #12]
 8005ee0:	b09d      	sub	sp, #116	; 0x74
 8005ee2:	061f      	lsls	r7, r3, #24
 8005ee4:	4680      	mov	r8, r0
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	4616      	mov	r6, r2
 8005eea:	d50f      	bpl.n	8005f0c <_svfiprintf_r+0x34>
 8005eec:	690b      	ldr	r3, [r1, #16]
 8005eee:	b96b      	cbnz	r3, 8005f0c <_svfiprintf_r+0x34>
 8005ef0:	2140      	movs	r1, #64	; 0x40
 8005ef2:	f7ff ff3d 	bl	8005d70 <_malloc_r>
 8005ef6:	6020      	str	r0, [r4, #0]
 8005ef8:	6120      	str	r0, [r4, #16]
 8005efa:	b928      	cbnz	r0, 8005f08 <_svfiprintf_r+0x30>
 8005efc:	230c      	movs	r3, #12
 8005efe:	f8c8 3000 	str.w	r3, [r8]
 8005f02:	f04f 30ff 	mov.w	r0, #4294967295
 8005f06:	e0c8      	b.n	800609a <_svfiprintf_r+0x1c2>
 8005f08:	2340      	movs	r3, #64	; 0x40
 8005f0a:	6163      	str	r3, [r4, #20]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f10:	2320      	movs	r3, #32
 8005f12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f16:	2330      	movs	r3, #48	; 0x30
 8005f18:	f04f 0b01 	mov.w	fp, #1
 8005f1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f20:	9503      	str	r5, [sp, #12]
 8005f22:	4637      	mov	r7, r6
 8005f24:	463d      	mov	r5, r7
 8005f26:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f2a:	b10b      	cbz	r3, 8005f30 <_svfiprintf_r+0x58>
 8005f2c:	2b25      	cmp	r3, #37	; 0x25
 8005f2e:	d13e      	bne.n	8005fae <_svfiprintf_r+0xd6>
 8005f30:	ebb7 0a06 	subs.w	sl, r7, r6
 8005f34:	d00b      	beq.n	8005f4e <_svfiprintf_r+0x76>
 8005f36:	4653      	mov	r3, sl
 8005f38:	4632      	mov	r2, r6
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	4640      	mov	r0, r8
 8005f3e:	f7ff ff71 	bl	8005e24 <__ssputs_r>
 8005f42:	3001      	adds	r0, #1
 8005f44:	f000 80a4 	beq.w	8006090 <_svfiprintf_r+0x1b8>
 8005f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f4a:	4453      	add	r3, sl
 8005f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f4e:	783b      	ldrb	r3, [r7, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 809d 	beq.w	8006090 <_svfiprintf_r+0x1b8>
 8005f56:	2300      	movs	r3, #0
 8005f58:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f60:	9304      	str	r3, [sp, #16]
 8005f62:	9307      	str	r3, [sp, #28]
 8005f64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f68:	931a      	str	r3, [sp, #104]	; 0x68
 8005f6a:	462f      	mov	r7, r5
 8005f6c:	2205      	movs	r2, #5
 8005f6e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005f72:	4850      	ldr	r0, [pc, #320]	; (80060b4 <_svfiprintf_r+0x1dc>)
 8005f74:	f7ff fbb8 	bl	80056e8 <memchr>
 8005f78:	9b04      	ldr	r3, [sp, #16]
 8005f7a:	b9d0      	cbnz	r0, 8005fb2 <_svfiprintf_r+0xda>
 8005f7c:	06d9      	lsls	r1, r3, #27
 8005f7e:	bf44      	itt	mi
 8005f80:	2220      	movmi	r2, #32
 8005f82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f86:	071a      	lsls	r2, r3, #28
 8005f88:	bf44      	itt	mi
 8005f8a:	222b      	movmi	r2, #43	; 0x2b
 8005f8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f90:	782a      	ldrb	r2, [r5, #0]
 8005f92:	2a2a      	cmp	r2, #42	; 0x2a
 8005f94:	d015      	beq.n	8005fc2 <_svfiprintf_r+0xea>
 8005f96:	462f      	mov	r7, r5
 8005f98:	2000      	movs	r0, #0
 8005f9a:	250a      	movs	r5, #10
 8005f9c:	9a07      	ldr	r2, [sp, #28]
 8005f9e:	4639      	mov	r1, r7
 8005fa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fa4:	3b30      	subs	r3, #48	; 0x30
 8005fa6:	2b09      	cmp	r3, #9
 8005fa8:	d94d      	bls.n	8006046 <_svfiprintf_r+0x16e>
 8005faa:	b1b8      	cbz	r0, 8005fdc <_svfiprintf_r+0x104>
 8005fac:	e00f      	b.n	8005fce <_svfiprintf_r+0xf6>
 8005fae:	462f      	mov	r7, r5
 8005fb0:	e7b8      	b.n	8005f24 <_svfiprintf_r+0x4c>
 8005fb2:	4a40      	ldr	r2, [pc, #256]	; (80060b4 <_svfiprintf_r+0x1dc>)
 8005fb4:	463d      	mov	r5, r7
 8005fb6:	1a80      	subs	r0, r0, r2
 8005fb8:	fa0b f000 	lsl.w	r0, fp, r0
 8005fbc:	4318      	orrs	r0, r3
 8005fbe:	9004      	str	r0, [sp, #16]
 8005fc0:	e7d3      	b.n	8005f6a <_svfiprintf_r+0x92>
 8005fc2:	9a03      	ldr	r2, [sp, #12]
 8005fc4:	1d11      	adds	r1, r2, #4
 8005fc6:	6812      	ldr	r2, [r2, #0]
 8005fc8:	9103      	str	r1, [sp, #12]
 8005fca:	2a00      	cmp	r2, #0
 8005fcc:	db01      	blt.n	8005fd2 <_svfiprintf_r+0xfa>
 8005fce:	9207      	str	r2, [sp, #28]
 8005fd0:	e004      	b.n	8005fdc <_svfiprintf_r+0x104>
 8005fd2:	4252      	negs	r2, r2
 8005fd4:	f043 0302 	orr.w	r3, r3, #2
 8005fd8:	9207      	str	r2, [sp, #28]
 8005fda:	9304      	str	r3, [sp, #16]
 8005fdc:	783b      	ldrb	r3, [r7, #0]
 8005fde:	2b2e      	cmp	r3, #46	; 0x2e
 8005fe0:	d10c      	bne.n	8005ffc <_svfiprintf_r+0x124>
 8005fe2:	787b      	ldrb	r3, [r7, #1]
 8005fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8005fe6:	d133      	bne.n	8006050 <_svfiprintf_r+0x178>
 8005fe8:	9b03      	ldr	r3, [sp, #12]
 8005fea:	3702      	adds	r7, #2
 8005fec:	1d1a      	adds	r2, r3, #4
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	9203      	str	r2, [sp, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	bfb8      	it	lt
 8005ff6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ffa:	9305      	str	r3, [sp, #20]
 8005ffc:	4d2e      	ldr	r5, [pc, #184]	; (80060b8 <_svfiprintf_r+0x1e0>)
 8005ffe:	2203      	movs	r2, #3
 8006000:	7839      	ldrb	r1, [r7, #0]
 8006002:	4628      	mov	r0, r5
 8006004:	f7ff fb70 	bl	80056e8 <memchr>
 8006008:	b138      	cbz	r0, 800601a <_svfiprintf_r+0x142>
 800600a:	2340      	movs	r3, #64	; 0x40
 800600c:	1b40      	subs	r0, r0, r5
 800600e:	fa03 f000 	lsl.w	r0, r3, r0
 8006012:	9b04      	ldr	r3, [sp, #16]
 8006014:	3701      	adds	r7, #1
 8006016:	4303      	orrs	r3, r0
 8006018:	9304      	str	r3, [sp, #16]
 800601a:	7839      	ldrb	r1, [r7, #0]
 800601c:	2206      	movs	r2, #6
 800601e:	4827      	ldr	r0, [pc, #156]	; (80060bc <_svfiprintf_r+0x1e4>)
 8006020:	1c7e      	adds	r6, r7, #1
 8006022:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006026:	f7ff fb5f 	bl	80056e8 <memchr>
 800602a:	2800      	cmp	r0, #0
 800602c:	d038      	beq.n	80060a0 <_svfiprintf_r+0x1c8>
 800602e:	4b24      	ldr	r3, [pc, #144]	; (80060c0 <_svfiprintf_r+0x1e8>)
 8006030:	bb13      	cbnz	r3, 8006078 <_svfiprintf_r+0x1a0>
 8006032:	9b03      	ldr	r3, [sp, #12]
 8006034:	3307      	adds	r3, #7
 8006036:	f023 0307 	bic.w	r3, r3, #7
 800603a:	3308      	adds	r3, #8
 800603c:	9303      	str	r3, [sp, #12]
 800603e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006040:	444b      	add	r3, r9
 8006042:	9309      	str	r3, [sp, #36]	; 0x24
 8006044:	e76d      	b.n	8005f22 <_svfiprintf_r+0x4a>
 8006046:	fb05 3202 	mla	r2, r5, r2, r3
 800604a:	2001      	movs	r0, #1
 800604c:	460f      	mov	r7, r1
 800604e:	e7a6      	b.n	8005f9e <_svfiprintf_r+0xc6>
 8006050:	2300      	movs	r3, #0
 8006052:	250a      	movs	r5, #10
 8006054:	4619      	mov	r1, r3
 8006056:	3701      	adds	r7, #1
 8006058:	9305      	str	r3, [sp, #20]
 800605a:	4638      	mov	r0, r7
 800605c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006060:	3a30      	subs	r2, #48	; 0x30
 8006062:	2a09      	cmp	r2, #9
 8006064:	d903      	bls.n	800606e <_svfiprintf_r+0x196>
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0c8      	beq.n	8005ffc <_svfiprintf_r+0x124>
 800606a:	9105      	str	r1, [sp, #20]
 800606c:	e7c6      	b.n	8005ffc <_svfiprintf_r+0x124>
 800606e:	fb05 2101 	mla	r1, r5, r1, r2
 8006072:	2301      	movs	r3, #1
 8006074:	4607      	mov	r7, r0
 8006076:	e7f0      	b.n	800605a <_svfiprintf_r+0x182>
 8006078:	ab03      	add	r3, sp, #12
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	4622      	mov	r2, r4
 800607e:	4b11      	ldr	r3, [pc, #68]	; (80060c4 <_svfiprintf_r+0x1ec>)
 8006080:	a904      	add	r1, sp, #16
 8006082:	4640      	mov	r0, r8
 8006084:	f7fd ffc8 	bl	8004018 <_printf_float>
 8006088:	f1b0 3fff 	cmp.w	r0, #4294967295
 800608c:	4681      	mov	r9, r0
 800608e:	d1d6      	bne.n	800603e <_svfiprintf_r+0x166>
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	065b      	lsls	r3, r3, #25
 8006094:	f53f af35 	bmi.w	8005f02 <_svfiprintf_r+0x2a>
 8006098:	9809      	ldr	r0, [sp, #36]	; 0x24
 800609a:	b01d      	add	sp, #116	; 0x74
 800609c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a0:	ab03      	add	r3, sp, #12
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	4622      	mov	r2, r4
 80060a6:	4b07      	ldr	r3, [pc, #28]	; (80060c4 <_svfiprintf_r+0x1ec>)
 80060a8:	a904      	add	r1, sp, #16
 80060aa:	4640      	mov	r0, r8
 80060ac:	f7fe fa60 	bl	8004570 <_printf_i>
 80060b0:	e7ea      	b.n	8006088 <_svfiprintf_r+0x1b0>
 80060b2:	bf00      	nop
 80060b4:	0800737c 	.word	0x0800737c
 80060b8:	08007382 	.word	0x08007382
 80060bc:	08007386 	.word	0x08007386
 80060c0:	08004019 	.word	0x08004019
 80060c4:	08005e25 	.word	0x08005e25

080060c8 <_sbrk_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	2300      	movs	r3, #0
 80060cc:	4c05      	ldr	r4, [pc, #20]	; (80060e4 <_sbrk_r+0x1c>)
 80060ce:	4605      	mov	r5, r0
 80060d0:	4608      	mov	r0, r1
 80060d2:	6023      	str	r3, [r4, #0]
 80060d4:	f7fb feda 	bl	8001e8c <_sbrk>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d102      	bne.n	80060e2 <_sbrk_r+0x1a>
 80060dc:	6823      	ldr	r3, [r4, #0]
 80060de:	b103      	cbz	r3, 80060e2 <_sbrk_r+0x1a>
 80060e0:	602b      	str	r3, [r5, #0]
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	20000734 	.word	0x20000734

080060e8 <__ascii_wctomb>:
 80060e8:	b149      	cbz	r1, 80060fe <__ascii_wctomb+0x16>
 80060ea:	2aff      	cmp	r2, #255	; 0xff
 80060ec:	bf8b      	itete	hi
 80060ee:	238a      	movhi	r3, #138	; 0x8a
 80060f0:	700a      	strbls	r2, [r1, #0]
 80060f2:	6003      	strhi	r3, [r0, #0]
 80060f4:	2001      	movls	r0, #1
 80060f6:	bf88      	it	hi
 80060f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80060fc:	4770      	bx	lr
 80060fe:	4608      	mov	r0, r1
 8006100:	4770      	bx	lr

08006102 <memmove>:
 8006102:	4288      	cmp	r0, r1
 8006104:	b510      	push	{r4, lr}
 8006106:	eb01 0302 	add.w	r3, r1, r2
 800610a:	d807      	bhi.n	800611c <memmove+0x1a>
 800610c:	1e42      	subs	r2, r0, #1
 800610e:	4299      	cmp	r1, r3
 8006110:	d00a      	beq.n	8006128 <memmove+0x26>
 8006112:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006116:	f802 4f01 	strb.w	r4, [r2, #1]!
 800611a:	e7f8      	b.n	800610e <memmove+0xc>
 800611c:	4283      	cmp	r3, r0
 800611e:	d9f5      	bls.n	800610c <memmove+0xa>
 8006120:	1881      	adds	r1, r0, r2
 8006122:	1ad2      	subs	r2, r2, r3
 8006124:	42d3      	cmn	r3, r2
 8006126:	d100      	bne.n	800612a <memmove+0x28>
 8006128:	bd10      	pop	{r4, pc}
 800612a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800612e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006132:	e7f7      	b.n	8006124 <memmove+0x22>

08006134 <__malloc_lock>:
 8006134:	4770      	bx	lr

08006136 <__malloc_unlock>:
 8006136:	4770      	bx	lr

08006138 <_realloc_r>:
 8006138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613a:	4607      	mov	r7, r0
 800613c:	4614      	mov	r4, r2
 800613e:	460e      	mov	r6, r1
 8006140:	b921      	cbnz	r1, 800614c <_realloc_r+0x14>
 8006142:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006146:	4611      	mov	r1, r2
 8006148:	f7ff be12 	b.w	8005d70 <_malloc_r>
 800614c:	b922      	cbnz	r2, 8006158 <_realloc_r+0x20>
 800614e:	f7ff fdc3 	bl	8005cd8 <_free_r>
 8006152:	4625      	mov	r5, r4
 8006154:	4628      	mov	r0, r5
 8006156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006158:	f000 f814 	bl	8006184 <_malloc_usable_size_r>
 800615c:	42a0      	cmp	r0, r4
 800615e:	d20f      	bcs.n	8006180 <_realloc_r+0x48>
 8006160:	4621      	mov	r1, r4
 8006162:	4638      	mov	r0, r7
 8006164:	f7ff fe04 	bl	8005d70 <_malloc_r>
 8006168:	4605      	mov	r5, r0
 800616a:	2800      	cmp	r0, #0
 800616c:	d0f2      	beq.n	8006154 <_realloc_r+0x1c>
 800616e:	4631      	mov	r1, r6
 8006170:	4622      	mov	r2, r4
 8006172:	f7fd fead 	bl	8003ed0 <memcpy>
 8006176:	4631      	mov	r1, r6
 8006178:	4638      	mov	r0, r7
 800617a:	f7ff fdad 	bl	8005cd8 <_free_r>
 800617e:	e7e9      	b.n	8006154 <_realloc_r+0x1c>
 8006180:	4635      	mov	r5, r6
 8006182:	e7e7      	b.n	8006154 <_realloc_r+0x1c>

08006184 <_malloc_usable_size_r>:
 8006184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006188:	1f18      	subs	r0, r3, #4
 800618a:	2b00      	cmp	r3, #0
 800618c:	bfbc      	itt	lt
 800618e:	580b      	ldrlt	r3, [r1, r0]
 8006190:	18c0      	addlt	r0, r0, r3
 8006192:	4770      	bx	lr

08006194 <_init>:
 8006194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006196:	bf00      	nop
 8006198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800619a:	bc08      	pop	{r3}
 800619c:	469e      	mov	lr, r3
 800619e:	4770      	bx	lr

080061a0 <_fini>:
 80061a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a2:	bf00      	nop
 80061a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061a6:	bc08      	pop	{r3}
 80061a8:	469e      	mov	lr, r3
 80061aa:	4770      	bx	lr
