
Projete 2024 v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012e8  080061f8  080061f8  000161f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074e0  080074e0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  080074e0  080074e0  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074e0  080074e0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074e0  080074e0  000174e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074e4  080074e4  000174e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080074e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000550  200001e8  080076d0  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  080076d0  00020738  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a504  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b87  00000000  00000000  0002a715  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a20  00000000  00000000  0002c2a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00017fb4  00000000  00000000  0002ccc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008a4d  00000000  00000000  00044c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00089ca2  00000000  00000000  0004d6c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000d7363  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000950  00000000  00000000  000d73e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00003430  00000000  00000000  000d7d30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080061dc 	.word	0x080061dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080061dc 	.word	0x080061dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000a92:	2200      	movs	r2, #0
 8000a94:	2110      	movs	r1, #16
 8000a96:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <ST7789_WriteCommand+0x40>)
 8000a98:	f002 f866 	bl	8002b68 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	480a      	ldr	r0, [pc, #40]	; (8000acc <ST7789_WriteCommand+0x44>)
 8000aa2:	f002 f861 	bl	8002b68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000aa6:	1df9      	adds	r1, r7, #7
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aac:	2201      	movs	r2, #1
 8000aae:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <ST7789_WriteCommand+0x48>)
 8000ab0:	f002 fdc8 	bl	8003644 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2110      	movs	r1, #16
 8000ab8:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <ST7789_WriteCommand+0x40>)
 8000aba:	f002 f855 	bl	8002b68 <HAL_GPIO_WritePin>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40010800 	.word	0x40010800
 8000acc:	40010c00 	.word	0x40010c00
 8000ad0:	20000578 	.word	0x20000578

08000ad4 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2110      	movs	r1, #16
 8000ae2:	4815      	ldr	r0, [pc, #84]	; (8000b38 <ST7789_WriteData+0x64>)
 8000ae4:	f002 f840 	bl	8002b68 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2101      	movs	r1, #1
 8000aec:	4813      	ldr	r0, [pc, #76]	; (8000b3c <ST7789_WriteData+0x68>)
 8000aee:	f002 f83b 	bl	8002b68 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8000af2:	e015      	b.n	8000b20 <ST7789_WriteData+0x4c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000afa:	4293      	cmp	r3, r2
 8000afc:	bf28      	it	cs
 8000afe:	4613      	movcs	r3, r2
 8000b00:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000b02:	89fa      	ldrh	r2, [r7, #14]
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	6879      	ldr	r1, [r7, #4]
 8000b0a:	480d      	ldr	r0, [pc, #52]	; (8000b40 <ST7789_WriteData+0x6c>)
 8000b0c:	f002 fd9a 	bl	8003644 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 8000b10:	89fb      	ldrh	r3, [r7, #14]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8000b18:	89fb      	ldrh	r3, [r7, #14]
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1e6      	bne.n	8000af4 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 8000b26:	2201      	movs	r2, #1
 8000b28:	2110      	movs	r1, #16
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <ST7789_WriteData+0x64>)
 8000b2c:	f002 f81c 	bl	8002b68 <HAL_GPIO_WritePin>
}
 8000b30:	bf00      	nop
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40010800 	.word	0x40010800
 8000b3c:	40010c00 	.word	0x40010c00
 8000b40:	20000578 	.word	0x20000578

08000b44 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2110      	movs	r1, #16
 8000b52:	480c      	ldr	r0, [pc, #48]	; (8000b84 <ST7789_WriteSmallData+0x40>)
 8000b54:	f002 f808 	bl	8002b68 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	480a      	ldr	r0, [pc, #40]	; (8000b88 <ST7789_WriteSmallData+0x44>)
 8000b5e:	f002 f803 	bl	8002b68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000b62:	1df9      	adds	r1, r7, #7
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4808      	ldr	r0, [pc, #32]	; (8000b8c <ST7789_WriteSmallData+0x48>)
 8000b6c:	f002 fd6a 	bl	8003644 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000b70:	2201      	movs	r2, #1
 8000b72:	2110      	movs	r1, #16
 8000b74:	4803      	ldr	r0, [pc, #12]	; (8000b84 <ST7789_WriteSmallData+0x40>)
 8000b76:	f001 fff7 	bl	8002b68 <HAL_GPIO_WritePin>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40010800 	.word	0x40010800
 8000b88:	40010c00 	.word	0x40010c00
 8000b8c:	20000578 	.word	0x20000578

08000b90 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8000b9a:	2036      	movs	r0, #54	; 0x36
 8000b9c:	f7ff ff74 	bl	8000a88 <ST7789_WriteCommand>
	switch (m) {
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d81a      	bhi.n	8000bdc <ST7789_SetRotation+0x4c>
 8000ba6:	a201      	add	r2, pc, #4	; (adr r2, 8000bac <ST7789_SetRotation+0x1c>)
 8000ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bac:	08000bbd 	.word	0x08000bbd
 8000bb0:	08000bc5 	.word	0x08000bc5
 8000bb4:	08000bcd 	.word	0x08000bcd
 8000bb8:	08000bd5 	.word	0x08000bd5
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8000bbc:	20c0      	movs	r0, #192	; 0xc0
 8000bbe:	f7ff ffc1 	bl	8000b44 <ST7789_WriteSmallData>
		break;
 8000bc2:	e00c      	b.n	8000bde <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000bc4:	20a0      	movs	r0, #160	; 0xa0
 8000bc6:	f7ff ffbd 	bl	8000b44 <ST7789_WriteSmallData>
		break;
 8000bca:	e008      	b.n	8000bde <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f7ff ffb9 	bl	8000b44 <ST7789_WriteSmallData>
		break;
 8000bd2:	e004      	b.n	8000bde <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000bd4:	2060      	movs	r0, #96	; 0x60
 8000bd6:	f7ff ffb5 	bl	8000b44 <ST7789_WriteSmallData>
		break;
 8000bda:	e000      	b.n	8000bde <ST7789_SetRotation+0x4e>
	default:
		break;
 8000bdc:	bf00      	nop
	}
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop

08000be8 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b087      	sub	sp, #28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4623      	mov	r3, r4
 8000bf8:	80fb      	strh	r3, [r7, #6]
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	80bb      	strh	r3, [r7, #4]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	807b      	strh	r3, [r7, #2]
 8000c02:	4613      	mov	r3, r2
 8000c04:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000c06:	2200      	movs	r2, #0
 8000c08:	2110      	movs	r1, #16
 8000c0a:	4824      	ldr	r0, [pc, #144]	; (8000c9c <ST7789_SetAddressWindow+0xb4>)
 8000c0c:	f001 ffac 	bl	8002b68 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8000c10:	88fb      	ldrh	r3, [r7, #6]
 8000c12:	82fb      	strh	r3, [r7, #22]
 8000c14:	887b      	ldrh	r3, [r7, #2]
 8000c16:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8000c18:	88bb      	ldrh	r3, [r7, #4]
 8000c1a:	827b      	strh	r3, [r7, #18]
 8000c1c:	883b      	ldrh	r3, [r7, #0]
 8000c1e:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8000c20:	202a      	movs	r0, #42	; 0x2a
 8000c22:	f7ff ff31 	bl	8000a88 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8000c26:	8afb      	ldrh	r3, [r7, #22]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	733b      	strb	r3, [r7, #12]
 8000c30:	8afb      	ldrh	r3, [r7, #22]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	737b      	strb	r3, [r7, #13]
 8000c36:	8abb      	ldrh	r3, [r7, #20]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	73bb      	strb	r3, [r7, #14]
 8000c40:	8abb      	ldrh	r3, [r7, #20]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	2104      	movs	r1, #4
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff41 	bl	8000ad4 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8000c52:	202b      	movs	r0, #43	; 0x2b
 8000c54:	f7ff ff18 	bl	8000a88 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8000c58:	8a7b      	ldrh	r3, [r7, #18]
 8000c5a:	0a1b      	lsrs	r3, r3, #8
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	723b      	strb	r3, [r7, #8]
 8000c62:	8a7b      	ldrh	r3, [r7, #18]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	727b      	strb	r3, [r7, #9]
 8000c68:	8a3b      	ldrh	r3, [r7, #16]
 8000c6a:	0a1b      	lsrs	r3, r3, #8
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	72bb      	strb	r3, [r7, #10]
 8000c72:	8a3b      	ldrh	r3, [r7, #16]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	2104      	movs	r1, #4
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff28 	bl	8000ad4 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000c84:	202c      	movs	r0, #44	; 0x2c
 8000c86:	f7ff feff 	bl	8000a88 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2110      	movs	r1, #16
 8000c8e:	4803      	ldr	r0, [pc, #12]	; (8000c9c <ST7789_SetAddressWindow+0xb4>)
 8000c90:	f001 ff6a 	bl	8002b68 <HAL_GPIO_WritePin>
}
 8000c94:	bf00      	nop
 8000c96:	371c      	adds	r7, #28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd90      	pop	{r4, r7, pc}
 8000c9c:	40010800 	.word	0x40010800

08000ca0 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b08b      	sub	sp, #44	; 0x2c
 8000ca4:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(10);
 8000ca6:	200a      	movs	r0, #10
 8000ca8:	f001 f9d8 	bl	800205c <HAL_Delay>
    ST7789_RST_Clr();
 8000cac:	2200      	movs	r2, #0
 8000cae:	2102      	movs	r1, #2
 8000cb0:	4846      	ldr	r0, [pc, #280]	; (8000dcc <ST7789_Init+0x12c>)
 8000cb2:	f001 ff59 	bl	8002b68 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000cb6:	200a      	movs	r0, #10
 8000cb8:	f001 f9d0 	bl	800205c <HAL_Delay>
    ST7789_RST_Set();
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	4842      	ldr	r0, [pc, #264]	; (8000dcc <ST7789_Init+0x12c>)
 8000cc2:	f001 ff51 	bl	8002b68 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000cc6:	2014      	movs	r0, #20
 8000cc8:	f001 f9c8 	bl	800205c <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8000ccc:	203a      	movs	r0, #58	; 0x3a
 8000cce:	f7ff fedb 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8000cd2:	2055      	movs	r0, #85	; 0x55
 8000cd4:	f7ff ff36 	bl	8000b44 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8000cd8:	20b2      	movs	r0, #178	; 0xb2
 8000cda:	f7ff fed5 	bl	8000a88 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8000cde:	4a3c      	ldr	r2, [pc, #240]	; (8000dd0 <ST7789_Init+0x130>)
 8000ce0:	f107 0320 	add.w	r3, r7, #32
 8000ce4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ce8:	6018      	str	r0, [r3, #0]
 8000cea:	3304      	adds	r3, #4
 8000cec:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8000cee:	f107 0320 	add.w	r3, r7, #32
 8000cf2:	2105      	movs	r1, #5
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff feed 	bl	8000ad4 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8000cfa:	2002      	movs	r0, #2
 8000cfc:	f7ff ff48 	bl	8000b90 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8000d00:	20b7      	movs	r0, #183	; 0xb7
 8000d02:	f7ff fec1 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8000d06:	2035      	movs	r0, #53	; 0x35
 8000d08:	f7ff ff1c 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8000d0c:	20bb      	movs	r0, #187	; 0xbb
 8000d0e:	f7ff febb 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8000d12:	2019      	movs	r0, #25
 8000d14:	f7ff ff16 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8000d18:	20c0      	movs	r0, #192	; 0xc0
 8000d1a:	f7ff feb5 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8000d1e:	202c      	movs	r0, #44	; 0x2c
 8000d20:	f7ff ff10 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8000d24:	20c2      	movs	r0, #194	; 0xc2
 8000d26:	f7ff feaf 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff ff0a 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8000d30:	20c3      	movs	r0, #195	; 0xc3
 8000d32:	f7ff fea9 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8000d36:	2012      	movs	r0, #18
 8000d38:	f7ff ff04 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8000d3c:	20c4      	movs	r0, #196	; 0xc4
 8000d3e:	f7ff fea3 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8000d42:	2020      	movs	r0, #32
 8000d44:	f7ff fefe 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8000d48:	20c6      	movs	r0, #198	; 0xc6
 8000d4a:	f7ff fe9d 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8000d4e:	200f      	movs	r0, #15
 8000d50:	f7ff fef8 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8000d54:	20d0      	movs	r0, #208	; 0xd0
 8000d56:	f7ff fe97 	bl	8000a88 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8000d5a:	20a4      	movs	r0, #164	; 0xa4
 8000d5c:	f7ff fef2 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000d60:	20a1      	movs	r0, #161	; 0xa1
 8000d62:	f7ff feef 	bl	8000b44 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8000d66:	20e0      	movs	r0, #224	; 0xe0
 8000d68:	f7ff fe8e 	bl	8000a88 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <ST7789_Init+0x134>)
 8000d6e:	f107 0410 	add.w	r4, r7, #16
 8000d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d74:	c407      	stmia	r4!, {r0, r1, r2}
 8000d76:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	210e      	movs	r1, #14
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fea8 	bl	8000ad4 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8000d84:	20e1      	movs	r0, #225	; 0xe1
 8000d86:	f7ff fe7f 	bl	8000a88 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <ST7789_Init+0x138>)
 8000d8c:	463c      	mov	r4, r7
 8000d8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d90:	c407      	stmia	r4!, {r0, r1, r2}
 8000d92:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000d94:	463b      	mov	r3, r7
 8000d96:	210e      	movs	r1, #14
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe9b 	bl	8000ad4 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8000d9e:	2021      	movs	r0, #33	; 0x21
 8000da0:	f7ff fe72 	bl	8000a88 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000da4:	2011      	movs	r0, #17
 8000da6:	f7ff fe6f 	bl	8000a88 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8000daa:	2013      	movs	r0, #19
 8000dac:	f7ff fe6c 	bl	8000a88 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8000db0:	2029      	movs	r0, #41	; 0x29
 8000db2:	f7ff fe69 	bl	8000a88 <ST7789_WriteCommand>

	HAL_Delay(50);
 8000db6:	2032      	movs	r0, #50	; 0x32
 8000db8:	f001 f950 	bl	800205c <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f000 f80d 	bl	8000ddc <ST7789_Fill_Color>
}
 8000dc2:	bf00      	nop
 8000dc4:	372c      	adds	r7, #44	; 0x2c
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd90      	pop	{r4, r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40010c00 	.word	0x40010c00
 8000dd0:	080061f8 	.word	0x080061f8
 8000dd4:	08006200 	.word	0x08006200
 8000dd8:	08006210 	.word	0x08006210

08000ddc <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8000de6:	23ef      	movs	r3, #239	; 0xef
 8000de8:	22ef      	movs	r2, #239	; 0xef
 8000dea:	2100      	movs	r1, #0
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff fefb 	bl	8000be8 <ST7789_SetAddressWindow>
	ST7789_Select();
 8000df2:	2200      	movs	r2, #0
 8000df4:	2110      	movs	r1, #16
 8000df6:	4816      	ldr	r0, [pc, #88]	; (8000e50 <ST7789_Fill_Color+0x74>)
 8000df8:	f001 feb6 	bl	8002b68 <HAL_GPIO_WritePin>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	81fb      	strh	r3, [r7, #14]
 8000e00:	e019      	b.n	8000e36 <ST7789_Fill_Color+0x5a>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8000e02:	2300      	movs	r3, #0
 8000e04:	81bb      	strh	r3, [r7, #12]
 8000e06:	e010      	b.n	8000e2a <ST7789_Fill_Color+0x4e>
					uint8_t data[] = {color >> 8, color & 0xFF};
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	0a1b      	lsrs	r3, r3, #8
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	723b      	strb	r3, [r7, #8]
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fe58 	bl	8000ad4 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8000e24:	89bb      	ldrh	r3, [r7, #12]
 8000e26:	3301      	adds	r3, #1
 8000e28:	81bb      	strh	r3, [r7, #12]
 8000e2a:	89bb      	ldrh	r3, [r7, #12]
 8000e2c:	2bef      	cmp	r3, #239	; 0xef
 8000e2e:	d9eb      	bls.n	8000e08 <ST7789_Fill_Color+0x2c>
		for (i = 0; i < ST7789_WIDTH; i++)
 8000e30:	89fb      	ldrh	r3, [r7, #14]
 8000e32:	3301      	adds	r3, #1
 8000e34:	81fb      	strh	r3, [r7, #14]
 8000e36:	89fb      	ldrh	r3, [r7, #14]
 8000e38:	2bef      	cmp	r3, #239	; 0xef
 8000e3a:	d9e2      	bls.n	8000e02 <ST7789_Fill_Color+0x26>
				}
	#endif
	ST7789_UnSelect();
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2110      	movs	r1, #16
 8000e40:	4803      	ldr	r0, [pc, #12]	; (8000e50 <ST7789_Fill_Color+0x74>)
 8000e42:	f001 fe91 	bl	8002b68 <HAL_GPIO_WritePin>
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40010800 	.word	0x40010800

08000e54 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000e54:	b082      	sub	sp, #8
 8000e56:	b590      	push	{r4, r7, lr}
 8000e58:	b089      	sub	sp, #36	; 0x24
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80fb      	strh	r3, [r7, #6]
 8000e62:	460b      	mov	r3, r1
 8000e64:	80bb      	strh	r3, [r7, #4]
 8000e66:	4613      	mov	r3, r2
 8000e68:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2110      	movs	r1, #16
 8000e6e:	4838      	ldr	r0, [pc, #224]	; (8000f50 <ST7789_WriteChar+0xfc>)
 8000e70:	f001 fe7a 	bl	8002b68 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8000e74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	3b01      	subs	r3, #1
 8000e82:	b29c      	uxth	r4, r3
 8000e84:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	88bb      	ldrh	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	3b01      	subs	r3, #1
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	88b9      	ldrh	r1, [r7, #4]
 8000e96:	88f8      	ldrh	r0, [r7, #6]
 8000e98:	4622      	mov	r2, r4
 8000e9a:	f7ff fea5 	bl	8000be8 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
 8000ea2:	e043      	b.n	8000f2c <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 8000ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ea6:	78fb      	ldrb	r3, [r7, #3]
 8000ea8:	3b20      	subs	r3, #32
 8000eaa:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000eae:	fb01 f303 	mul.w	r3, r1, r3
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	440b      	add	r3, r1
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	4413      	add	r3, r2
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	e029      	b.n	8000f1a <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00e      	beq.n	8000ef4 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8000ed6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	743b      	strb	r3, [r7, #16]
 8000ee0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	2102      	movs	r1, #2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fdf1 	bl	8000ad4 <ST7789_WriteData>
 8000ef2:	e00f      	b.n	8000f14 <ST7789_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8000ef4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	733b      	strb	r3, [r7, #12]
 8000f00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fde0 	bl	8000ad4 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	3301      	adds	r3, #1
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f1e:	461a      	mov	r2, r3
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d3cf      	bcc.n	8000ec6 <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	61fb      	str	r3, [r7, #28]
 8000f2c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000f30:	461a      	mov	r2, r3
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d3b5      	bcc.n	8000ea4 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2110      	movs	r1, #16
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <ST7789_WriteChar+0xfc>)
 8000f3e:	f001 fe13 	bl	8002b68 <HAL_GPIO_WritePin>
}
 8000f42:	bf00      	nop
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000f4c:	b002      	add	sp, #8
 8000f4e:	4770      	bx	lr
 8000f50:	40010800 	.word	0x40010800

08000f54 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000f54:	b082      	sub	sp, #8
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af04      	add	r7, sp, #16
 8000f5c:	603a      	str	r2, [r7, #0]
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	4603      	mov	r3, r0
 8000f62:	80fb      	strh	r3, [r7, #6]
 8000f64:	460b      	mov	r3, r1
 8000f66:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2110      	movs	r1, #16
 8000f6c:	4821      	ldr	r0, [pc, #132]	; (8000ff4 <ST7789_WriteString+0xa0>)
 8000f6e:	f001 fdfb 	bl	8002b68 <HAL_GPIO_WritePin>
	while (*str) {
 8000f72:	e02d      	b.n	8000fd0 <ST7789_WriteString+0x7c>
		if (x + font.width >= ST7789_WIDTH) {
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	7d3a      	ldrb	r2, [r7, #20]
 8000f78:	4413      	add	r3, r2
 8000f7a:	2bef      	cmp	r3, #239	; 0xef
 8000f7c:	dd13      	ble.n	8000fa6 <ST7789_WriteString+0x52>
			x = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8000f82:	7d7b      	ldrb	r3, [r7, #21]
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	88bb      	ldrh	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8000f8c:	88bb      	ldrh	r3, [r7, #4]
 8000f8e:	7d7a      	ldrb	r2, [r7, #21]
 8000f90:	4413      	add	r3, r2
 8000f92:	2bef      	cmp	r3, #239	; 0xef
 8000f94:	dc21      	bgt.n	8000fda <ST7789_WriteString+0x86>
				break;
			}

			if (*str == ' ') {
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b20      	cmp	r3, #32
 8000f9c:	d103      	bne.n	8000fa6 <ST7789_WriteString+0x52>
				// skip spaces in the beginning of the new line
				str++;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	603b      	str	r3, [r7, #0]
				continue;
 8000fa4:	e014      	b.n	8000fd0 <ST7789_WriteString+0x7c>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	781a      	ldrb	r2, [r3, #0]
 8000faa:	88b9      	ldrh	r1, [r7, #4]
 8000fac:	88f8      	ldrh	r0, [r7, #6]
 8000fae:	8c3b      	ldrh	r3, [r7, #32]
 8000fb0:	9302      	str	r3, [sp, #8]
 8000fb2:	8bbb      	ldrh	r3, [r7, #28]
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f7ff ff4a 	bl	8000e54 <ST7789_WriteChar>
		x += font.width;
 8000fc0:	7d3b      	ldrb	r3, [r7, #20]
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	80fb      	strh	r3, [r7, #6]
		str++;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1cd      	bne.n	8000f74 <ST7789_WriteString+0x20>
 8000fd8:	e000      	b.n	8000fdc <ST7789_WriteString+0x88>
				break;
 8000fda:	bf00      	nop
	}
	ST7789_UnSelect();
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2110      	movs	r1, #16
 8000fe0:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <ST7789_WriteString+0xa0>)
 8000fe2:	f001 fdc1 	bl	8002b68 <HAL_GPIO_WritePin>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ff0:	b002      	add	sp, #8
 8000ff2:	4770      	bx	lr
 8000ff4:	40010800 	.word	0x40010800

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffe:	f000 ffcb 	bl	8001f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001002:	f000 fbc3 	bl	800178c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001006:	f000 fcf5 	bl	80019f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800100a:	f000 fc93 	bl	8001934 <MX_SPI1_Init>
  MX_ADC1_Init();
 800100e:	f000 fc15 	bl	800183c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001012:	f000 fc51 	bl	80018b8 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8001016:	f000 fcc3 	bl	80019a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, onOff);
 800101a:	4ba5      	ldr	r3, [pc, #660]	; (80012b0 <main+0x2b8>)
 800101c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	461a      	mov	r2, r3
 8001024:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001028:	48a2      	ldr	r0, [pc, #648]	; (80012b4 <main+0x2bc>)
 800102a:	f001 fd9d 	bl	8002b68 <HAL_GPIO_WritePin>
  ST7789_Init();
 800102e:	f7ff fe37 	bl	8000ca0 <ST7789_Init>

  ST7789_Fill_Color(WHITE);
 8001032:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001036:	f7ff fed1 	bl	8000ddc <ST7789_Fill_Color>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 800103a:	2201      	movs	r2, #1
 800103c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001040:	489c      	ldr	r0, [pc, #624]	; (80012b4 <main+0x2bc>)
 8001042:	f001 fd91 	bl	8002b68 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001046:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800104a:	f001 f807 	bl	800205c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001054:	4897      	ldr	r0, [pc, #604]	; (80012b4 <main+0x2bc>)
 8001056:	f001 fd87 	bl	8002b68 <HAL_GPIO_WritePin>
  HAL_Delay(12500);
 800105a:	f243 00d4 	movw	r0, #12500	; 0x30d4
 800105e:	f000 fffd 	bl	800205c <HAL_Delay>

  sprintf(TxData, "ATE0\r\n");
 8001062:	4b95      	ldr	r3, [pc, #596]	; (80012b8 <main+0x2c0>)
 8001064:	4a95      	ldr	r2, [pc, #596]	; (80012bc <main+0x2c4>)
 8001066:	6810      	ldr	r0, [r2, #0]
 8001068:	6018      	str	r0, [r3, #0]
 800106a:	8891      	ldrh	r1, [r2, #4]
 800106c:	7992      	ldrb	r2, [r2, #6]
 800106e:	8099      	strh	r1, [r3, #4]
 8001070:	719a      	strb	r2, [r3, #6]
  	    HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001072:	4891      	ldr	r0, [pc, #580]	; (80012b8 <main+0x2c0>)
 8001074:	f7ff f86c 	bl	8000150 <strlen>
 8001078:	4603      	mov	r3, r0
 800107a:	b29a      	uxth	r2, r3
 800107c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001080:	498d      	ldr	r1, [pc, #564]	; (80012b8 <main+0x2c0>)
 8001082:	488f      	ldr	r0, [pc, #572]	; (80012c0 <main+0x2c8>)
 8001084:	f002 fd0d 	bl	8003aa2 <HAL_UART_Transmit>
		HAL_Delay(2000);
 8001088:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800108c:	f000 ffe6 	bl	800205c <HAL_Delay>
  sprintf(TxData, "AT+GSMBUSY=1\r\n");
 8001090:	4a89      	ldr	r2, [pc, #548]	; (80012b8 <main+0x2c0>)
 8001092:	4b8c      	ldr	r3, [pc, #560]	; (80012c4 <main+0x2cc>)
 8001094:	4614      	mov	r4, r2
 8001096:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001098:	6020      	str	r0, [r4, #0]
 800109a:	6061      	str	r1, [r4, #4]
 800109c:	60a2      	str	r2, [r4, #8]
 800109e:	881a      	ldrh	r2, [r3, #0]
 80010a0:	789b      	ldrb	r3, [r3, #2]
 80010a2:	81a2      	strh	r2, [r4, #12]
 80010a4:	73a3      	strb	r3, [r4, #14]
      	HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 80010a6:	4884      	ldr	r0, [pc, #528]	; (80012b8 <main+0x2c0>)
 80010a8:	f7ff f852 	bl	8000150 <strlen>
 80010ac:	4603      	mov	r3, r0
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b4:	4980      	ldr	r1, [pc, #512]	; (80012b8 <main+0x2c0>)
 80010b6:	4882      	ldr	r0, [pc, #520]	; (80012c0 <main+0x2c8>)
 80010b8:	f002 fcf3 	bl	8003aa2 <HAL_UART_Transmit>
      	HAL_Delay(2000);
 80010bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010c0:	f000 ffcc 	bl	800205c <HAL_Delay>
  sprintf(TxData, "AT+CGATT=1\r\n");
 80010c4:	4a7c      	ldr	r2, [pc, #496]	; (80012b8 <main+0x2c0>)
 80010c6:	4b80      	ldr	r3, [pc, #512]	; (80012c8 <main+0x2d0>)
 80010c8:	4614      	mov	r4, r2
 80010ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80010cc:	6020      	str	r0, [r4, #0]
 80010ce:	6061      	str	r1, [r4, #4]
 80010d0:	60a2      	str	r2, [r4, #8]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	7323      	strb	r3, [r4, #12]
    	HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 80010d6:	4878      	ldr	r0, [pc, #480]	; (80012b8 <main+0x2c0>)
 80010d8:	f7ff f83a 	bl	8000150 <strlen>
 80010dc:	4603      	mov	r3, r0
 80010de:	b29a      	uxth	r2, r3
 80010e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e4:	4974      	ldr	r1, [pc, #464]	; (80012b8 <main+0x2c0>)
 80010e6:	4876      	ldr	r0, [pc, #472]	; (80012c0 <main+0x2c8>)
 80010e8:	f002 fcdb 	bl	8003aa2 <HAL_UART_Transmit>
    	HAL_Delay(2000);
 80010ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010f0:	f000 ffb4 	bl	800205c <HAL_Delay>
  sprintf(TxData, "AT+CIPMUX=0\r\n");
 80010f4:	4a70      	ldr	r2, [pc, #448]	; (80012b8 <main+0x2c0>)
 80010f6:	4b75      	ldr	r3, [pc, #468]	; (80012cc <main+0x2d4>)
 80010f8:	4614      	mov	r4, r2
 80010fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80010fc:	6020      	str	r0, [r4, #0]
 80010fe:	6061      	str	r1, [r4, #4]
 8001100:	60a2      	str	r2, [r4, #8]
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	81a3      	strh	r3, [r4, #12]
  	  	HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001106:	486c      	ldr	r0, [pc, #432]	; (80012b8 <main+0x2c0>)
 8001108:	f7ff f822 	bl	8000150 <strlen>
 800110c:	4603      	mov	r3, r0
 800110e:	b29a      	uxth	r2, r3
 8001110:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001114:	4968      	ldr	r1, [pc, #416]	; (80012b8 <main+0x2c0>)
 8001116:	486a      	ldr	r0, [pc, #424]	; (80012c0 <main+0x2c8>)
 8001118:	f002 fcc3 	bl	8003aa2 <HAL_UART_Transmit>
    	HAL_Delay(2000);
 800111c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001120:	f000 ff9c 	bl	800205c <HAL_Delay>
  sprintf(TxData, "AT+CSTT=\"zap.vivo.com.br\",\"vivo\",\"vivo\"\r\n");
 8001124:	4b64      	ldr	r3, [pc, #400]	; (80012b8 <main+0x2c0>)
 8001126:	4a6a      	ldr	r2, [pc, #424]	; (80012d0 <main+0x2d8>)
 8001128:	4614      	mov	r4, r2
 800112a:	469c      	mov	ip, r3
 800112c:	f104 0e20 	add.w	lr, r4, #32
 8001130:	4665      	mov	r5, ip
 8001132:	4626      	mov	r6, r4
 8001134:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001136:	6028      	str	r0, [r5, #0]
 8001138:	6069      	str	r1, [r5, #4]
 800113a:	60aa      	str	r2, [r5, #8]
 800113c:	60eb      	str	r3, [r5, #12]
 800113e:	3410      	adds	r4, #16
 8001140:	f10c 0c10 	add.w	ip, ip, #16
 8001144:	4574      	cmp	r4, lr
 8001146:	d1f3      	bne.n	8001130 <main+0x138>
 8001148:	4662      	mov	r2, ip
 800114a:	4623      	mov	r3, r4
 800114c:	cb03      	ldmia	r3!, {r0, r1}
 800114e:	6010      	str	r0, [r2, #0]
 8001150:	6051      	str	r1, [r2, #4]
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	8113      	strh	r3, [r2, #8]
        HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001156:	4858      	ldr	r0, [pc, #352]	; (80012b8 <main+0x2c0>)
 8001158:	f7fe fffa 	bl	8000150 <strlen>
 800115c:	4603      	mov	r3, r0
 800115e:	b29a      	uxth	r2, r3
 8001160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001164:	4954      	ldr	r1, [pc, #336]	; (80012b8 <main+0x2c0>)
 8001166:	4856      	ldr	r0, [pc, #344]	; (80012c0 <main+0x2c8>)
 8001168:	f002 fc9b 	bl	8003aa2 <HAL_UART_Transmit>
        HAL_Delay(5000);
 800116c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001170:	f000 ff74 	bl	800205c <HAL_Delay>
  sprintf(TxData, "AT+CIICR\r\n");
 8001174:	4a50      	ldr	r2, [pc, #320]	; (80012b8 <main+0x2c0>)
 8001176:	4b57      	ldr	r3, [pc, #348]	; (80012d4 <main+0x2dc>)
 8001178:	cb03      	ldmia	r3!, {r0, r1}
 800117a:	6010      	str	r0, [r2, #0]
 800117c:	6051      	str	r1, [r2, #4]
 800117e:	8819      	ldrh	r1, [r3, #0]
 8001180:	789b      	ldrb	r3, [r3, #2]
 8001182:	8111      	strh	r1, [r2, #8]
 8001184:	7293      	strb	r3, [r2, #10]
        HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001186:	484c      	ldr	r0, [pc, #304]	; (80012b8 <main+0x2c0>)
 8001188:	f7fe ffe2 	bl	8000150 <strlen>
 800118c:	4603      	mov	r3, r0
 800118e:	b29a      	uxth	r2, r3
 8001190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001194:	4948      	ldr	r1, [pc, #288]	; (80012b8 <main+0x2c0>)
 8001196:	484a      	ldr	r0, [pc, #296]	; (80012c0 <main+0x2c8>)
 8001198:	f002 fc83 	bl	8003aa2 <HAL_UART_Transmit>
        HAL_Delay(2000);
 800119c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011a0:	f000 ff5c 	bl	800205c <HAL_Delay>
  sprintf(TxData, "AT+CIFSR\r\n");
 80011a4:	4a44      	ldr	r2, [pc, #272]	; (80012b8 <main+0x2c0>)
 80011a6:	4b4c      	ldr	r3, [pc, #304]	; (80012d8 <main+0x2e0>)
 80011a8:	cb03      	ldmia	r3!, {r0, r1}
 80011aa:	6010      	str	r0, [r2, #0]
 80011ac:	6051      	str	r1, [r2, #4]
 80011ae:	8819      	ldrh	r1, [r3, #0]
 80011b0:	789b      	ldrb	r3, [r3, #2]
 80011b2:	8111      	strh	r1, [r2, #8]
 80011b4:	7293      	strb	r3, [r2, #10]
        HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 80011b6:	4840      	ldr	r0, [pc, #256]	; (80012b8 <main+0x2c0>)
 80011b8:	f7fe ffca 	bl	8000150 <strlen>
 80011bc:	4603      	mov	r3, r0
 80011be:	b29a      	uxth	r2, r3
 80011c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c4:	493c      	ldr	r1, [pc, #240]	; (80012b8 <main+0x2c0>)
 80011c6:	483e      	ldr	r0, [pc, #248]	; (80012c0 <main+0x2c8>)
 80011c8:	f002 fc6b 	bl	8003aa2 <HAL_UART_Transmit>
        HAL_Delay(2000);
 80011cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011d0:	f000 ff44 	bl	800205c <HAL_Delay>
  sprintf(TxData, "AT+CIPSHUT\r\n");
 80011d4:	4a38      	ldr	r2, [pc, #224]	; (80012b8 <main+0x2c0>)
 80011d6:	4b41      	ldr	r3, [pc, #260]	; (80012dc <main+0x2e4>)
 80011d8:	4614      	mov	r4, r2
 80011da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80011dc:	6020      	str	r0, [r4, #0]
 80011de:	6061      	str	r1, [r4, #4]
 80011e0:	60a2      	str	r2, [r4, #8]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	7323      	strb	r3, [r4, #12]
        HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 80011e6:	4834      	ldr	r0, [pc, #208]	; (80012b8 <main+0x2c0>)
 80011e8:	f7fe ffb2 	bl	8000150 <strlen>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f4:	4930      	ldr	r1, [pc, #192]	; (80012b8 <main+0x2c0>)
 80011f6:	4832      	ldr	r0, [pc, #200]	; (80012c0 <main+0x2c8>)
 80011f8:	f002 fc53 	bl	8003aa2 <HAL_UART_Transmit>
        HAL_Delay(2000);
 80011fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001200:	f000 ff2c 	bl	800205c <HAL_Delay>

  sprintf(TxData, "AT+CIPSTART=\"TCP\",\"industrial.api.ubidots.com\",\"80\"\r\n");
 8001204:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <main+0x2c0>)
 8001206:	4a36      	ldr	r2, [pc, #216]	; (80012e0 <main+0x2e8>)
 8001208:	4614      	mov	r4, r2
 800120a:	469c      	mov	ip, r3
 800120c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001210:	4665      	mov	r5, ip
 8001212:	4626      	mov	r6, r4
 8001214:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001216:	6028      	str	r0, [r5, #0]
 8001218:	6069      	str	r1, [r5, #4]
 800121a:	60aa      	str	r2, [r5, #8]
 800121c:	60eb      	str	r3, [r5, #12]
 800121e:	3410      	adds	r4, #16
 8001220:	f10c 0c10 	add.w	ip, ip, #16
 8001224:	4574      	cmp	r4, lr
 8001226:	d1f3      	bne.n	8001210 <main+0x218>
 8001228:	4663      	mov	r3, ip
 800122a:	4622      	mov	r2, r4
 800122c:	6810      	ldr	r0, [r2, #0]
 800122e:	6018      	str	r0, [r3, #0]
 8001230:	8892      	ldrh	r2, [r2, #4]
 8001232:	809a      	strh	r2, [r3, #4]
        HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001234:	4820      	ldr	r0, [pc, #128]	; (80012b8 <main+0x2c0>)
 8001236:	f7fe ff8b 	bl	8000150 <strlen>
 800123a:	4603      	mov	r3, r0
 800123c:	b29a      	uxth	r2, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	491d      	ldr	r1, [pc, #116]	; (80012b8 <main+0x2c0>)
 8001244:	481e      	ldr	r0, [pc, #120]	; (80012c0 <main+0x2c8>)
 8001246:	f002 fc2c 	bl	8003aa2 <HAL_UART_Transmit>
        HAL_Delay(10000);
 800124a:	f242 7010 	movw	r0, #10000	; 0x2710
 800124e:	f000 ff05 	bl	800205c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  currentVMAX = -999999;
 8001252:	4a24      	ldr	r2, [pc, #144]	; (80012e4 <main+0x2ec>)
 8001254:	a412      	add	r4, pc, #72	; (adr r4, 80012a0 <main+0x2a8>)
 8001256:	e9d4 3400 	ldrd	r3, r4, [r4]
 800125a:	e9c2 3400 	strd	r3, r4, [r2]
	  currentVMIN = 999999;
 800125e:	4a22      	ldr	r2, [pc, #136]	; (80012e8 <main+0x2f0>)
 8001260:	a411      	add	r4, pc, #68	; (adr r4, 80012a8 <main+0x2b0>)
 8001262:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001266:	e9c2 3400 	strd	r3, r4, [r2]
	  voltageVMAX = -999999;
 800126a:	4a20      	ldr	r2, [pc, #128]	; (80012ec <main+0x2f4>)
 800126c:	a40c      	add	r4, pc, #48	; (adr r4, 80012a0 <main+0x2a8>)
 800126e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001272:	e9c2 3400 	strd	r3, r4, [r2]
	  voltageVMIN = 999999;
 8001276:	4a1e      	ldr	r2, [pc, #120]	; (80012f0 <main+0x2f8>)
 8001278:	a40b      	add	r4, pc, #44	; (adr r4, 80012a8 <main+0x2b0>)
 800127a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800127e:	e9c2 3400 	strd	r3, r4, [r2]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, onOff);
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <main+0x2b8>)
 8001284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	461a      	mov	r2, r3
 800128c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001290:	4808      	ldr	r0, [pc, #32]	; (80012b4 <main+0x2bc>)
 8001292:	f001 fc69 	bl	8002b68 <HAL_GPIO_WritePin>

	for (i = 0; i < 400; i++) {
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <main+0x2fc>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	e0f1      	b.n	8001482 <main+0x48a>
 800129e:	bf00      	nop
 80012a0:	00000000 	.word	0x00000000
 80012a4:	c12e847e 	.word	0xc12e847e
 80012a8:	00000000 	.word	0x00000000
 80012ac:	412e847e 	.word	0x412e847e
 80012b0:	20000008 	.word	0x20000008
 80012b4:	40010800 	.word	0x40010800
 80012b8:	20000480 	.word	0x20000480
 80012bc:	08006290 	.word	0x08006290
 80012c0:	20000400 	.word	0x20000400
 80012c4:	08006298 	.word	0x08006298
 80012c8:	080062a8 	.word	0x080062a8
 80012cc:	080062b8 	.word	0x080062b8
 80012d0:	080062c8 	.word	0x080062c8
 80012d4:	080062f4 	.word	0x080062f4
 80012d8:	08006300 	.word	0x08006300
 80012dc:	0800630c 	.word	0x0800630c
 80012e0:	0800631c 	.word	0x0800631c
 80012e4:	200003f0 	.word	0x200003f0
 80012e8:	20000708 	.word	0x20000708
 80012ec:	200003c0 	.word	0x200003c0
 80012f0:	20000700 	.word	0x20000700
 80012f4:	200003c8 	.word	0x200003c8

	//Corrente
		HAL_ADC_Start(&hadc1);
 80012f8:	48a7      	ldr	r0, [pc, #668]	; (8001598 <main+0x5a0>)
 80012fa:	f000 ffa9 	bl	8002250 <HAL_ADC_Start>
		rawCurrentInput = HAL_ADC_GetValue(&hadc1);
 80012fe:	48a6      	ldr	r0, [pc, #664]	; (8001598 <main+0x5a0>)
 8001300:	f001 f854 	bl	80023ac <HAL_ADC_GetValue>
 8001304:	4602      	mov	r2, r0
 8001306:	4ba5      	ldr	r3, [pc, #660]	; (800159c <main+0x5a4>)
 8001308:	601a      	str	r2, [r3, #0]
		currentV = ((double)rawCurrentInput/4096)*3.3;
 800130a:	4ba4      	ldr	r3, [pc, #656]	; (800159c <main+0x5a4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f868 	bl	80003e4 <__aeabi_ui2d>
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4ba1      	ldr	r3, [pc, #644]	; (80015a0 <main+0x5a8>)
 800131a:	f7ff fa07 	bl	800072c <__aeabi_ddiv>
 800131e:	4603      	mov	r3, r0
 8001320:	460c      	mov	r4, r1
 8001322:	4618      	mov	r0, r3
 8001324:	4621      	mov	r1, r4
 8001326:	a392      	add	r3, pc, #584	; (adr r3, 8001570 <main+0x578>)
 8001328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132c:	f7ff f8d4 	bl	80004d8 <__aeabi_dmul>
 8001330:	4603      	mov	r3, r0
 8001332:	460c      	mov	r4, r1
 8001334:	4a9b      	ldr	r2, [pc, #620]	; (80015a4 <main+0x5ac>)
 8001336:	e9c2 3400 	strd	r3, r4, [r2]

		if (currentVMAX < currentV) {
 800133a:	4b9b      	ldr	r3, [pc, #620]	; (80015a8 <main+0x5b0>)
 800133c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001340:	4b98      	ldr	r3, [pc, #608]	; (80015a4 <main+0x5ac>)
 8001342:	cb18      	ldmia	r3, {r3, r4}
 8001344:	461a      	mov	r2, r3
 8001346:	4623      	mov	r3, r4
 8001348:	f7ff fb38 	bl	80009bc <__aeabi_dcmplt>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d004      	beq.n	800135c <main+0x364>
			currentVMAX = currentV;
 8001352:	4b94      	ldr	r3, [pc, #592]	; (80015a4 <main+0x5ac>)
 8001354:	cb18      	ldmia	r3, {r3, r4}
 8001356:	4a94      	ldr	r2, [pc, #592]	; (80015a8 <main+0x5b0>)
 8001358:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if (currentVMIN > currentV) {
 800135c:	4b93      	ldr	r3, [pc, #588]	; (80015ac <main+0x5b4>)
 800135e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001362:	4b90      	ldr	r3, [pc, #576]	; (80015a4 <main+0x5ac>)
 8001364:	cb18      	ldmia	r3, {r3, r4}
 8001366:	461a      	mov	r2, r3
 8001368:	4623      	mov	r3, r4
 800136a:	f7ff fb45 	bl	80009f8 <__aeabi_dcmpgt>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d004      	beq.n	800137e <main+0x386>
			currentVMIN = currentV;
 8001374:	4b8b      	ldr	r3, [pc, #556]	; (80015a4 <main+0x5ac>)
 8001376:	cb18      	ldmia	r3, {r3, r4}
 8001378:	4a8c      	ldr	r2, [pc, #560]	; (80015ac <main+0x5b4>)
 800137a:	e9c2 3400 	strd	r3, r4, [r2]
		}

		currentV = ((double)rawCurrentInput/4096)*3.3;
 800137e:	4b87      	ldr	r3, [pc, #540]	; (800159c <main+0x5a4>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f82e 	bl	80003e4 <__aeabi_ui2d>
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b84      	ldr	r3, [pc, #528]	; (80015a0 <main+0x5a8>)
 800138e:	f7ff f9cd 	bl	800072c <__aeabi_ddiv>
 8001392:	4603      	mov	r3, r0
 8001394:	460c      	mov	r4, r1
 8001396:	4618      	mov	r0, r3
 8001398:	4621      	mov	r1, r4
 800139a:	a375      	add	r3, pc, #468	; (adr r3, 8001570 <main+0x578>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7ff f89a 	bl	80004d8 <__aeabi_dmul>
 80013a4:	4603      	mov	r3, r0
 80013a6:	460c      	mov	r4, r1
 80013a8:	4a7e      	ldr	r2, [pc, #504]	; (80015a4 <main+0x5ac>)
 80013aa:	e9c2 3400 	strd	r3, r4, [r2]

		if (currentVMAX < currentV) {
 80013ae:	4b7e      	ldr	r3, [pc, #504]	; (80015a8 <main+0x5b0>)
 80013b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013b4:	4b7b      	ldr	r3, [pc, #492]	; (80015a4 <main+0x5ac>)
 80013b6:	cb18      	ldmia	r3, {r3, r4}
 80013b8:	461a      	mov	r2, r3
 80013ba:	4623      	mov	r3, r4
 80013bc:	f7ff fafe 	bl	80009bc <__aeabi_dcmplt>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d004      	beq.n	80013d0 <main+0x3d8>
			currentVMAX = currentV;
 80013c6:	4b77      	ldr	r3, [pc, #476]	; (80015a4 <main+0x5ac>)
 80013c8:	cb18      	ldmia	r3, {r3, r4}
 80013ca:	4a77      	ldr	r2, [pc, #476]	; (80015a8 <main+0x5b0>)
 80013cc:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if (currentVMIN > currentV) {
 80013d0:	4b76      	ldr	r3, [pc, #472]	; (80015ac <main+0x5b4>)
 80013d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013d6:	4b73      	ldr	r3, [pc, #460]	; (80015a4 <main+0x5ac>)
 80013d8:	cb18      	ldmia	r3, {r3, r4}
 80013da:	461a      	mov	r2, r3
 80013dc:	4623      	mov	r3, r4
 80013de:	f7ff fb0b 	bl	80009f8 <__aeabi_dcmpgt>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d004      	beq.n	80013f2 <main+0x3fa>
			currentVMIN = currentV;
 80013e8:	4b6e      	ldr	r3, [pc, #440]	; (80015a4 <main+0x5ac>)
 80013ea:	cb18      	ldmia	r3, {r3, r4}
 80013ec:	4a6f      	ldr	r2, [pc, #444]	; (80015ac <main+0x5b4>)
 80013ee:	e9c2 3400 	strd	r3, r4, [r2]
		}

	//Tensão

		HAL_ADC_Start(&hadc2);
 80013f2:	486f      	ldr	r0, [pc, #444]	; (80015b0 <main+0x5b8>)
 80013f4:	f000 ff2c 	bl	8002250 <HAL_ADC_Start>
		rawVoltageInput = HAL_ADC_GetValue(&hadc2);
 80013f8:	486d      	ldr	r0, [pc, #436]	; (80015b0 <main+0x5b8>)
 80013fa:	f000 ffd7 	bl	80023ac <HAL_ADC_GetValue>
 80013fe:	4602      	mov	r2, r0
 8001400:	4b6c      	ldr	r3, [pc, #432]	; (80015b4 <main+0x5bc>)
 8001402:	601a      	str	r2, [r3, #0]
		voltageV = ((double)rawVoltageInput/4096)*3.3;
 8001404:	4b6b      	ldr	r3, [pc, #428]	; (80015b4 <main+0x5bc>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7fe ffeb 	bl	80003e4 <__aeabi_ui2d>
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	4b63      	ldr	r3, [pc, #396]	; (80015a0 <main+0x5a8>)
 8001414:	f7ff f98a 	bl	800072c <__aeabi_ddiv>
 8001418:	4603      	mov	r3, r0
 800141a:	460c      	mov	r4, r1
 800141c:	4618      	mov	r0, r3
 800141e:	4621      	mov	r1, r4
 8001420:	a353      	add	r3, pc, #332	; (adr r3, 8001570 <main+0x578>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	f7ff f857 	bl	80004d8 <__aeabi_dmul>
 800142a:	4603      	mov	r3, r0
 800142c:	460c      	mov	r4, r1
 800142e:	4a62      	ldr	r2, [pc, #392]	; (80015b8 <main+0x5c0>)
 8001430:	e9c2 3400 	strd	r3, r4, [r2]

		if (voltageVMAX < voltageV) {
 8001434:	4b61      	ldr	r3, [pc, #388]	; (80015bc <main+0x5c4>)
 8001436:	e9d3 0100 	ldrd	r0, r1, [r3]
 800143a:	4b5f      	ldr	r3, [pc, #380]	; (80015b8 <main+0x5c0>)
 800143c:	cb18      	ldmia	r3, {r3, r4}
 800143e:	461a      	mov	r2, r3
 8001440:	4623      	mov	r3, r4
 8001442:	f7ff fabb 	bl	80009bc <__aeabi_dcmplt>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <main+0x45e>
			voltageVMAX = voltageV;
 800144c:	4b5a      	ldr	r3, [pc, #360]	; (80015b8 <main+0x5c0>)
 800144e:	cb18      	ldmia	r3, {r3, r4}
 8001450:	4a5a      	ldr	r2, [pc, #360]	; (80015bc <main+0x5c4>)
 8001452:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if (voltageVMIN > voltageV) {
 8001456:	4b5a      	ldr	r3, [pc, #360]	; (80015c0 <main+0x5c8>)
 8001458:	e9d3 0100 	ldrd	r0, r1, [r3]
 800145c:	4b56      	ldr	r3, [pc, #344]	; (80015b8 <main+0x5c0>)
 800145e:	cb18      	ldmia	r3, {r3, r4}
 8001460:	461a      	mov	r2, r3
 8001462:	4623      	mov	r3, r4
 8001464:	f7ff fac8 	bl	80009f8 <__aeabi_dcmpgt>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d004      	beq.n	8001478 <main+0x480>
			voltageVMIN = voltageV;
 800146e:	4b52      	ldr	r3, [pc, #328]	; (80015b8 <main+0x5c0>)
 8001470:	cb18      	ldmia	r3, {r3, r4}
 8001472:	4a53      	ldr	r2, [pc, #332]	; (80015c0 <main+0x5c8>)
 8001474:	e9c2 3400 	strd	r3, r4, [r2]
	for (i = 0; i < 400; i++) {
 8001478:	4b52      	ldr	r3, [pc, #328]	; (80015c4 <main+0x5cc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	4a51      	ldr	r2, [pc, #324]	; (80015c4 <main+0x5cc>)
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b50      	ldr	r3, [pc, #320]	; (80015c4 <main+0x5cc>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800148a:	f6ff af35 	blt.w	80012f8 <main+0x300>
		}

	}

	currentVRMS = (currentVMAX - currentVMIN) / (2 * sqrt(2));
 800148e:	4b46      	ldr	r3, [pc, #280]	; (80015a8 <main+0x5b0>)
 8001490:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001494:	4b45      	ldr	r3, [pc, #276]	; (80015ac <main+0x5b4>)
 8001496:	cb18      	ldmia	r3, {r3, r4}
 8001498:	461a      	mov	r2, r3
 800149a:	4623      	mov	r3, r4
 800149c:	f7fe fe64 	bl	8000168 <__aeabi_dsub>
 80014a0:	4603      	mov	r3, r0
 80014a2:	460c      	mov	r4, r1
 80014a4:	4618      	mov	r0, r3
 80014a6:	4621      	mov	r1, r4
 80014a8:	a333      	add	r3, pc, #204	; (adr r3, 8001578 <main+0x580>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7ff f93d 	bl	800072c <__aeabi_ddiv>
 80014b2:	4603      	mov	r3, r0
 80014b4:	460c      	mov	r4, r1
 80014b6:	4a44      	ldr	r2, [pc, #272]	; (80015c8 <main+0x5d0>)
 80014b8:	e9c2 3400 	strd	r3, r4, [r2]
	voltageVRMS = (voltageVMAX - voltageVMIN) / (2 * sqrt(2));
 80014bc:	4b3f      	ldr	r3, [pc, #252]	; (80015bc <main+0x5c4>)
 80014be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014c2:	4b3f      	ldr	r3, [pc, #252]	; (80015c0 <main+0x5c8>)
 80014c4:	cb18      	ldmia	r3, {r3, r4}
 80014c6:	461a      	mov	r2, r3
 80014c8:	4623      	mov	r3, r4
 80014ca:	f7fe fe4d 	bl	8000168 <__aeabi_dsub>
 80014ce:	4603      	mov	r3, r0
 80014d0:	460c      	mov	r4, r1
 80014d2:	4618      	mov	r0, r3
 80014d4:	4621      	mov	r1, r4
 80014d6:	a328      	add	r3, pc, #160	; (adr r3, 8001578 <main+0x580>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7ff f926 	bl	800072c <__aeabi_ddiv>
 80014e0:	4603      	mov	r3, r0
 80014e2:	460c      	mov	r4, r1
 80014e4:	4a39      	ldr	r2, [pc, #228]	; (80015cc <main+0x5d4>)
 80014e6:	e9c2 3400 	strd	r3, r4, [r2]

	currentOutput = previousCurrentOutput + 0.97 * ((currentVRMS * 3.94)-previousCurrentOutput);      //currentVRMS * (4.020);
 80014ea:	4b37      	ldr	r3, [pc, #220]	; (80015c8 <main+0x5d0>)
 80014ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f0:	a323      	add	r3, pc, #140	; (adr r3, 8001580 <main+0x588>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7fe ffef 	bl	80004d8 <__aeabi_dmul>
 80014fa:	4603      	mov	r3, r0
 80014fc:	460c      	mov	r4, r1
 80014fe:	4618      	mov	r0, r3
 8001500:	4621      	mov	r1, r4
 8001502:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <main+0x5d8>)
 8001504:	cb18      	ldmia	r3, {r3, r4}
 8001506:	461a      	mov	r2, r3
 8001508:	4623      	mov	r3, r4
 800150a:	f7fe fe2d 	bl	8000168 <__aeabi_dsub>
 800150e:	4603      	mov	r3, r0
 8001510:	460c      	mov	r4, r1
 8001512:	4618      	mov	r0, r3
 8001514:	4621      	mov	r1, r4
 8001516:	a31c      	add	r3, pc, #112	; (adr r3, 8001588 <main+0x590>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7fe ffdc 	bl	80004d8 <__aeabi_dmul>
 8001520:	4603      	mov	r3, r0
 8001522:	460c      	mov	r4, r1
 8001524:	4618      	mov	r0, r3
 8001526:	4621      	mov	r1, r4
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <main+0x5d8>)
 800152a:	cb18      	ldmia	r3, {r3, r4}
 800152c:	461a      	mov	r2, r3
 800152e:	4623      	mov	r3, r4
 8001530:	f7fe fe1c 	bl	800016c <__adddf3>
 8001534:	4603      	mov	r3, r0
 8001536:	460c      	mov	r4, r1
 8001538:	4a26      	ldr	r2, [pc, #152]	; (80015d4 <main+0x5dc>)
 800153a:	e9c2 3400 	strd	r3, r4, [r2]
	voltageOutput = previousVoltageOutput + 0.97 * ((voltageVRMS * 668.420)-previousVoltageOutput);
 800153e:	4b23      	ldr	r3, [pc, #140]	; (80015cc <main+0x5d4>)
 8001540:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001544:	a312      	add	r3, pc, #72	; (adr r3, 8001590 <main+0x598>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	f7fe ffc5 	bl	80004d8 <__aeabi_dmul>
 800154e:	4603      	mov	r3, r0
 8001550:	460c      	mov	r4, r1
 8001552:	4618      	mov	r0, r3
 8001554:	4621      	mov	r1, r4
 8001556:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <main+0x5e0>)
 8001558:	cb18      	ldmia	r3, {r3, r4}
 800155a:	461a      	mov	r2, r3
 800155c:	4623      	mov	r3, r4
 800155e:	f7fe fe03 	bl	8000168 <__aeabi_dsub>
 8001562:	4603      	mov	r3, r0
 8001564:	460c      	mov	r4, r1
 8001566:	4618      	mov	r0, r3
 8001568:	4621      	mov	r1, r4
 800156a:	e037      	b.n	80015dc <main+0x5e4>
 800156c:	f3af 8000 	nop.w
 8001570:	66666666 	.word	0x66666666
 8001574:	400a6666 	.word	0x400a6666
 8001578:	667f3bcd 	.word	0x667f3bcd
 800157c:	4006a09e 	.word	0x4006a09e
 8001580:	b851eb85 	.word	0xb851eb85
 8001584:	400f851e 	.word	0x400f851e
 8001588:	70a3d70a 	.word	0x70a3d70a
 800158c:	3fef0a3d 	.word	0x3fef0a3d
 8001590:	28f5c28f 	.word	0x28f5c28f
 8001594:	4084e35c 	.word	0x4084e35c
 8001598:	2000038c 	.word	0x2000038c
 800159c:	200006fc 	.word	0x200006fc
 80015a0:	40b00000 	.word	0x40b00000
 80015a4:	200003f8 	.word	0x200003f8
 80015a8:	200003f0 	.word	0x200003f0
 80015ac:	20000708 	.word	0x20000708
 80015b0:	20000234 	.word	0x20000234
 80015b4:	20000230 	.word	0x20000230
 80015b8:	20000448 	.word	0x20000448
 80015bc:	200003c0 	.word	0x200003c0
 80015c0:	20000700 	.word	0x20000700
 80015c4:	200003c8 	.word	0x200003c8
 80015c8:	20000548 	.word	0x20000548
 80015cc:	20000570 	.word	0x20000570
 80015d0:	20000210 	.word	0x20000210
 80015d4:	20000550 	.word	0x20000550
 80015d8:	20000208 	.word	0x20000208
 80015dc:	a358      	add	r3, pc, #352	; (adr r3, 8001740 <main+0x748>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	f7fe ff79 	bl	80004d8 <__aeabi_dmul>
 80015e6:	4603      	mov	r3, r0
 80015e8:	460c      	mov	r4, r1
 80015ea:	4618      	mov	r0, r3
 80015ec:	4621      	mov	r1, r4
 80015ee:	4b56      	ldr	r3, [pc, #344]	; (8001748 <main+0x750>)
 80015f0:	cb18      	ldmia	r3, {r3, r4}
 80015f2:	461a      	mov	r2, r3
 80015f4:	4623      	mov	r3, r4
 80015f6:	f7fe fdb9 	bl	800016c <__adddf3>
 80015fa:	4603      	mov	r3, r0
 80015fc:	460c      	mov	r4, r1
 80015fe:	4a53      	ldr	r2, [pc, #332]	; (800174c <main+0x754>)
 8001600:	e9c2 3400 	strd	r3, r4, [r2]
	powerOutput = previousPowerOutput + 0.97 * ((voltageOutput * currentOutput)-previousPowerOutput);
 8001604:	4b51      	ldr	r3, [pc, #324]	; (800174c <main+0x754>)
 8001606:	e9d3 0100 	ldrd	r0, r1, [r3]
 800160a:	4b51      	ldr	r3, [pc, #324]	; (8001750 <main+0x758>)
 800160c:	cb18      	ldmia	r3, {r3, r4}
 800160e:	461a      	mov	r2, r3
 8001610:	4623      	mov	r3, r4
 8001612:	f7fe ff61 	bl	80004d8 <__aeabi_dmul>
 8001616:	4603      	mov	r3, r0
 8001618:	460c      	mov	r4, r1
 800161a:	4618      	mov	r0, r3
 800161c:	4621      	mov	r1, r4
 800161e:	4b4d      	ldr	r3, [pc, #308]	; (8001754 <main+0x75c>)
 8001620:	cb18      	ldmia	r3, {r3, r4}
 8001622:	461a      	mov	r2, r3
 8001624:	4623      	mov	r3, r4
 8001626:	f7fe fd9f 	bl	8000168 <__aeabi_dsub>
 800162a:	4603      	mov	r3, r0
 800162c:	460c      	mov	r4, r1
 800162e:	4618      	mov	r0, r3
 8001630:	4621      	mov	r1, r4
 8001632:	a343      	add	r3, pc, #268	; (adr r3, 8001740 <main+0x748>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f7fe ff4e 	bl	80004d8 <__aeabi_dmul>
 800163c:	4603      	mov	r3, r0
 800163e:	460c      	mov	r4, r1
 8001640:	4618      	mov	r0, r3
 8001642:	4621      	mov	r1, r4
 8001644:	4b43      	ldr	r3, [pc, #268]	; (8001754 <main+0x75c>)
 8001646:	cb18      	ldmia	r3, {r3, r4}
 8001648:	461a      	mov	r2, r3
 800164a:	4623      	mov	r3, r4
 800164c:	f7fe fd8e 	bl	800016c <__adddf3>
 8001650:	4603      	mov	r3, r0
 8001652:	460c      	mov	r4, r1
 8001654:	4a40      	ldr	r2, [pc, #256]	; (8001758 <main+0x760>)
 8001656:	e9c2 3400 	strd	r3, r4, [r2]

	previousVoltageOutput = voltageOutput;
 800165a:	4b3c      	ldr	r3, [pc, #240]	; (800174c <main+0x754>)
 800165c:	cb18      	ldmia	r3, {r3, r4}
 800165e:	4a3a      	ldr	r2, [pc, #232]	; (8001748 <main+0x750>)
 8001660:	e9c2 3400 	strd	r3, r4, [r2]
	previousCurrentOutput = currentOutput;
 8001664:	4b3a      	ldr	r3, [pc, #232]	; (8001750 <main+0x758>)
 8001666:	cb18      	ldmia	r3, {r3, r4}
 8001668:	4a3c      	ldr	r2, [pc, #240]	; (800175c <main+0x764>)
 800166a:	e9c2 3400 	strd	r3, r4, [r2]
	previousPowerOutput = powerOutput;
 800166e:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <main+0x760>)
 8001670:	cb18      	ldmia	r3, {r3, r4}
 8001672:	4a38      	ldr	r2, [pc, #224]	; (8001754 <main+0x75c>)
 8001674:	e9c2 3400 	strd	r3, r4, [r2]

	currentOutputMilis = currentOutput * 1000;
 8001678:	4b35      	ldr	r3, [pc, #212]	; (8001750 <main+0x758>)
 800167a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	4b37      	ldr	r3, [pc, #220]	; (8001760 <main+0x768>)
 8001684:	f7fe ff28 	bl	80004d8 <__aeabi_dmul>
 8001688:	4603      	mov	r3, r0
 800168a:	460c      	mov	r4, r1
 800168c:	4a35      	ldr	r2, [pc, #212]	; (8001764 <main+0x76c>)
 800168e:	e9c2 3400 	strd	r3, r4, [r2]

	snprintf(volString, 50, "%1f", voltageOutput);
 8001692:	4b2e      	ldr	r3, [pc, #184]	; (800174c <main+0x754>)
 8001694:	cb18      	ldmia	r3, {r3, r4}
 8001696:	e9cd 3400 	strd	r3, r4, [sp]
 800169a:	4a33      	ldr	r2, [pc, #204]	; (8001768 <main+0x770>)
 800169c:	2132      	movs	r1, #50	; 0x32
 800169e:	4833      	ldr	r0, [pc, #204]	; (800176c <main+0x774>)
 80016a0:	f003 f89c 	bl	80047dc <sniprintf>
	sprintf(temString, "Tensao:%sV", volString);
 80016a4:	4a31      	ldr	r2, [pc, #196]	; (800176c <main+0x774>)
 80016a6:	4932      	ldr	r1, [pc, #200]	; (8001770 <main+0x778>)
 80016a8:	4832      	ldr	r0, [pc, #200]	; (8001774 <main+0x77c>)
 80016aa:	f003 f8cb 	bl	8004844 <siprintf>
	ST7789_WriteString(0, 129, temString, Font_11x18, WHITE, BLACK);
 80016ae:	4b32      	ldr	r3, [pc, #200]	; (8001778 <main+0x780>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	9202      	str	r2, [sp, #8]
 80016b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b8:	9201      	str	r2, [sp, #4]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	9200      	str	r2, [sp, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a2c      	ldr	r2, [pc, #176]	; (8001774 <main+0x77c>)
 80016c2:	2181      	movs	r1, #129	; 0x81
 80016c4:	2000      	movs	r0, #0
 80016c6:	f7ff fc45 	bl	8000f54 <ST7789_WriteString>

	snprintf(curString, 50, "%1f", currentOutputMilis);
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <main+0x76c>)
 80016cc:	cb18      	ldmia	r3, {r3, r4}
 80016ce:	e9cd 3400 	strd	r3, r4, [sp]
 80016d2:	4a25      	ldr	r2, [pc, #148]	; (8001768 <main+0x770>)
 80016d4:	2132      	movs	r1, #50	; 0x32
 80016d6:	4829      	ldr	r0, [pc, #164]	; (800177c <main+0x784>)
 80016d8:	f003 f880 	bl	80047dc <sniprintf>
	sprintf(temString, "Corrente:%smA", curString);
 80016dc:	4a27      	ldr	r2, [pc, #156]	; (800177c <main+0x784>)
 80016de:	4928      	ldr	r1, [pc, #160]	; (8001780 <main+0x788>)
 80016e0:	4824      	ldr	r0, [pc, #144]	; (8001774 <main+0x77c>)
 80016e2:	f003 f8af 	bl	8004844 <siprintf>
	ST7789_WriteString(0, 111, temString, Font_11x18, WHITE, BLACK);
 80016e6:	4b24      	ldr	r3, [pc, #144]	; (8001778 <main+0x780>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	9202      	str	r2, [sp, #8]
 80016ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016f0:	9201      	str	r2, [sp, #4]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	9200      	str	r2, [sp, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <main+0x77c>)
 80016fa:	216f      	movs	r1, #111	; 0x6f
 80016fc:	2000      	movs	r0, #0
 80016fe:	f7ff fc29 	bl	8000f54 <ST7789_WriteString>

	snprintf(powString, 50, "%1f", powerOutput);
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <main+0x760>)
 8001704:	cb18      	ldmia	r3, {r3, r4}
 8001706:	e9cd 3400 	strd	r3, r4, [sp]
 800170a:	4a17      	ldr	r2, [pc, #92]	; (8001768 <main+0x770>)
 800170c:	2132      	movs	r1, #50	; 0x32
 800170e:	481d      	ldr	r0, [pc, #116]	; (8001784 <main+0x78c>)
 8001710:	f003 f864 	bl	80047dc <sniprintf>
	sprintf(temString, "Potencia:%sW", powString);
 8001714:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <main+0x78c>)
 8001716:	491c      	ldr	r1, [pc, #112]	; (8001788 <main+0x790>)
 8001718:	4816      	ldr	r0, [pc, #88]	; (8001774 <main+0x77c>)
 800171a:	f003 f893 	bl	8004844 <siprintf>
	ST7789_WriteString(0, 93, temString, Font_11x18, WHITE, BLACK);
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <main+0x780>)
 8001720:	2200      	movs	r2, #0
 8001722:	9202      	str	r2, [sp, #8]
 8001724:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001728:	9201      	str	r2, [sp, #4]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	9200      	str	r2, [sp, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a10      	ldr	r2, [pc, #64]	; (8001774 <main+0x77c>)
 8001732:	215d      	movs	r1, #93	; 0x5d
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff fc0d 	bl	8000f54 <ST7789_WriteString>

	Communicate();
 800173a:	f000 f9bd 	bl	8001ab8 <Communicate>
  {
 800173e:	e588      	b.n	8001252 <main+0x25a>
 8001740:	70a3d70a 	.word	0x70a3d70a
 8001744:	3fef0a3d 	.word	0x3fef0a3d
 8001748:	20000208 	.word	0x20000208
 800174c:	20000360 	.word	0x20000360
 8001750:	20000550 	.word	0x20000550
 8001754:	20000218 	.word	0x20000218
 8001758:	20000458 	.word	0x20000458
 800175c:	20000210 	.word	0x20000210
 8001760:	408f4000 	.word	0x408f4000
 8001764:	20000450 	.word	0x20000450
 8001768:	08006354 	.word	0x08006354
 800176c:	200003cc 	.word	0x200003cc
 8001770:	08006358 	.word	0x08006358
 8001774:	20000710 	.word	0x20000710
 8001778:	20000000 	.word	0x20000000
 800177c:	20000460 	.word	0x20000460
 8001780:	08006364 	.word	0x08006364
 8001784:	2000036c 	.word	0x2000036c
 8001788:	08006374 	.word	0x08006374

0800178c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b094      	sub	sp, #80	; 0x50
 8001790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001796:	2228      	movs	r2, #40	; 0x28
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f002 fbc7 	bl	8003f2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017bc:	2302      	movs	r3, #2
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c0:	2301      	movs	r3, #1
 80017c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017c4:	2310      	movs	r3, #16
 80017c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c8:	2302      	movs	r3, #2
 80017ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80017cc:	2300      	movs	r3, #0
 80017ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80017d0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80017d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017da:	4618      	mov	r0, r3
 80017dc:	f001 f9dc 	bl	8002b98 <HAL_RCC_OscConfig>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80017e6:	f000 fa1b 	bl	8001c20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ea:	230f      	movs	r3, #15
 80017ec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2102      	movs	r1, #2
 8001806:	4618      	mov	r0, r3
 8001808:	f001 fc46 	bl	8003098 <HAL_RCC_ClockConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001812:	f000 fa05 	bl	8001c20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001816:	2302      	movs	r3, #2
 8001818:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800181a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800181e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	4618      	mov	r0, r3
 8001824:	f001 fdd4 	bl	80033d0 <HAL_RCCEx_PeriphCLKConfig>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800182e:	f000 f9f7 	bl	8001c20 <Error_Handler>
  }
}
 8001832:	bf00      	nop
 8001834:	3750      	adds	r7, #80	; 0x50
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800184c:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <MX_ADC1_Init+0x74>)
 800184e:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <MX_ADC1_Init+0x78>)
 8001850:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001852:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <MX_ADC1_Init+0x74>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001858:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <MX_ADC1_Init+0x74>)
 800185a:	2200      	movs	r2, #0
 800185c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800185e:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <MX_ADC1_Init+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <MX_ADC1_Init+0x74>)
 8001866:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800186a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800186c:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <MX_ADC1_Init+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001872:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <MX_ADC1_Init+0x74>)
 8001874:	2201      	movs	r2, #1
 8001876:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001878:	480d      	ldr	r0, [pc, #52]	; (80018b0 <MX_ADC1_Init+0x74>)
 800187a:	f000 fc11 	bl	80020a0 <HAL_ADC_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001884:	f000 f9cc 	bl	8001c20 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001888:	2300      	movs	r3, #0
 800188a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800188c:	2301      	movs	r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_ADC1_Init+0x74>)
 800189a:	f000 fd93 	bl	80023c4 <HAL_ADC_ConfigChannel>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80018a4:	f000 f9bc 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	2000038c 	.word	0x2000038c
 80018b4:	40012400 	.word	0x40012400

080018b8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <MX_ADC2_Init+0x74>)
 80018ca:	4a19      	ldr	r2, [pc, #100]	; (8001930 <MX_ADC2_Init+0x78>)
 80018cc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <MX_ADC2_Init+0x74>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <MX_ADC2_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <MX_ADC2_Init+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <MX_ADC2_Init+0x74>)
 80018e2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80018e6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018e8:	4b10      	ldr	r3, [pc, #64]	; (800192c <MX_ADC2_Init+0x74>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <MX_ADC2_Init+0x74>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018f4:	480d      	ldr	r0, [pc, #52]	; (800192c <MX_ADC2_Init+0x74>)
 80018f6:	f000 fbd3 	bl	80020a0 <HAL_ADC_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001900:	f000 f98e 	bl	8001c20 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001904:	2301      	movs	r3, #1
 8001906:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001908:	2301      	movs	r3, #1
 800190a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	4619      	mov	r1, r3
 8001914:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_ADC2_Init+0x74>)
 8001916:	f000 fd55 	bl	80023c4 <HAL_ADC_ConfigChannel>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001920:	f000 f97e 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000234 	.word	0x20000234
 8001930:	40012800 	.word	0x40012800

08001934 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001938:	4b17      	ldr	r3, [pc, #92]	; (8001998 <MX_SPI1_Init+0x64>)
 800193a:	4a18      	ldr	r2, [pc, #96]	; (800199c <MX_SPI1_Init+0x68>)
 800193c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <MX_SPI1_Init+0x64>)
 8001940:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001944:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <MX_SPI1_Init+0x64>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <MX_SPI1_Init+0x64>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_SPI1_Init+0x64>)
 8001954:	2202      	movs	r2, #2
 8001956:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_SPI1_Init+0x64>)
 800195a:	2200      	movs	r2, #0
 800195c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_SPI1_Init+0x64>)
 8001960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001964:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_SPI1_Init+0x64>)
 8001968:	2208      	movs	r2, #8
 800196a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <MX_SPI1_Init+0x64>)
 800196e:	2200      	movs	r2, #0
 8001970:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_SPI1_Init+0x64>)
 8001974:	2200      	movs	r2, #0
 8001976:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <MX_SPI1_Init+0x64>)
 800197a:	2200      	movs	r2, #0
 800197c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_SPI1_Init+0x64>)
 8001980:	220a      	movs	r2, #10
 8001982:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001984:	4804      	ldr	r0, [pc, #16]	; (8001998 <MX_SPI1_Init+0x64>)
 8001986:	f001 fdd9 	bl	800353c <HAL_SPI_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001990:	f000 f946 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000578 	.word	0x20000578
 800199c:	40013000 	.word	0x40013000

080019a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <MX_USART1_UART_Init+0x4c>)
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <MX_USART1_UART_Init+0x50>)
 80019a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <MX_USART1_UART_Init+0x4c>)
 80019ac:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80019b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <MX_USART1_UART_Init+0x4c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <MX_USART1_UART_Init+0x4c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <MX_USART1_UART_Init+0x4c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <MX_USART1_UART_Init+0x4c>)
 80019c6:	220c      	movs	r2, #12
 80019c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <MX_USART1_UART_Init+0x4c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <MX_USART1_UART_Init+0x4c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019d6:	4805      	ldr	r0, [pc, #20]	; (80019ec <MX_USART1_UART_Init+0x4c>)
 80019d8:	f002 f816 	bl	8003a08 <HAL_UART_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019e2:	f000 f91d 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000400 	.word	0x20000400
 80019f0:	40013800 	.word	0x40013800

080019f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fa:	f107 0308 	add.w	r3, r7, #8
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <MX_GPIO_Init+0xb8>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	4a27      	ldr	r2, [pc, #156]	; (8001aac <MX_GPIO_Init+0xb8>)
 8001a0e:	f043 0304 	orr.w	r3, r3, #4
 8001a12:	6193      	str	r3, [r2, #24]
 8001a14:	4b25      	ldr	r3, [pc, #148]	; (8001aac <MX_GPIO_Init+0xb8>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a20:	4b22      	ldr	r3, [pc, #136]	; (8001aac <MX_GPIO_Init+0xb8>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	4a21      	ldr	r2, [pc, #132]	; (8001aac <MX_GPIO_Init+0xb8>)
 8001a26:	f043 0308 	orr.w	r3, r3, #8
 8001a2a:	6193      	str	r3, [r2, #24]
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <MX_GPIO_Init+0xb8>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7789_CS_Pin|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f641 1110 	movw	r1, #6416	; 0x1910
 8001a3e:	481c      	ldr	r0, [pc, #112]	; (8001ab0 <MX_GPIO_Init+0xbc>)
 8001a40:	f001 f892 	bl	8002b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7789_DC_Pin|ST7789_RST_Pin|GPIO_PIN_3, GPIO_PIN_RESET);
 8001a44:	2200      	movs	r2, #0
 8001a46:	210b      	movs	r1, #11
 8001a48:	481a      	ldr	r0, [pc, #104]	; (8001ab4 <MX_GPIO_Init+0xc0>)
 8001a4a:	f001 f88d 	bl	8002b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST7789_CS_Pin PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = ST7789_CS_Pin|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001a4e:	f641 1310 	movw	r3, #6416	; 0x1910
 8001a52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a60:	f107 0308 	add.w	r3, r7, #8
 8001a64:	4619      	mov	r1, r3
 8001a66:	4812      	ldr	r0, [pc, #72]	; (8001ab0 <MX_GPIO_Init+0xbc>)
 8001a68:	f000 ff24 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7789_DC_Pin ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_RST_Pin;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a70:	2301      	movs	r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7c:	f107 0308 	add.w	r3, r7, #8
 8001a80:	4619      	mov	r1, r3
 8001a82:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <MX_GPIO_Init+0xc0>)
 8001a84:	f000 ff16 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a88:	2308      	movs	r3, #8
 8001a8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a90:	2302      	movs	r3, #2
 8001a92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2302      	movs	r3, #2
 8001a96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a98:	f107 0308 	add.w	r3, r7, #8
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <MX_GPIO_Init+0xc0>)
 8001aa0:	f000 ff08 	bl	80028b4 <HAL_GPIO_Init>

}
 8001aa4:	bf00      	nop
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40010800 	.word	0x40010800
 8001ab4:	40010c00 	.word	0x40010c00

08001ab8 <Communicate>:

/* USER CODE BEGIN 4 */
void Communicate() {
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af02      	add	r7, sp, #8

	char *token;
	char *lastToken = NULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
	char *secondLastToken = NULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]

	sprintf(TxData, "AT+CIPSEND\r\n");
 8001ac6:	4a4b      	ldr	r2, [pc, #300]	; (8001bf4 <Communicate+0x13c>)
 8001ac8:	4b4b      	ldr	r3, [pc, #300]	; (8001bf8 <Communicate+0x140>)
 8001aca:	4614      	mov	r4, r2
 8001acc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001ace:	6020      	str	r0, [r4, #0]
 8001ad0:	6061      	str	r1, [r4, #4]
 8001ad2:	60a2      	str	r2, [r4, #8]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	7323      	strb	r3, [r4, #12]
	       HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001ad8:	4846      	ldr	r0, [pc, #280]	; (8001bf4 <Communicate+0x13c>)
 8001ada:	f7fe fb39 	bl	8000150 <strlen>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae6:	4943      	ldr	r1, [pc, #268]	; (8001bf4 <Communicate+0x13c>)
 8001ae8:	4844      	ldr	r0, [pc, #272]	; (8001bfc <Communicate+0x144>)
 8001aea:	f001 ffda 	bl	8003aa2 <HAL_UART_Transmit>
	       HAL_Delay(700);
 8001aee:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001af2:	f000 fab3 	bl	800205c <HAL_Delay>

	sprintf(TxData, "POST /api/v1.6/devices/"device_tag" HTTP/1.1\r\nHost: industrial.api.ubidots.com\r\nContent-Type: application/json\r\nX-Auth-Token: "ubidots_token"\r\nContent-Length: %d\r\n\r\n{\"voltage\":%s,\"current\":%s,\"power\":%s}\x1A", 32 + strlen(volString) + strlen(curString) + strlen(powString), volString, curString, powString);
 8001af6:	4842      	ldr	r0, [pc, #264]	; (8001c00 <Communicate+0x148>)
 8001af8:	f7fe fb2a 	bl	8000150 <strlen>
 8001afc:	4604      	mov	r4, r0
 8001afe:	4841      	ldr	r0, [pc, #260]	; (8001c04 <Communicate+0x14c>)
 8001b00:	f7fe fb26 	bl	8000150 <strlen>
 8001b04:	4603      	mov	r3, r0
 8001b06:	441c      	add	r4, r3
 8001b08:	483f      	ldr	r0, [pc, #252]	; (8001c08 <Communicate+0x150>)
 8001b0a:	f7fe fb21 	bl	8000150 <strlen>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4423      	add	r3, r4
 8001b12:	f103 0220 	add.w	r2, r3, #32
 8001b16:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <Communicate+0x150>)
 8001b18:	9301      	str	r3, [sp, #4]
 8001b1a:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <Communicate+0x14c>)
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <Communicate+0x148>)
 8001b20:	493a      	ldr	r1, [pc, #232]	; (8001c0c <Communicate+0x154>)
 8001b22:	4834      	ldr	r0, [pc, #208]	; (8001bf4 <Communicate+0x13c>)
 8001b24:	f002 fe8e 	bl	8004844 <siprintf>
	       HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001b28:	4832      	ldr	r0, [pc, #200]	; (8001bf4 <Communicate+0x13c>)
 8001b2a:	f7fe fb11 	bl	8000150 <strlen>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b36:	492f      	ldr	r1, [pc, #188]	; (8001bf4 <Communicate+0x13c>)
 8001b38:	4830      	ldr	r0, [pc, #192]	; (8001bfc <Communicate+0x144>)
 8001b3a:	f001 ffb2 	bl	8003aa2 <HAL_UART_Transmit>
	       HAL_Delay(3700);
 8001b3e:	f640 6074 	movw	r0, #3700	; 0xe74
 8001b42:	f000 fa8b 	bl	800205c <HAL_Delay>

	sprintf(TxData, "AT+CIPSEND\r\n");
 8001b46:	4a2b      	ldr	r2, [pc, #172]	; (8001bf4 <Communicate+0x13c>)
 8001b48:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <Communicate+0x140>)
 8001b4a:	4614      	mov	r4, r2
 8001b4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001b4e:	6020      	str	r0, [r4, #0]
 8001b50:	6061      	str	r1, [r4, #4]
 8001b52:	60a2      	str	r2, [r4, #8]
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	7323      	strb	r3, [r4, #12]
	       HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001b58:	4826      	ldr	r0, [pc, #152]	; (8001bf4 <Communicate+0x13c>)
 8001b5a:	f7fe faf9 	bl	8000150 <strlen>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b66:	4923      	ldr	r1, [pc, #140]	; (8001bf4 <Communicate+0x13c>)
 8001b68:	4824      	ldr	r0, [pc, #144]	; (8001bfc <Communicate+0x144>)
 8001b6a:	f001 ff9a 	bl	8003aa2 <HAL_UART_Transmit>
	       HAL_Delay(700);
 8001b6e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001b72:	f000 fa73 	bl	800205c <HAL_Delay>

	sprintf(TxData, "GET /api/v1.6/devices/"device_tag"/onOff/lv HTTP/1.1\r\nHost: industrial.api.ubidots.com\r\nX-Auth-Token: "ubidots_token"\r\n\r\n\x1A");
 8001b76:	4a1f      	ldr	r2, [pc, #124]	; (8001bf4 <Communicate+0x13c>)
 8001b78:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <Communicate+0x158>)
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	2388      	movs	r3, #136	; 0x88
 8001b80:	461a      	mov	r2, r3
 8001b82:	f002 f9c9 	bl	8003f18 <memcpy>
	       HAL_UART_Transmit(&huart1, (uint8_t*)TxData, strlen(TxData), 1000);
 8001b86:	481b      	ldr	r0, [pc, #108]	; (8001bf4 <Communicate+0x13c>)
 8001b88:	f7fe fae2 	bl	8000150 <strlen>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b94:	4917      	ldr	r1, [pc, #92]	; (8001bf4 <Communicate+0x13c>)
 8001b96:	4819      	ldr	r0, [pc, #100]	; (8001bfc <Communicate+0x144>)
 8001b98:	f001 ff83 	bl	8003aa2 <HAL_UART_Transmit>
	       HAL_Delay(100);
 8001b9c:	2064      	movs	r0, #100	; 0x64
 8001b9e:	f000 fa5d 	bl	800205c <HAL_Delay>

	       HAL_UART_Receive(&huart1, (uint8_t*)RxData, 900, 6500);
 8001ba2:	f641 1364 	movw	r3, #6500	; 0x1964
 8001ba6:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001baa:	491a      	ldr	r1, [pc, #104]	; (8001c14 <Communicate+0x15c>)
 8001bac:	4813      	ldr	r0, [pc, #76]	; (8001bfc <Communicate+0x144>)
 8001bae:	f002 f80a 	bl	8003bc6 <HAL_UART_Receive>

	       token = strtok(RxData, "\r\n");
 8001bb2:	4919      	ldr	r1, [pc, #100]	; (8001c18 <Communicate+0x160>)
 8001bb4:	4817      	ldr	r0, [pc, #92]	; (8001c14 <Communicate+0x15c>)
 8001bb6:	f002 fe65 	bl	8004884 <strtok>
 8001bba:	60f8      	str	r0, [r7, #12]
	           while (token != NULL) {
 8001bbc:	e00c      	b.n	8001bd8 <Communicate+0x120>
	               if (strlen(token) > 0) {
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <Communicate+0x116>
	                   secondLastToken = lastToken;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	607b      	str	r3, [r7, #4]
	                   lastToken = token;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	60bb      	str	r3, [r7, #8]
	               }
	               token = strtok(NULL, "\r\n");
 8001bce:	4912      	ldr	r1, [pc, #72]	; (8001c18 <Communicate+0x160>)
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f002 fe57 	bl	8004884 <strtok>
 8001bd6:	60f8      	str	r0, [r7, #12]
	           while (token != NULL) {
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1ef      	bne.n	8001bbe <Communicate+0x106>
	           }
	           onOff = atoi(secondLastToken);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f002 f96c 	bl	8003ebc <atoi>
 8001be4:	4603      	mov	r3, r0
 8001be6:	b21a      	sxth	r2, r3
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <Communicate+0x164>)
 8001bea:	801a      	strh	r2, [r3, #0]

}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd90      	pop	{r4, r7, pc}
 8001bf4:	20000480 	.word	0x20000480
 8001bf8:	08006384 	.word	0x08006384
 8001bfc:	20000400 	.word	0x20000400
 8001c00:	200003cc 	.word	0x200003cc
 8001c04:	20000460 	.word	0x20000460
 8001c08:	2000036c 	.word	0x2000036c
 8001c0c:	08006394 	.word	0x08006394
 8001c10:	08006470 	.word	0x08006470
 8001c14:	200005d0 	.word	0x200005d0
 8001c18:	080064f8 	.word	0x080064f8
 8001c1c:	20000008 	.word	0x20000008

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c26:	e7fe      	b.n	8001c26 <Error_Handler+0x6>

08001c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_MspInit+0x5c>)
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	4a14      	ldr	r2, [pc, #80]	; (8001c84 <HAL_MspInit+0x5c>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6193      	str	r3, [r2, #24]
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_MspInit+0x5c>)
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_MspInit+0x5c>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	4a0e      	ldr	r2, [pc, #56]	; (8001c84 <HAL_MspInit+0x5c>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c50:	61d3      	str	r3, [r2, #28]
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <HAL_MspInit+0x5c>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_MspInit+0x60>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <HAL_MspInit+0x60>)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40010000 	.word	0x40010000

08001c8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0318 	add.w	r3, r7, #24
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a28      	ldr	r2, [pc, #160]	; (8001d48 <HAL_ADC_MspInit+0xbc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d122      	bne.n	8001cf2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cac:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_ADC_MspInit+0xc0>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	4a26      	ldr	r2, [pc, #152]	; (8001d4c <HAL_ADC_MspInit+0xc0>)
 8001cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cb6:	6193      	str	r3, [r2, #24]
 8001cb8:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <HAL_ADC_MspInit+0xc0>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc4:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <HAL_ADC_MspInit+0xc0>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	4a20      	ldr	r2, [pc, #128]	; (8001d4c <HAL_ADC_MspInit+0xc0>)
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	6193      	str	r3, [r2, #24]
 8001cd0:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <HAL_ADC_MspInit+0xc0>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	f107 0318 	add.w	r3, r7, #24
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4819      	ldr	r0, [pc, #100]	; (8001d50 <HAL_ADC_MspInit+0xc4>)
 8001cec:	f000 fde2 	bl	80028b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001cf0:	e026      	b.n	8001d40 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a17      	ldr	r2, [pc, #92]	; (8001d54 <HAL_ADC_MspInit+0xc8>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d121      	bne.n	8001d40 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001cfc:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <HAL_ADC_MspInit+0xc0>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <HAL_ADC_MspInit+0xc0>)
 8001d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d06:	6193      	str	r3, [r2, #24]
 8001d08:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <HAL_ADC_MspInit+0xc0>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d14:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <HAL_ADC_MspInit+0xc0>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <HAL_ADC_MspInit+0xc0>)
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_ADC_MspInit+0xc0>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d30:	2303      	movs	r3, #3
 8001d32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d34:	f107 0318 	add.w	r3, r7, #24
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <HAL_ADC_MspInit+0xc4>)
 8001d3c:	f000 fdba 	bl	80028b4 <HAL_GPIO_Init>
}
 8001d40:	bf00      	nop
 8001d42:	3728      	adds	r7, #40	; 0x28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40012400 	.word	0x40012400
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010800 	.word	0x40010800
 8001d54:	40012800 	.word	0x40012800

08001d58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a1b      	ldr	r2, [pc, #108]	; (8001de0 <HAL_SPI_MspInit+0x88>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d12f      	bne.n	8001dd8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d78:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <HAL_SPI_MspInit+0x8c>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4a19      	ldr	r2, [pc, #100]	; (8001de4 <HAL_SPI_MspInit+0x8c>)
 8001d7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d82:	6193      	str	r3, [r2, #24]
 8001d84:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <HAL_SPI_MspInit+0x8c>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d90:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <HAL_SPI_MspInit+0x8c>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a13      	ldr	r2, [pc, #76]	; (8001de4 <HAL_SPI_MspInit+0x8c>)
 8001d96:	f043 0304 	orr.w	r3, r3, #4
 8001d9a:	6193      	str	r3, [r2, #24]
 8001d9c:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <HAL_SPI_MspInit+0x8c>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001da8:	23a0      	movs	r3, #160	; 0xa0
 8001daa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db0:	2303      	movs	r3, #3
 8001db2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	4619      	mov	r1, r3
 8001dba:	480b      	ldr	r0, [pc, #44]	; (8001de8 <HAL_SPI_MspInit+0x90>)
 8001dbc:	f000 fd7a 	bl	80028b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dc0:	2340      	movs	r3, #64	; 0x40
 8001dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dcc:	f107 0310 	add.w	r3, r7, #16
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4805      	ldr	r0, [pc, #20]	; (8001de8 <HAL_SPI_MspInit+0x90>)
 8001dd4:	f000 fd6e 	bl	80028b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001dd8:	bf00      	nop
 8001dda:	3720      	adds	r7, #32
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40013000 	.word	0x40013000
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40010800 	.word	0x40010800

08001dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0310 	add.w	r3, r7, #16
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a1c      	ldr	r2, [pc, #112]	; (8001e78 <HAL_UART_MspInit+0x8c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d131      	bne.n	8001e70 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_UART_MspInit+0x90>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	4a1a      	ldr	r2, [pc, #104]	; (8001e7c <HAL_UART_MspInit+0x90>)
 8001e12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e16:	6193      	str	r3, [r2, #24]
 8001e18:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_UART_MspInit+0x90>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e24:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_UART_MspInit+0x90>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	4a14      	ldr	r2, [pc, #80]	; (8001e7c <HAL_UART_MspInit+0x90>)
 8001e2a:	f043 0304 	orr.w	r3, r3, #4
 8001e2e:	6193      	str	r3, [r2, #24]
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_UART_MspInit+0x90>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	f107 0310 	add.w	r3, r7, #16
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480b      	ldr	r0, [pc, #44]	; (8001e80 <HAL_UART_MspInit+0x94>)
 8001e52:	f000 fd2f 	bl	80028b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e64:	f107 0310 	add.w	r3, r7, #16
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4805      	ldr	r0, [pc, #20]	; (8001e80 <HAL_UART_MspInit+0x94>)
 8001e6c:	f000 fd22 	bl	80028b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e70:	bf00      	nop
 8001e72:	3720      	adds	r7, #32
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40013800 	.word	0x40013800
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40010800 	.word	0x40010800

08001e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <NMI_Handler+0x4>

08001e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e8e:	e7fe      	b.n	8001e8e <HardFault_Handler+0x4>

08001e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <MemManage_Handler+0x4>

08001e96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e9a:	e7fe      	b.n	8001e9a <BusFault_Handler+0x4>

08001e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <UsageFault_Handler+0x4>

08001ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr

08001eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eca:	f000 f8ab 	bl	8002024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001edc:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <_sbrk+0x5c>)
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <_sbrk+0x60>)
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <_sbrk+0x64>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d102      	bne.n	8001ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <_sbrk+0x64>)
 8001ef2:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <_sbrk+0x68>)
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <_sbrk+0x64>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d207      	bcs.n	8001f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f04:	f001 ffde 	bl	8003ec4 <__errno>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	230c      	movs	r3, #12
 8001f0c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f12:	e009      	b.n	8001f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <_sbrk+0x64>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <_sbrk+0x64>)
 8001f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f26:	68fb      	ldr	r3, [r7, #12]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20005000 	.word	0x20005000
 8001f34:	00000400 	.word	0x00000400
 8001f38:	20000220 	.word	0x20000220
 8001f3c:	20000738 	.word	0x20000738

08001f40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f4c:	480c      	ldr	r0, [pc, #48]	; (8001f80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f4e:	490d      	ldr	r1, [pc, #52]	; (8001f84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f50:	4a0d      	ldr	r2, [pc, #52]	; (8001f88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f54:	e002      	b.n	8001f5c <LoopCopyDataInit>

08001f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f5a:	3304      	adds	r3, #4

08001f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f60:	d3f9      	bcc.n	8001f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f64:	4c0a      	ldr	r4, [pc, #40]	; (8001f90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f68:	e001      	b.n	8001f6e <LoopFillZerobss>

08001f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f6c:	3204      	adds	r2, #4

08001f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f70:	d3fb      	bcc.n	8001f6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f72:	f7ff ffe5 	bl	8001f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f76:	f001 ffab 	bl	8003ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f7a:	f7ff f83d 	bl	8000ff8 <main>
  bx lr
 8001f7e:	4770      	bx	lr
  ldr r0, =_sdata
 8001f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f84:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001f88:	080074e8 	.word	0x080074e8
  ldr r2, =_sbss
 8001f8c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001f90:	20000738 	.word	0x20000738

08001f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f94:	e7fe      	b.n	8001f94 <ADC1_2_IRQHandler>
	...

08001f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f9c:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <HAL_Init+0x28>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a07      	ldr	r2, [pc, #28]	; (8001fc0 <HAL_Init+0x28>)
 8001fa2:	f043 0310 	orr.w	r3, r3, #16
 8001fa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa8:	2003      	movs	r0, #3
 8001faa:	f000 fc4f 	bl	800284c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f000 f808 	bl	8001fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb4:	f7ff fe38 	bl	8001c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40022000 	.word	0x40022000

08001fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_InitTick+0x54>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_InitTick+0x58>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fc59 	bl	800289a <HAL_SYSTICK_Config>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00e      	b.n	8002010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b0f      	cmp	r3, #15
 8001ff6:	d80a      	bhi.n	800200e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f000 fc2f 	bl	8002862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002004:	4a06      	ldr	r2, [pc, #24]	; (8002020 <HAL_InitTick+0x5c>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e000      	b.n	8002010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	2000000c 	.word	0x2000000c
 800201c:	20000014 	.word	0x20000014
 8002020:	20000010 	.word	0x20000010

08002024 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_IncTick+0x1c>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_IncTick+0x20>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4413      	add	r3, r2
 8002034:	4a03      	ldr	r2, [pc, #12]	; (8002044 <HAL_IncTick+0x20>)
 8002036:	6013      	str	r3, [r2, #0]
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	20000014 	.word	0x20000014
 8002044:	20000730 	.word	0x20000730

08002048 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return uwTick;
 800204c:	4b02      	ldr	r3, [pc, #8]	; (8002058 <HAL_GetTick+0x10>)
 800204e:	681b      	ldr	r3, [r3, #0]
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	20000730 	.word	0x20000730

0800205c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff fff0 	bl	8002048 <HAL_GetTick>
 8002068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d005      	beq.n	8002082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_Delay+0x40>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002082:	bf00      	nop
 8002084:	f7ff ffe0 	bl	8002048 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	429a      	cmp	r2, r3
 8002092:	d8f7      	bhi.n	8002084 <HAL_Delay+0x28>
  {
  }
}
 8002094:	bf00      	nop
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000014 	.word	0x20000014

080020a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0be      	b.n	8002240 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d109      	bne.n	80020e4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff fdd4 	bl	8001c8c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 fabf 	bl	8002668 <ADC_ConversionStop_Disable>
 80020ea:	4603      	mov	r3, r0
 80020ec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f040 8099 	bne.w	800222e <HAL_ADC_Init+0x18e>
 80020fc:	7dfb      	ldrb	r3, [r7, #23]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f040 8095 	bne.w	800222e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800210c:	f023 0302 	bic.w	r3, r3, #2
 8002110:	f043 0202 	orr.w	r2, r3, #2
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002120:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	7b1b      	ldrb	r3, [r3, #12]
 8002126:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002128:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	4313      	orrs	r3, r2
 800212e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002138:	d003      	beq.n	8002142 <HAL_ADC_Init+0xa2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d102      	bne.n	8002148 <HAL_ADC_Init+0xa8>
 8002142:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002146:	e000      	b.n	800214a <HAL_ADC_Init+0xaa>
 8002148:	2300      	movs	r3, #0
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	7d1b      	ldrb	r3, [r3, #20]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d119      	bne.n	800218c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7b1b      	ldrb	r3, [r3, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d109      	bne.n	8002174 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	3b01      	subs	r3, #1
 8002166:	035a      	lsls	r2, r3, #13
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	e00b      	b.n	800218c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	f043 0220 	orr.w	r2, r3, #32
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	f043 0201 	orr.w	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	430a      	orrs	r2, r1
 800219e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	4b28      	ldr	r3, [pc, #160]	; (8002248 <HAL_ADC_Init+0x1a8>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	68b9      	ldr	r1, [r7, #8]
 80021b0:	430b      	orrs	r3, r1
 80021b2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021bc:	d003      	beq.n	80021c6 <HAL_ADC_Init+0x126>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d104      	bne.n	80021d0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	051b      	lsls	r3, r3, #20
 80021ce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	4b18      	ldr	r3, [pc, #96]	; (800224c <HAL_ADC_Init+0x1ac>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d10b      	bne.n	800220c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	f023 0303 	bic.w	r3, r3, #3
 8002202:	f043 0201 	orr.w	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800220a:	e018      	b.n	800223e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	f023 0312 	bic.w	r3, r3, #18
 8002214:	f043 0210 	orr.w	r2, r3, #16
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	f043 0201 	orr.w	r2, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800222c:	e007      	b.n	800223e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	f043 0210 	orr.w	r2, r3, #16
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800223e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	ffe1f7fd 	.word	0xffe1f7fd
 800224c:	ff1f0efe 	.word	0xff1f0efe

08002250 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_ADC_Start+0x1a>
 8002266:	2302      	movs	r3, #2
 8002268:	e098      	b.n	800239c <HAL_ADC_Start+0x14c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f99e 	bl	80025b4 <ADC_Enable>
 8002278:	4603      	mov	r3, r0
 800227a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f040 8087 	bne.w	8002392 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a41      	ldr	r2, [pc, #260]	; (80023a4 <HAL_ADC_Start+0x154>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d105      	bne.n	80022ae <HAL_ADC_Start+0x5e>
 80022a2:	4b41      	ldr	r3, [pc, #260]	; (80023a8 <HAL_ADC_Start+0x158>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d115      	bne.n	80022da <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d026      	beq.n	8002316 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022d8:	e01d      	b.n	8002316 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a2f      	ldr	r2, [pc, #188]	; (80023a8 <HAL_ADC_Start+0x158>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d004      	beq.n	80022fa <HAL_ADC_Start+0xaa>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a2b      	ldr	r2, [pc, #172]	; (80023a4 <HAL_ADC_Start+0x154>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d10d      	bne.n	8002316 <HAL_ADC_Start+0xc6>
 80022fa:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <HAL_ADC_Start+0x158>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800230e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d006      	beq.n	8002330 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	f023 0206 	bic.w	r2, r3, #6
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	62da      	str	r2, [r3, #44]	; 0x2c
 800232e:	e002      	b.n	8002336 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f06f 0202 	mvn.w	r2, #2
 8002346:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002352:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002356:	d113      	bne.n	8002380 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800235c:	4a11      	ldr	r2, [pc, #68]	; (80023a4 <HAL_ADC_Start+0x154>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d105      	bne.n	800236e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002362:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <HAL_ADC_Start+0x158>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800236a:	2b00      	cmp	r3, #0
 800236c:	d108      	bne.n	8002380 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	e00c      	b.n	800239a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	e003      	b.n	800239a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800239a:	7bfb      	ldrb	r3, [r7, #15]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40012800 	.word	0x40012800
 80023a8:	40012400 	.word	0x40012400

080023ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x20>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e0dc      	b.n	800259e <HAL_ADC_ConfigChannel+0x1da>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b06      	cmp	r3, #6
 80023f2:	d81c      	bhi.n	800242e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	3b05      	subs	r3, #5
 8002406:	221f      	movs	r2, #31
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	4019      	ands	r1, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	3b05      	subs	r3, #5
 8002420:	fa00 f203 	lsl.w	r2, r0, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	635a      	str	r2, [r3, #52]	; 0x34
 800242c:	e03c      	b.n	80024a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b0c      	cmp	r3, #12
 8002434:	d81c      	bhi.n	8002470 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	3b23      	subs	r3, #35	; 0x23
 8002448:	221f      	movs	r2, #31
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	4019      	ands	r1, r3
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	3b23      	subs	r3, #35	; 0x23
 8002462:	fa00 f203 	lsl.w	r2, r0, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	631a      	str	r2, [r3, #48]	; 0x30
 800246e:	e01b      	b.n	80024a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	3b41      	subs	r3, #65	; 0x41
 8002482:	221f      	movs	r2, #31
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	4019      	ands	r1, r3
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	3b41      	subs	r3, #65	; 0x41
 800249c:	fa00 f203 	lsl.w	r2, r0, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b09      	cmp	r3, #9
 80024ae:	d91c      	bls.n	80024ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68d9      	ldr	r1, [r3, #12]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	4613      	mov	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4413      	add	r3, r2
 80024c0:	3b1e      	subs	r3, #30
 80024c2:	2207      	movs	r2, #7
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	4019      	ands	r1, r3
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	6898      	ldr	r0, [r3, #8]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	3b1e      	subs	r3, #30
 80024dc:	fa00 f203 	lsl.w	r2, r0, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	60da      	str	r2, [r3, #12]
 80024e8:	e019      	b.n	800251e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6919      	ldr	r1, [r3, #16]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4613      	mov	r3, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4413      	add	r3, r2
 80024fa:	2207      	movs	r2, #7
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	4019      	ands	r1, r3
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	6898      	ldr	r0, [r3, #8]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4613      	mov	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	fa00 f203 	lsl.w	r2, r0, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b10      	cmp	r3, #16
 8002524:	d003      	beq.n	800252e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800252a:	2b11      	cmp	r3, #17
 800252c:	d132      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d125      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d126      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002554:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b10      	cmp	r3, #16
 800255c:	d11a      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800255e:	4b13      	ldr	r3, [pc, #76]	; (80025ac <HAL_ADC_ConfigChannel+0x1e8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a13      	ldr	r2, [pc, #76]	; (80025b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002564:	fba2 2303 	umull	r2, r3, r2, r3
 8002568:	0c9a      	lsrs	r2, r3, #18
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002574:	e002      	b.n	800257c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	3b01      	subs	r3, #1
 800257a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f9      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x1b2>
 8002582:	e007      	b.n	8002594 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	f043 0220 	orr.w	r2, r3, #32
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800259c:	7bfb      	ldrb	r3, [r7, #15]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	40012400 	.word	0x40012400
 80025ac:	2000000c 	.word	0x2000000c
 80025b0:	431bde83 	.word	0x431bde83

080025b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d040      	beq.n	8002654 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0201 	orr.w	r2, r2, #1
 80025e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025e2:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <ADC_Enable+0xac>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a1f      	ldr	r2, [pc, #124]	; (8002664 <ADC_Enable+0xb0>)
 80025e8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ec:	0c9b      	lsrs	r3, r3, #18
 80025ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025f0:	e002      	b.n	80025f8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f9      	bne.n	80025f2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025fe:	f7ff fd23 	bl	8002048 <HAL_GetTick>
 8002602:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002604:	e01f      	b.n	8002646 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002606:	f7ff fd1f 	bl	8002048 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d918      	bls.n	8002646 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b01      	cmp	r3, #1
 8002620:	d011      	beq.n	8002646 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	f043 0210 	orr.w	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	f043 0201 	orr.w	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e007      	b.n	8002656 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b01      	cmp	r3, #1
 8002652:	d1d8      	bne.n	8002606 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	2000000c 	.word	0x2000000c
 8002664:	431bde83 	.word	0x431bde83

08002668 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b01      	cmp	r3, #1
 8002680:	d12e      	bne.n	80026e0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0201 	bic.w	r2, r2, #1
 8002690:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002692:	f7ff fcd9 	bl	8002048 <HAL_GetTick>
 8002696:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002698:	e01b      	b.n	80026d2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800269a:	f7ff fcd5 	bl	8002048 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d914      	bls.n	80026d2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d10d      	bne.n	80026d2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ba:	f043 0210 	orr.w	r2, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	f043 0201 	orr.w	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e007      	b.n	80026e2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d0dc      	beq.n	800269a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002708:	4013      	ands	r3, r2
 800270a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271e:	4a04      	ldr	r2, [pc, #16]	; (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	60d3      	str	r3, [r2, #12]
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <__NVIC_GetPriorityGrouping+0x18>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	f003 0307 	and.w	r3, r3, #7
}
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002760:	2b00      	cmp	r3, #0
 8002762:	db0a      	blt.n	800277a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	490c      	ldr	r1, [pc, #48]	; (800279c <__NVIC_SetPriority+0x4c>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	0112      	lsls	r2, r2, #4
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	440b      	add	r3, r1
 8002774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002778:	e00a      	b.n	8002790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4908      	ldr	r1, [pc, #32]	; (80027a0 <__NVIC_SetPriority+0x50>)
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	3b04      	subs	r3, #4
 8002788:	0112      	lsls	r2, r2, #4
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	440b      	add	r3, r1
 800278e:	761a      	strb	r2, [r3, #24]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000e100 	.word	0xe000e100
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	; 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f1c3 0307 	rsb	r3, r3, #7
 80027be:	2b04      	cmp	r3, #4
 80027c0:	bf28      	it	cs
 80027c2:	2304      	movcs	r3, #4
 80027c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3304      	adds	r3, #4
 80027ca:	2b06      	cmp	r3, #6
 80027cc:	d902      	bls.n	80027d4 <NVIC_EncodePriority+0x30>
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3b03      	subs	r3, #3
 80027d2:	e000      	b.n	80027d6 <NVIC_EncodePriority+0x32>
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d8:	f04f 32ff 	mov.w	r2, #4294967295
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	401a      	ands	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ec:	f04f 31ff 	mov.w	r1, #4294967295
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	43d9      	mvns	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027fc:	4313      	orrs	r3, r2
         );
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3724      	adds	r7, #36	; 0x24
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3b01      	subs	r3, #1
 8002814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002818:	d301      	bcc.n	800281e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800281a:	2301      	movs	r3, #1
 800281c:	e00f      	b.n	800283e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800281e:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <SysTick_Config+0x40>)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3b01      	subs	r3, #1
 8002824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002826:	210f      	movs	r1, #15
 8002828:	f04f 30ff 	mov.w	r0, #4294967295
 800282c:	f7ff ff90 	bl	8002750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <SysTick_Config+0x40>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002836:	4b04      	ldr	r3, [pc, #16]	; (8002848 <SysTick_Config+0x40>)
 8002838:	2207      	movs	r2, #7
 800283a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	e000e010 	.word	0xe000e010

0800284c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff ff49 	bl	80026ec <__NVIC_SetPriorityGrouping>
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002862:	b580      	push	{r7, lr}
 8002864:	b086      	sub	sp, #24
 8002866:	af00      	add	r7, sp, #0
 8002868:	4603      	mov	r3, r0
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002874:	f7ff ff5e 	bl	8002734 <__NVIC_GetPriorityGrouping>
 8002878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	6978      	ldr	r0, [r7, #20]
 8002880:	f7ff ff90 	bl	80027a4 <NVIC_EncodePriority>
 8002884:	4602      	mov	r2, r0
 8002886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff5f 	bl	8002750 <__NVIC_SetPriority>
}
 8002892:	bf00      	nop
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff ffb0 	bl	8002808 <SysTick_Config>
 80028a8:	4603      	mov	r3, r0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b08b      	sub	sp, #44	; 0x2c
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028c2:	2300      	movs	r3, #0
 80028c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028c6:	e127      	b.n	8002b18 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028c8:	2201      	movs	r2, #1
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	f040 8116 	bne.w	8002b12 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b12      	cmp	r3, #18
 80028ec:	d034      	beq.n	8002958 <HAL_GPIO_Init+0xa4>
 80028ee:	2b12      	cmp	r3, #18
 80028f0:	d80d      	bhi.n	800290e <HAL_GPIO_Init+0x5a>
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d02b      	beq.n	800294e <HAL_GPIO_Init+0x9a>
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d804      	bhi.n	8002904 <HAL_GPIO_Init+0x50>
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d031      	beq.n	8002962 <HAL_GPIO_Init+0xae>
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d01c      	beq.n	800293c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002902:	e048      	b.n	8002996 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002904:	2b03      	cmp	r3, #3
 8002906:	d043      	beq.n	8002990 <HAL_GPIO_Init+0xdc>
 8002908:	2b11      	cmp	r3, #17
 800290a:	d01b      	beq.n	8002944 <HAL_GPIO_Init+0x90>
          break;
 800290c:	e043      	b.n	8002996 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800290e:	4a89      	ldr	r2, [pc, #548]	; (8002b34 <HAL_GPIO_Init+0x280>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d026      	beq.n	8002962 <HAL_GPIO_Init+0xae>
 8002914:	4a87      	ldr	r2, [pc, #540]	; (8002b34 <HAL_GPIO_Init+0x280>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d806      	bhi.n	8002928 <HAL_GPIO_Init+0x74>
 800291a:	4a87      	ldr	r2, [pc, #540]	; (8002b38 <HAL_GPIO_Init+0x284>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d020      	beq.n	8002962 <HAL_GPIO_Init+0xae>
 8002920:	4a86      	ldr	r2, [pc, #536]	; (8002b3c <HAL_GPIO_Init+0x288>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01d      	beq.n	8002962 <HAL_GPIO_Init+0xae>
          break;
 8002926:	e036      	b.n	8002996 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002928:	4a85      	ldr	r2, [pc, #532]	; (8002b40 <HAL_GPIO_Init+0x28c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d019      	beq.n	8002962 <HAL_GPIO_Init+0xae>
 800292e:	4a85      	ldr	r2, [pc, #532]	; (8002b44 <HAL_GPIO_Init+0x290>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d016      	beq.n	8002962 <HAL_GPIO_Init+0xae>
 8002934:	4a84      	ldr	r2, [pc, #528]	; (8002b48 <HAL_GPIO_Init+0x294>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <HAL_GPIO_Init+0xae>
          break;
 800293a:	e02c      	b.n	8002996 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	623b      	str	r3, [r7, #32]
          break;
 8002942:	e028      	b.n	8002996 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	3304      	adds	r3, #4
 800294a:	623b      	str	r3, [r7, #32]
          break;
 800294c:	e023      	b.n	8002996 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	3308      	adds	r3, #8
 8002954:	623b      	str	r3, [r7, #32]
          break;
 8002956:	e01e      	b.n	8002996 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	330c      	adds	r3, #12
 800295e:	623b      	str	r3, [r7, #32]
          break;
 8002960:	e019      	b.n	8002996 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d102      	bne.n	8002970 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800296a:	2304      	movs	r3, #4
 800296c:	623b      	str	r3, [r7, #32]
          break;
 800296e:	e012      	b.n	8002996 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d105      	bne.n	8002984 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002978:	2308      	movs	r3, #8
 800297a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	611a      	str	r2, [r3, #16]
          break;
 8002982:	e008      	b.n	8002996 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002984:	2308      	movs	r3, #8
 8002986:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	615a      	str	r2, [r3, #20]
          break;
 800298e:	e002      	b.n	8002996 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002990:	2300      	movs	r3, #0
 8002992:	623b      	str	r3, [r7, #32]
          break;
 8002994:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	2bff      	cmp	r3, #255	; 0xff
 800299a:	d801      	bhi.n	80029a0 <HAL_GPIO_Init+0xec>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	e001      	b.n	80029a4 <HAL_GPIO_Init+0xf0>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3304      	adds	r3, #4
 80029a4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2bff      	cmp	r3, #255	; 0xff
 80029aa:	d802      	bhi.n	80029b2 <HAL_GPIO_Init+0xfe>
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	e002      	b.n	80029b8 <HAL_GPIO_Init+0x104>
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	3b08      	subs	r3, #8
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	210f      	movs	r1, #15
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	401a      	ands	r2, r3
 80029ca:	6a39      	ldr	r1, [r7, #32]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	fa01 f303 	lsl.w	r3, r1, r3
 80029d2:	431a      	orrs	r2, r3
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 8096 	beq.w	8002b12 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029e6:	4b59      	ldr	r3, [pc, #356]	; (8002b4c <HAL_GPIO_Init+0x298>)
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	4a58      	ldr	r2, [pc, #352]	; (8002b4c <HAL_GPIO_Init+0x298>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6193      	str	r3, [r2, #24]
 80029f2:	4b56      	ldr	r3, [pc, #344]	; (8002b4c <HAL_GPIO_Init+0x298>)
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029fe:	4a54      	ldr	r2, [pc, #336]	; (8002b50 <HAL_GPIO_Init+0x29c>)
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	3302      	adds	r3, #2
 8002a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	220f      	movs	r2, #15
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a4b      	ldr	r2, [pc, #300]	; (8002b54 <HAL_GPIO_Init+0x2a0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d013      	beq.n	8002a52 <HAL_GPIO_Init+0x19e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4a      	ldr	r2, [pc, #296]	; (8002b58 <HAL_GPIO_Init+0x2a4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d00d      	beq.n	8002a4e <HAL_GPIO_Init+0x19a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a49      	ldr	r2, [pc, #292]	; (8002b5c <HAL_GPIO_Init+0x2a8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d007      	beq.n	8002a4a <HAL_GPIO_Init+0x196>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a48      	ldr	r2, [pc, #288]	; (8002b60 <HAL_GPIO_Init+0x2ac>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d101      	bne.n	8002a46 <HAL_GPIO_Init+0x192>
 8002a42:	2303      	movs	r3, #3
 8002a44:	e006      	b.n	8002a54 <HAL_GPIO_Init+0x1a0>
 8002a46:	2304      	movs	r3, #4
 8002a48:	e004      	b.n	8002a54 <HAL_GPIO_Init+0x1a0>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e002      	b.n	8002a54 <HAL_GPIO_Init+0x1a0>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <HAL_GPIO_Init+0x1a0>
 8002a52:	2300      	movs	r3, #0
 8002a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a56:	f002 0203 	and.w	r2, r2, #3
 8002a5a:	0092      	lsls	r2, r2, #2
 8002a5c:	4093      	lsls	r3, r2
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a64:	493a      	ldr	r1, [pc, #232]	; (8002b50 <HAL_GPIO_Init+0x29c>)
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	089b      	lsrs	r3, r3, #2
 8002a6a:	3302      	adds	r3, #2
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d006      	beq.n	8002a8c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a7e:	4b39      	ldr	r3, [pc, #228]	; (8002b64 <HAL_GPIO_Init+0x2b0>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	4938      	ldr	r1, [pc, #224]	; (8002b64 <HAL_GPIO_Init+0x2b0>)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]
 8002a8a:	e006      	b.n	8002a9a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a8c:	4b35      	ldr	r3, [pc, #212]	; (8002b64 <HAL_GPIO_Init+0x2b0>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	4933      	ldr	r1, [pc, #204]	; (8002b64 <HAL_GPIO_Init+0x2b0>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d006      	beq.n	8002ab4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002aa6:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <HAL_GPIO_Init+0x2b0>)
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	492e      	ldr	r1, [pc, #184]	; (8002b64 <HAL_GPIO_Init+0x2b0>)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
 8002ab2:	e006      	b.n	8002ac2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ab4:	4b2b      	ldr	r3, [pc, #172]	; (8002b64 <HAL_GPIO_Init+0x2b0>)
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	4929      	ldr	r1, [pc, #164]	; (8002b64 <HAL_GPIO_Init+0x2b0>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d006      	beq.n	8002adc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ace:	4b25      	ldr	r3, [pc, #148]	; (8002b64 <HAL_GPIO_Init+0x2b0>)
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	4924      	ldr	r1, [pc, #144]	; (8002b64 <HAL_GPIO_Init+0x2b0>)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
 8002ada:	e006      	b.n	8002aea <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002adc:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <HAL_GPIO_Init+0x2b0>)
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	491f      	ldr	r1, [pc, #124]	; (8002b64 <HAL_GPIO_Init+0x2b0>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d006      	beq.n	8002b04 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002af6:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <HAL_GPIO_Init+0x2b0>)
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	491a      	ldr	r1, [pc, #104]	; (8002b64 <HAL_GPIO_Init+0x2b0>)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60cb      	str	r3, [r1, #12]
 8002b02:	e006      	b.n	8002b12 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b04:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <HAL_GPIO_Init+0x2b0>)
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	4915      	ldr	r1, [pc, #84]	; (8002b64 <HAL_GPIO_Init+0x2b0>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	3301      	adds	r3, #1
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f47f aed0 	bne.w	80028c8 <HAL_GPIO_Init+0x14>
  }
}
 8002b28:	bf00      	nop
 8002b2a:	372c      	adds	r7, #44	; 0x2c
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	10210000 	.word	0x10210000
 8002b38:	10110000 	.word	0x10110000
 8002b3c:	10120000 	.word	0x10120000
 8002b40:	10310000 	.word	0x10310000
 8002b44:	10320000 	.word	0x10320000
 8002b48:	10220000 	.word	0x10220000
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40010800 	.word	0x40010800
 8002b58:	40010c00 	.word	0x40010c00
 8002b5c:	40011000 	.word	0x40011000
 8002b60:	40011400 	.word	0x40011400
 8002b64:	40010400 	.word	0x40010400

08002b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	807b      	strh	r3, [r7, #2]
 8002b74:	4613      	mov	r3, r2
 8002b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b78:	787b      	ldrb	r3, [r7, #1]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b84:	e003      	b.n	8002b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b86:	887b      	ldrh	r3, [r7, #2]
 8002b88:	041a      	lsls	r2, r3, #16
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	611a      	str	r2, [r3, #16]
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e26c      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 8087 	beq.w	8002cc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bb8:	4b92      	ldr	r3, [pc, #584]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d00c      	beq.n	8002bde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bc4:	4b8f      	ldr	r3, [pc, #572]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 030c 	and.w	r3, r3, #12
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d112      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x5e>
 8002bd0:	4b8c      	ldr	r3, [pc, #560]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bdc:	d10b      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bde:	4b89      	ldr	r3, [pc, #548]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d06c      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x12c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d168      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e246      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCC_OscConfig+0x76>
 8002c00:	4b80      	ldr	r3, [pc, #512]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a7f      	ldr	r2, [pc, #508]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	e02e      	b.n	8002c6c <HAL_RCC_OscConfig+0xd4>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x98>
 8002c16:	4b7b      	ldr	r3, [pc, #492]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a7a      	ldr	r2, [pc, #488]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b78      	ldr	r3, [pc, #480]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a77      	ldr	r2, [pc, #476]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e01d      	b.n	8002c6c <HAL_RCC_OscConfig+0xd4>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0xbc>
 8002c3a:	4b72      	ldr	r3, [pc, #456]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a71      	ldr	r2, [pc, #452]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b6f      	ldr	r3, [pc, #444]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a6e      	ldr	r2, [pc, #440]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e00b      	b.n	8002c6c <HAL_RCC_OscConfig+0xd4>
 8002c54:	4b6b      	ldr	r3, [pc, #428]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a6a      	ldr	r2, [pc, #424]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	4b68      	ldr	r3, [pc, #416]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a67      	ldr	r2, [pc, #412]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d013      	beq.n	8002c9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c74:	f7ff f9e8 	bl	8002048 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7ff f9e4 	bl	8002048 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e1fa      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	4b5d      	ldr	r3, [pc, #372]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0xe4>
 8002c9a:	e014      	b.n	8002cc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7ff f9d4 	bl	8002048 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7ff f9d0 	bl	8002048 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	; 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e1e6      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	4b53      	ldr	r3, [pc, #332]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x10c>
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d063      	beq.n	8002d9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cd2:	4b4c      	ldr	r3, [pc, #304]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cde:	4b49      	ldr	r3, [pc, #292]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d11c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x18c>
 8002cea:	4b46      	ldr	r3, [pc, #280]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d116      	bne.n	8002d24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf6:	4b43      	ldr	r3, [pc, #268]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d005      	beq.n	8002d0e <HAL_RCC_OscConfig+0x176>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e1ba      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0e:	4b3d      	ldr	r3, [pc, #244]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4939      	ldr	r1, [pc, #228]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d22:	e03a      	b.n	8002d9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d020      	beq.n	8002d6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d2c:	4b36      	ldr	r3, [pc, #216]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7ff f989 	bl	8002048 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3a:	f7ff f985 	bl	8002048 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e19b      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	4b2d      	ldr	r3, [pc, #180]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	4b2a      	ldr	r3, [pc, #168]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4927      	ldr	r1, [pc, #156]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	600b      	str	r3, [r1, #0]
 8002d6c:	e015      	b.n	8002d9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6e:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7ff f968 	bl	8002048 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7c:	f7ff f964 	bl	8002048 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e17a      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d03a      	beq.n	8002e1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d019      	beq.n	8002de2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dae:	4b17      	ldr	r3, [pc, #92]	; (8002e0c <HAL_RCC_OscConfig+0x274>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db4:	f7ff f948 	bl	8002048 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dbc:	f7ff f944 	bl	8002048 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e15a      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dda:	2001      	movs	r0, #1
 8002ddc:	f000 fada 	bl	8003394 <RCC_Delay>
 8002de0:	e01c      	b.n	8002e1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de2:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <HAL_RCC_OscConfig+0x274>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de8:	f7ff f92e 	bl	8002048 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dee:	e00f      	b.n	8002e10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df0:	f7ff f92a 	bl	8002048 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d908      	bls.n	8002e10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e140      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000
 8002e08:	42420000 	.word	0x42420000
 8002e0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e10:	4b9e      	ldr	r3, [pc, #632]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1e9      	bne.n	8002df0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80a6 	beq.w	8002f76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e2e:	4b97      	ldr	r3, [pc, #604]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10d      	bne.n	8002e56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3a:	4b94      	ldr	r3, [pc, #592]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	4a93      	ldr	r2, [pc, #588]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e44:	61d3      	str	r3, [r2, #28]
 8002e46:	4b91      	ldr	r3, [pc, #580]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e52:	2301      	movs	r3, #1
 8002e54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e56:	4b8e      	ldr	r3, [pc, #568]	; (8003090 <HAL_RCC_OscConfig+0x4f8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d118      	bne.n	8002e94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e62:	4b8b      	ldr	r3, [pc, #556]	; (8003090 <HAL_RCC_OscConfig+0x4f8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a8a      	ldr	r2, [pc, #552]	; (8003090 <HAL_RCC_OscConfig+0x4f8>)
 8002e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e6e:	f7ff f8eb 	bl	8002048 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e76:	f7ff f8e7 	bl	8002048 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b64      	cmp	r3, #100	; 0x64
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e0fd      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e88:	4b81      	ldr	r3, [pc, #516]	; (8003090 <HAL_RCC_OscConfig+0x4f8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d106      	bne.n	8002eaa <HAL_RCC_OscConfig+0x312>
 8002e9c:	4b7b      	ldr	r3, [pc, #492]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	4a7a      	ldr	r2, [pc, #488]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6213      	str	r3, [r2, #32]
 8002ea8:	e02d      	b.n	8002f06 <HAL_RCC_OscConfig+0x36e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x334>
 8002eb2:	4b76      	ldr	r3, [pc, #472]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4a75      	ldr	r2, [pc, #468]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	6213      	str	r3, [r2, #32]
 8002ebe:	4b73      	ldr	r3, [pc, #460]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4a72      	ldr	r2, [pc, #456]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002ec4:	f023 0304 	bic.w	r3, r3, #4
 8002ec8:	6213      	str	r3, [r2, #32]
 8002eca:	e01c      	b.n	8002f06 <HAL_RCC_OscConfig+0x36e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b05      	cmp	r3, #5
 8002ed2:	d10c      	bne.n	8002eee <HAL_RCC_OscConfig+0x356>
 8002ed4:	4b6d      	ldr	r3, [pc, #436]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4a6c      	ldr	r2, [pc, #432]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002eda:	f043 0304 	orr.w	r3, r3, #4
 8002ede:	6213      	str	r3, [r2, #32]
 8002ee0:	4b6a      	ldr	r3, [pc, #424]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	4a69      	ldr	r2, [pc, #420]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6213      	str	r3, [r2, #32]
 8002eec:	e00b      	b.n	8002f06 <HAL_RCC_OscConfig+0x36e>
 8002eee:	4b67      	ldr	r3, [pc, #412]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4a66      	ldr	r2, [pc, #408]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	6213      	str	r3, [r2, #32]
 8002efa:	4b64      	ldr	r3, [pc, #400]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4a63      	ldr	r2, [pc, #396]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002f00:	f023 0304 	bic.w	r3, r3, #4
 8002f04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d015      	beq.n	8002f3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0e:	f7ff f89b 	bl	8002048 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f14:	e00a      	b.n	8002f2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f16:	f7ff f897 	bl	8002048 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e0ab      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2c:	4b57      	ldr	r3, [pc, #348]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0ee      	beq.n	8002f16 <HAL_RCC_OscConfig+0x37e>
 8002f38:	e014      	b.n	8002f64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3a:	f7ff f885 	bl	8002048 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7ff f881 	bl	8002048 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e095      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f58:	4b4c      	ldr	r3, [pc, #304]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1ee      	bne.n	8002f42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d105      	bne.n	8002f76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6a:	4b48      	ldr	r3, [pc, #288]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	4a47      	ldr	r2, [pc, #284]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 8081 	beq.w	8003082 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f80:	4b42      	ldr	r3, [pc, #264]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 030c 	and.w	r3, r3, #12
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d061      	beq.n	8003050 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d146      	bne.n	8003022 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f94:	4b3f      	ldr	r3, [pc, #252]	; (8003094 <HAL_RCC_OscConfig+0x4fc>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7ff f855 	bl	8002048 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa2:	f7ff f851 	bl	8002048 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e067      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb4:	4b35      	ldr	r3, [pc, #212]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1f0      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc8:	d108      	bne.n	8002fdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fca:	4b30      	ldr	r3, [pc, #192]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	492d      	ldr	r1, [pc, #180]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fdc:	4b2b      	ldr	r3, [pc, #172]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a19      	ldr	r1, [r3, #32]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	430b      	orrs	r3, r1
 8002fee:	4927      	ldr	r1, [pc, #156]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff4:	4b27      	ldr	r3, [pc, #156]	; (8003094 <HAL_RCC_OscConfig+0x4fc>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7ff f825 	bl	8002048 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003002:	f7ff f821 	bl	8002048 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e037      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003014:	4b1d      	ldr	r3, [pc, #116]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x46a>
 8003020:	e02f      	b.n	8003082 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003022:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <HAL_RCC_OscConfig+0x4fc>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7ff f80e 	bl	8002048 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003030:	f7ff f80a 	bl	8002048 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e020      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003042:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x498>
 800304e:	e018      	b.n	8003082 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e013      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	429a      	cmp	r2, r3
 800306e:	d106      	bne.n	800307e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307a:	429a      	cmp	r2, r3
 800307c:	d001      	beq.n	8003082 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40021000 	.word	0x40021000
 8003090:	40007000 	.word	0x40007000
 8003094:	42420060 	.word	0x42420060

08003098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0d0      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030ac:	4b6a      	ldr	r3, [pc, #424]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d910      	bls.n	80030dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4b67      	ldr	r3, [pc, #412]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 0207 	bic.w	r2, r3, #7
 80030c2:	4965      	ldr	r1, [pc, #404]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ca:	4b63      	ldr	r3, [pc, #396]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0b8      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d020      	beq.n	800312a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f4:	4b59      	ldr	r3, [pc, #356]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4a58      	ldr	r2, [pc, #352]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800310c:	4b53      	ldr	r3, [pc, #332]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4a52      	ldr	r2, [pc, #328]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003116:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003118:	4b50      	ldr	r3, [pc, #320]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	494d      	ldr	r1, [pc, #308]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	4313      	orrs	r3, r2
 8003128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d040      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	4b47      	ldr	r3, [pc, #284]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d115      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e07f      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003156:	4b41      	ldr	r3, [pc, #260]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e073      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003166:	4b3d      	ldr	r3, [pc, #244]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e06b      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003176:	4b39      	ldr	r3, [pc, #228]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f023 0203 	bic.w	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4936      	ldr	r1, [pc, #216]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	4313      	orrs	r3, r2
 8003186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003188:	f7fe ff5e 	bl	8002048 <HAL_GetTick>
 800318c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003190:	f7fe ff5a 	bl	8002048 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	; 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e053      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a6:	4b2d      	ldr	r3, [pc, #180]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 020c 	and.w	r2, r3, #12
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d1eb      	bne.n	8003190 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031b8:	4b27      	ldr	r3, [pc, #156]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d210      	bcs.n	80031e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b24      	ldr	r3, [pc, #144]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 0207 	bic.w	r2, r3, #7
 80031ce:	4922      	ldr	r1, [pc, #136]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e032      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f4:	4b19      	ldr	r3, [pc, #100]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4916      	ldr	r1, [pc, #88]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	4313      	orrs	r3, r2
 8003204:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003212:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	490e      	ldr	r1, [pc, #56]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	4313      	orrs	r3, r2
 8003224:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003226:	f000 f821 	bl	800326c <HAL_RCC_GetSysClockFreq>
 800322a:	4601      	mov	r1, r0
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 8003238:	5cd3      	ldrb	r3, [r2, r3]
 800323a:	fa21 f303 	lsr.w	r3, r1, r3
 800323e:	4a09      	ldr	r2, [pc, #36]	; (8003264 <HAL_RCC_ClockConfig+0x1cc>)
 8003240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_RCC_ClockConfig+0x1d0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe febc 	bl	8001fc4 <HAL_InitTick>

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40022000 	.word	0x40022000
 800325c:	40021000 	.word	0x40021000
 8003260:	0800726c 	.word	0x0800726c
 8003264:	2000000c 	.word	0x2000000c
 8003268:	20000010 	.word	0x20000010

0800326c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800326c:	b490      	push	{r4, r7}
 800326e:	b08a      	sub	sp, #40	; 0x28
 8003270:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003272:	4b2a      	ldr	r3, [pc, #168]	; (800331c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003274:	1d3c      	adds	r4, r7, #4
 8003276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800327c:	4b28      	ldr	r3, [pc, #160]	; (8003320 <HAL_RCC_GetSysClockFreq+0xb4>)
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
 8003286:	2300      	movs	r3, #0
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	2300      	movs	r3, #0
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003296:	4b23      	ldr	r3, [pc, #140]	; (8003324 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f003 030c 	and.w	r3, r3, #12
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d002      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0x40>
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d003      	beq.n	80032b2 <HAL_RCC_GetSysClockFreq+0x46>
 80032aa:	e02d      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032ac:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032ae:	623b      	str	r3, [r7, #32]
      break;
 80032b0:	e02d      	b.n	800330e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	0c9b      	lsrs	r3, r3, #18
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032be:	4413      	add	r3, r2
 80032c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d013      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032d0:	4b14      	ldr	r3, [pc, #80]	; (8003324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	0c5b      	lsrs	r3, r3, #17
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032de:	4413      	add	r3, r2
 80032e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	4a0f      	ldr	r2, [pc, #60]	; (8003328 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032ea:	fb02 f203 	mul.w	r2, r2, r3
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
 80032f6:	e004      	b.n	8003302 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	4a0c      	ldr	r2, [pc, #48]	; (800332c <HAL_RCC_GetSysClockFreq+0xc0>)
 80032fc:	fb02 f303 	mul.w	r3, r2, r3
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	623b      	str	r3, [r7, #32]
      break;
 8003306:	e002      	b.n	800330e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003308:	4b07      	ldr	r3, [pc, #28]	; (8003328 <HAL_RCC_GetSysClockFreq+0xbc>)
 800330a:	623b      	str	r3, [r7, #32]
      break;
 800330c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800330e:	6a3b      	ldr	r3, [r7, #32]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3728      	adds	r7, #40	; 0x28
 8003314:	46bd      	mov	sp, r7
 8003316:	bc90      	pop	{r4, r7}
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	080064fc 	.word	0x080064fc
 8003320:	0800650c 	.word	0x0800650c
 8003324:	40021000 	.word	0x40021000
 8003328:	007a1200 	.word	0x007a1200
 800332c:	003d0900 	.word	0x003d0900

08003330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003334:	4b02      	ldr	r3, [pc, #8]	; (8003340 <HAL_RCC_GetHCLKFreq+0x10>)
 8003336:	681b      	ldr	r3, [r3, #0]
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	2000000c 	.word	0x2000000c

08003344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003348:	f7ff fff2 	bl	8003330 <HAL_RCC_GetHCLKFreq>
 800334c:	4601      	mov	r1, r0
 800334e:	4b05      	ldr	r3, [pc, #20]	; (8003364 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4a03      	ldr	r2, [pc, #12]	; (8003368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800335a:	5cd3      	ldrb	r3, [r2, r3]
 800335c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003360:	4618      	mov	r0, r3
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000
 8003368:	0800727c 	.word	0x0800727c

0800336c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003370:	f7ff ffde 	bl	8003330 <HAL_RCC_GetHCLKFreq>
 8003374:	4601      	mov	r1, r0
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	0adb      	lsrs	r3, r3, #11
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	4a03      	ldr	r2, [pc, #12]	; (8003390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003382:	5cd3      	ldrb	r3, [r2, r3]
 8003384:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40021000 	.word	0x40021000
 8003390:	0800727c 	.word	0x0800727c

08003394 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800339c:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <RCC_Delay+0x34>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <RCC_Delay+0x38>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	0a5b      	lsrs	r3, r3, #9
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	fb02 f303 	mul.w	r3, r2, r3
 80033ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033b0:	bf00      	nop
  }
  while (Delay --);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	1e5a      	subs	r2, r3, #1
 80033b6:	60fa      	str	r2, [r7, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f9      	bne.n	80033b0 <RCC_Delay+0x1c>
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	2000000c 	.word	0x2000000c
 80033cc:	10624dd3 	.word	0x10624dd3

080033d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d07d      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033ec:	2300      	movs	r3, #0
 80033ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f0:	4b4f      	ldr	r3, [pc, #316]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10d      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033fc:	4b4c      	ldr	r3, [pc, #304]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	4a4b      	ldr	r2, [pc, #300]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003406:	61d3      	str	r3, [r2, #28]
 8003408:	4b49      	ldr	r3, [pc, #292]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003414:	2301      	movs	r3, #1
 8003416:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003418:	4b46      	ldr	r3, [pc, #280]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003420:	2b00      	cmp	r3, #0
 8003422:	d118      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003424:	4b43      	ldr	r3, [pc, #268]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a42      	ldr	r2, [pc, #264]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800342a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003430:	f7fe fe0a 	bl	8002048 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003436:	e008      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003438:	f7fe fe06 	bl	8002048 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e06d      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344a:	4b3a      	ldr	r3, [pc, #232]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003456:	4b36      	ldr	r3, [pc, #216]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d02e      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	429a      	cmp	r2, r3
 8003472:	d027      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003474:	4b2e      	ldr	r3, [pc, #184]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800347e:	4b2e      	ldr	r3, [pc, #184]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003480:	2201      	movs	r2, #1
 8003482:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003484:	4b2c      	ldr	r3, [pc, #176]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800348a:	4a29      	ldr	r2, [pc, #164]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d014      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349a:	f7fe fdd5 	bl	8002048 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a0:	e00a      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a2:	f7fe fdd1 	bl	8002048 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e036      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b8:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0ee      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034c4:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4917      	ldr	r1, [pc, #92]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d105      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034dc:	4b14      	ldr	r3, [pc, #80]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	4a13      	ldr	r2, [pc, #76]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034f4:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	490b      	ldr	r1, [pc, #44]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	4904      	ldr	r1, [pc, #16]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003520:	4313      	orrs	r3, r2
 8003522:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	40007000 	.word	0x40007000
 8003538:	42420440 	.word	0x42420440

0800353c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e076      	b.n	800363c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	2b00      	cmp	r3, #0
 8003554:	d108      	bne.n	8003568 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800355e:	d009      	beq.n	8003574 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	61da      	str	r2, [r3, #28]
 8003566:	e005      	b.n	8003574 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fe fbe2 	bl	8001d58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f8:	ea42 0103 	orr.w	r1, r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	0c1a      	lsrs	r2, r3, #16
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f002 0204 	and.w	r2, r2, #4
 800361a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	69da      	ldr	r2, [r3, #28]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800362a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	4613      	mov	r3, r2
 8003652:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_SPI_Transmit+0x22>
 8003662:	2302      	movs	r3, #2
 8003664:	e126      	b.n	80038b4 <HAL_SPI_Transmit+0x270>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800366e:	f7fe fceb 	bl	8002048 <HAL_GetTick>
 8003672:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003674:	88fb      	ldrh	r3, [r7, #6]
 8003676:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b01      	cmp	r3, #1
 8003682:	d002      	beq.n	800368a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003684:	2302      	movs	r3, #2
 8003686:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003688:	e10b      	b.n	80038a2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <HAL_SPI_Transmit+0x52>
 8003690:	88fb      	ldrh	r3, [r7, #6]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d102      	bne.n	800369c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	77fb      	strb	r3, [r7, #31]
    goto error;
 800369a:	e102      	b.n	80038a2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2203      	movs	r2, #3
 80036a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	88fa      	ldrh	r2, [r7, #6]
 80036b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	88fa      	ldrh	r2, [r7, #6]
 80036ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036e2:	d10f      	bne.n	8003704 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003702:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370e:	2b40      	cmp	r3, #64	; 0x40
 8003710:	d007      	beq.n	8003722 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003720:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800372a:	d14b      	bne.n	80037c4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HAL_SPI_Transmit+0xf6>
 8003734:	8afb      	ldrh	r3, [r7, #22]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d13e      	bne.n	80037b8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	881a      	ldrh	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	1c9a      	adds	r2, r3, #2
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003754:	b29b      	uxth	r3, r3
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800375e:	e02b      	b.n	80037b8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b02      	cmp	r3, #2
 800376c:	d112      	bne.n	8003794 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	881a      	ldrh	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	1c9a      	adds	r2, r3, #2
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003788:	b29b      	uxth	r3, r3
 800378a:	3b01      	subs	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	86da      	strh	r2, [r3, #54]	; 0x36
 8003792:	e011      	b.n	80037b8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003794:	f7fe fc58 	bl	8002048 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d803      	bhi.n	80037ac <HAL_SPI_Transmit+0x168>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037aa:	d102      	bne.n	80037b2 <HAL_SPI_Transmit+0x16e>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d102      	bne.n	80037b8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037b6:	e074      	b.n	80038a2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1ce      	bne.n	8003760 <HAL_SPI_Transmit+0x11c>
 80037c2:	e04c      	b.n	800385e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <HAL_SPI_Transmit+0x18e>
 80037cc:	8afb      	ldrh	r3, [r7, #22]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d140      	bne.n	8003854 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	330c      	adds	r3, #12
 80037dc:	7812      	ldrb	r2, [r2, #0]
 80037de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80037f8:	e02c      	b.n	8003854 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b02      	cmp	r3, #2
 8003806:	d113      	bne.n	8003830 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	330c      	adds	r3, #12
 8003812:	7812      	ldrb	r2, [r2, #0]
 8003814:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	86da      	strh	r2, [r3, #54]	; 0x36
 800382e:	e011      	b.n	8003854 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003830:	f7fe fc0a 	bl	8002048 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d803      	bhi.n	8003848 <HAL_SPI_Transmit+0x204>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d102      	bne.n	800384e <HAL_SPI_Transmit+0x20a>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d102      	bne.n	8003854 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003852:	e026      	b.n	80038a2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1cd      	bne.n	80037fa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	6839      	ldr	r1, [r7, #0]
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 f8b2 	bl	80039cc <SPI_EndRxTxTransaction>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2220      	movs	r2, #32
 8003872:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10a      	bne.n	8003892 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800387c:	2300      	movs	r3, #0
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	77fb      	strb	r3, [r7, #31]
 800389e:	e000      	b.n	80038a2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80038a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3720      	adds	r7, #32
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038cc:	f7fe fbbc 	bl	8002048 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	4413      	add	r3, r2
 80038da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038dc:	f7fe fbb4 	bl	8002048 <HAL_GetTick>
 80038e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038e2:	4b39      	ldr	r3, [pc, #228]	; (80039c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	015b      	lsls	r3, r3, #5
 80038e8:	0d1b      	lsrs	r3, r3, #20
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	fb02 f303 	mul.w	r3, r2, r3
 80038f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038f2:	e054      	b.n	800399e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fa:	d050      	beq.n	800399e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038fc:	f7fe fba4 	bl	8002048 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	429a      	cmp	r2, r3
 800390a:	d902      	bls.n	8003912 <SPI_WaitFlagStateUntilTimeout+0x56>
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d13d      	bne.n	800398e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003920:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800392a:	d111      	bne.n	8003950 <SPI_WaitFlagStateUntilTimeout+0x94>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003934:	d004      	beq.n	8003940 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393e:	d107      	bne.n	8003950 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800394e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003958:	d10f      	bne.n	800397a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003978:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e017      	b.n	80039be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	3b01      	subs	r3, #1
 800399c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4013      	ands	r3, r2
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	bf0c      	ite	eq
 80039ae:	2301      	moveq	r3, #1
 80039b0:	2300      	movne	r3, #0
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d19b      	bne.n	80038f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3720      	adds	r7, #32
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	2000000c 	.word	0x2000000c

080039cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2200      	movs	r2, #0
 80039e0:	2180      	movs	r1, #128	; 0x80
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f7ff ff6a 	bl	80038bc <SPI_WaitFlagStateUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d007      	beq.n	80039fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f2:	f043 0220 	orr.w	r2, r3, #32
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e000      	b.n	8003a00 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e03f      	b.n	8003a9a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fe f9dc 	bl	8001dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2224      	movs	r2, #36	; 0x24
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f9a7 	bl	8003da0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695a      	ldr	r2, [r3, #20]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b08a      	sub	sp, #40	; 0x28
 8003aa6:	af02      	add	r7, sp, #8
 8003aa8:	60f8      	str	r0, [r7, #12]
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	603b      	str	r3, [r7, #0]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d17c      	bne.n	8003bbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <HAL_UART_Transmit+0x2c>
 8003ac8:	88fb      	ldrh	r3, [r7, #6]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e075      	b.n	8003bbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_UART_Transmit+0x3e>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e06e      	b.n	8003bbe <HAL_UART_Transmit+0x11c>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2221      	movs	r2, #33	; 0x21
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003af6:	f7fe faa7 	bl	8002048 <HAL_GetTick>
 8003afa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	88fa      	ldrh	r2, [r7, #6]
 8003b00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	88fa      	ldrh	r2, [r7, #6]
 8003b06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b10:	d108      	bne.n	8003b24 <HAL_UART_Transmit+0x82>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d104      	bne.n	8003b24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	e003      	b.n	8003b2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b34:	e02a      	b.n	8003b8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2180      	movs	r1, #128	; 0x80
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f8e2 	bl	8003d0a <UART_WaitOnFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e036      	b.n	8003bbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10b      	bne.n	8003b6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	3302      	adds	r3, #2
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	e007      	b.n	8003b7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	781a      	ldrb	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1cf      	bne.n	8003b36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2140      	movs	r1, #64	; 0x40
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f8b2 	bl	8003d0a <UART_WaitOnFlagUntilTimeout>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e006      	b.n	8003bbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e000      	b.n	8003bbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003bbc:	2302      	movs	r3, #2
  }
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3720      	adds	r7, #32
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b08a      	sub	sp, #40	; 0x28
 8003bca:	af02      	add	r7, sp, #8
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	603b      	str	r3, [r7, #0]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	f040 808c 	bne.w	8003d00 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <HAL_UART_Receive+0x2e>
 8003bee:	88fb      	ldrh	r3, [r7, #6]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e084      	b.n	8003d02 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_UART_Receive+0x40>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e07d      	b.n	8003d02 <HAL_UART_Receive+0x13c>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2222      	movs	r2, #34	; 0x22
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c22:	f7fe fa11 	bl	8002048 <HAL_GetTick>
 8003c26:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	88fa      	ldrh	r2, [r7, #6]
 8003c2c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	88fa      	ldrh	r2, [r7, #6]
 8003c32:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3c:	d108      	bne.n	8003c50 <HAL_UART_Receive+0x8a>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d104      	bne.n	8003c50 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	61bb      	str	r3, [r7, #24]
 8003c4e:	e003      	b.n	8003c58 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c54:	2300      	movs	r3, #0
 8003c56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003c60:	e043      	b.n	8003cea <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2120      	movs	r1, #32
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f84c 	bl	8003d0a <UART_WaitOnFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e042      	b.n	8003d02 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10c      	bne.n	8003c9c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	3302      	adds	r3, #2
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	e01f      	b.n	8003cdc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca4:	d007      	beq.n	8003cb6 <HAL_UART_Receive+0xf0>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10a      	bne.n	8003cc4 <HAL_UART_Receive+0xfe>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	701a      	strb	r2, [r3, #0]
 8003cc2:	e008      	b.n	8003cd6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1b6      	bne.n	8003c62 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e000      	b.n	8003d02 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003d00:	2302      	movs	r3, #2
  }
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b084      	sub	sp, #16
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	603b      	str	r3, [r7, #0]
 8003d16:	4613      	mov	r3, r2
 8003d18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d1a:	e02c      	b.n	8003d76 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d22:	d028      	beq.n	8003d76 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d007      	beq.n	8003d3a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d2a:	f7fe f98d 	bl	8002048 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d21d      	bcs.n	8003d76 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d48:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695a      	ldr	r2, [r3, #20]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0201 	bic.w	r2, r2, #1
 8003d58:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e00f      	b.n	8003d96 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	bf0c      	ite	eq
 8003d86:	2301      	moveq	r3, #1
 8003d88:	2300      	movne	r3, #0
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	79fb      	ldrb	r3, [r7, #7]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d0c3      	beq.n	8003d1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003dda:	f023 030c 	bic.w	r3, r3, #12
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	430b      	orrs	r3, r1
 8003de6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699a      	ldr	r2, [r3, #24]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a2c      	ldr	r2, [pc, #176]	; (8003eb4 <UART_SetConfig+0x114>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d103      	bne.n	8003e10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e08:	f7ff fab0 	bl	800336c <HAL_RCC_GetPCLK2Freq>
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	e002      	b.n	8003e16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e10:	f7ff fa98 	bl	8003344 <HAL_RCC_GetPCLK1Freq>
 8003e14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009a      	lsls	r2, r3, #2
 8003e20:	441a      	add	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	4a22      	ldr	r2, [pc, #136]	; (8003eb8 <UART_SetConfig+0x118>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	0119      	lsls	r1, r3, #4
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009a      	lsls	r2, r3, #2
 8003e40:	441a      	add	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e4c:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <UART_SetConfig+0x118>)
 8003e4e:	fba3 0302 	umull	r0, r3, r3, r2
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	2064      	movs	r0, #100	; 0x64
 8003e56:	fb00 f303 	mul.w	r3, r0, r3
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	3332      	adds	r3, #50	; 0x32
 8003e60:	4a15      	ldr	r2, [pc, #84]	; (8003eb8 <UART_SetConfig+0x118>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e6c:	4419      	add	r1, r3
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	009a      	lsls	r2, r3, #2
 8003e78:	441a      	add	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e84:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <UART_SetConfig+0x118>)
 8003e86:	fba3 0302 	umull	r0, r3, r3, r2
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	2064      	movs	r0, #100	; 0x64
 8003e8e:	fb00 f303 	mul.w	r3, r0, r3
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	3332      	adds	r3, #50	; 0x32
 8003e98:	4a07      	ldr	r2, [pc, #28]	; (8003eb8 <UART_SetConfig+0x118>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	095b      	lsrs	r3, r3, #5
 8003ea0:	f003 020f 	and.w	r2, r3, #15
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	440a      	add	r2, r1
 8003eaa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003eac:	bf00      	nop
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40013800 	.word	0x40013800
 8003eb8:	51eb851f 	.word	0x51eb851f

08003ebc <atoi>:
 8003ebc:	220a      	movs	r2, #10
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	f000 bdb0 	b.w	8004a24 <strtol>

08003ec4 <__errno>:
 8003ec4:	4b01      	ldr	r3, [pc, #4]	; (8003ecc <__errno+0x8>)
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	20000018 	.word	0x20000018

08003ed0 <__libc_init_array>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	2500      	movs	r5, #0
 8003ed4:	4e0c      	ldr	r6, [pc, #48]	; (8003f08 <__libc_init_array+0x38>)
 8003ed6:	4c0d      	ldr	r4, [pc, #52]	; (8003f0c <__libc_init_array+0x3c>)
 8003ed8:	1ba4      	subs	r4, r4, r6
 8003eda:	10a4      	asrs	r4, r4, #2
 8003edc:	42a5      	cmp	r5, r4
 8003ede:	d109      	bne.n	8003ef4 <__libc_init_array+0x24>
 8003ee0:	f002 f97c 	bl	80061dc <_init>
 8003ee4:	2500      	movs	r5, #0
 8003ee6:	4e0a      	ldr	r6, [pc, #40]	; (8003f10 <__libc_init_array+0x40>)
 8003ee8:	4c0a      	ldr	r4, [pc, #40]	; (8003f14 <__libc_init_array+0x44>)
 8003eea:	1ba4      	subs	r4, r4, r6
 8003eec:	10a4      	asrs	r4, r4, #2
 8003eee:	42a5      	cmp	r5, r4
 8003ef0:	d105      	bne.n	8003efe <__libc_init_array+0x2e>
 8003ef2:	bd70      	pop	{r4, r5, r6, pc}
 8003ef4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ef8:	4798      	blx	r3
 8003efa:	3501      	adds	r5, #1
 8003efc:	e7ee      	b.n	8003edc <__libc_init_array+0xc>
 8003efe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f02:	4798      	blx	r3
 8003f04:	3501      	adds	r5, #1
 8003f06:	e7f2      	b.n	8003eee <__libc_init_array+0x1e>
 8003f08:	080074e0 	.word	0x080074e0
 8003f0c:	080074e0 	.word	0x080074e0
 8003f10:	080074e0 	.word	0x080074e0
 8003f14:	080074e4 	.word	0x080074e4

08003f18 <memcpy>:
 8003f18:	b510      	push	{r4, lr}
 8003f1a:	1e43      	subs	r3, r0, #1
 8003f1c:	440a      	add	r2, r1
 8003f1e:	4291      	cmp	r1, r2
 8003f20:	d100      	bne.n	8003f24 <memcpy+0xc>
 8003f22:	bd10      	pop	{r4, pc}
 8003f24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f2c:	e7f7      	b.n	8003f1e <memcpy+0x6>

08003f2e <memset>:
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4402      	add	r2, r0
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d100      	bne.n	8003f38 <memset+0xa>
 8003f36:	4770      	bx	lr
 8003f38:	f803 1b01 	strb.w	r1, [r3], #1
 8003f3c:	e7f9      	b.n	8003f32 <memset+0x4>

08003f3e <__cvt>:
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f44:	461e      	mov	r6, r3
 8003f46:	bfbb      	ittet	lt
 8003f48:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003f4c:	461e      	movlt	r6, r3
 8003f4e:	2300      	movge	r3, #0
 8003f50:	232d      	movlt	r3, #45	; 0x2d
 8003f52:	b088      	sub	sp, #32
 8003f54:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003f56:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003f5a:	f027 0720 	bic.w	r7, r7, #32
 8003f5e:	2f46      	cmp	r7, #70	; 0x46
 8003f60:	4614      	mov	r4, r2
 8003f62:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003f64:	700b      	strb	r3, [r1, #0]
 8003f66:	d004      	beq.n	8003f72 <__cvt+0x34>
 8003f68:	2f45      	cmp	r7, #69	; 0x45
 8003f6a:	d100      	bne.n	8003f6e <__cvt+0x30>
 8003f6c:	3501      	adds	r5, #1
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e000      	b.n	8003f74 <__cvt+0x36>
 8003f72:	2303      	movs	r3, #3
 8003f74:	aa07      	add	r2, sp, #28
 8003f76:	9204      	str	r2, [sp, #16]
 8003f78:	aa06      	add	r2, sp, #24
 8003f7a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003f7e:	e9cd 3500 	strd	r3, r5, [sp]
 8003f82:	4622      	mov	r2, r4
 8003f84:	4633      	mov	r3, r6
 8003f86:	f000 fdf3 	bl	8004b70 <_dtoa_r>
 8003f8a:	2f47      	cmp	r7, #71	; 0x47
 8003f8c:	4680      	mov	r8, r0
 8003f8e:	d102      	bne.n	8003f96 <__cvt+0x58>
 8003f90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f92:	07db      	lsls	r3, r3, #31
 8003f94:	d526      	bpl.n	8003fe4 <__cvt+0xa6>
 8003f96:	2f46      	cmp	r7, #70	; 0x46
 8003f98:	eb08 0905 	add.w	r9, r8, r5
 8003f9c:	d111      	bne.n	8003fc2 <__cvt+0x84>
 8003f9e:	f898 3000 	ldrb.w	r3, [r8]
 8003fa2:	2b30      	cmp	r3, #48	; 0x30
 8003fa4:	d10a      	bne.n	8003fbc <__cvt+0x7e>
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	2300      	movs	r3, #0
 8003faa:	4620      	mov	r0, r4
 8003fac:	4631      	mov	r1, r6
 8003fae:	f7fc fcfb 	bl	80009a8 <__aeabi_dcmpeq>
 8003fb2:	b918      	cbnz	r0, 8003fbc <__cvt+0x7e>
 8003fb4:	f1c5 0501 	rsb	r5, r5, #1
 8003fb8:	f8ca 5000 	str.w	r5, [sl]
 8003fbc:	f8da 3000 	ldr.w	r3, [sl]
 8003fc0:	4499      	add	r9, r3
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	4631      	mov	r1, r6
 8003fca:	f7fc fced 	bl	80009a8 <__aeabi_dcmpeq>
 8003fce:	b938      	cbnz	r0, 8003fe0 <__cvt+0xa2>
 8003fd0:	2230      	movs	r2, #48	; 0x30
 8003fd2:	9b07      	ldr	r3, [sp, #28]
 8003fd4:	454b      	cmp	r3, r9
 8003fd6:	d205      	bcs.n	8003fe4 <__cvt+0xa6>
 8003fd8:	1c59      	adds	r1, r3, #1
 8003fda:	9107      	str	r1, [sp, #28]
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	e7f8      	b.n	8003fd2 <__cvt+0x94>
 8003fe0:	f8cd 901c 	str.w	r9, [sp, #28]
 8003fe4:	4640      	mov	r0, r8
 8003fe6:	9b07      	ldr	r3, [sp, #28]
 8003fe8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003fea:	eba3 0308 	sub.w	r3, r3, r8
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	b008      	add	sp, #32
 8003ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003ff6 <__exponent>:
 8003ff6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ff8:	2900      	cmp	r1, #0
 8003ffa:	bfb4      	ite	lt
 8003ffc:	232d      	movlt	r3, #45	; 0x2d
 8003ffe:	232b      	movge	r3, #43	; 0x2b
 8004000:	4604      	mov	r4, r0
 8004002:	bfb8      	it	lt
 8004004:	4249      	neglt	r1, r1
 8004006:	2909      	cmp	r1, #9
 8004008:	f804 2b02 	strb.w	r2, [r4], #2
 800400c:	7043      	strb	r3, [r0, #1]
 800400e:	dd21      	ble.n	8004054 <__exponent+0x5e>
 8004010:	f10d 0307 	add.w	r3, sp, #7
 8004014:	461f      	mov	r7, r3
 8004016:	260a      	movs	r6, #10
 8004018:	fb91 f5f6 	sdiv	r5, r1, r6
 800401c:	fb06 1115 	mls	r1, r6, r5, r1
 8004020:	2d09      	cmp	r5, #9
 8004022:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004026:	f803 1c01 	strb.w	r1, [r3, #-1]
 800402a:	f103 32ff 	add.w	r2, r3, #4294967295
 800402e:	4629      	mov	r1, r5
 8004030:	dc09      	bgt.n	8004046 <__exponent+0x50>
 8004032:	3130      	adds	r1, #48	; 0x30
 8004034:	3b02      	subs	r3, #2
 8004036:	f802 1c01 	strb.w	r1, [r2, #-1]
 800403a:	42bb      	cmp	r3, r7
 800403c:	4622      	mov	r2, r4
 800403e:	d304      	bcc.n	800404a <__exponent+0x54>
 8004040:	1a10      	subs	r0, r2, r0
 8004042:	b003      	add	sp, #12
 8004044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004046:	4613      	mov	r3, r2
 8004048:	e7e6      	b.n	8004018 <__exponent+0x22>
 800404a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800404e:	f804 2b01 	strb.w	r2, [r4], #1
 8004052:	e7f2      	b.n	800403a <__exponent+0x44>
 8004054:	2330      	movs	r3, #48	; 0x30
 8004056:	4419      	add	r1, r3
 8004058:	7083      	strb	r3, [r0, #2]
 800405a:	1d02      	adds	r2, r0, #4
 800405c:	70c1      	strb	r1, [r0, #3]
 800405e:	e7ef      	b.n	8004040 <__exponent+0x4a>

08004060 <_printf_float>:
 8004060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004064:	b091      	sub	sp, #68	; 0x44
 8004066:	460c      	mov	r4, r1
 8004068:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800406a:	4693      	mov	fp, r2
 800406c:	461e      	mov	r6, r3
 800406e:	4605      	mov	r5, r0
 8004070:	f001 fb36 	bl	80056e0 <_localeconv_r>
 8004074:	6803      	ldr	r3, [r0, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	9309      	str	r3, [sp, #36]	; 0x24
 800407a:	f7fc f869 	bl	8000150 <strlen>
 800407e:	2300      	movs	r3, #0
 8004080:	930e      	str	r3, [sp, #56]	; 0x38
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	900a      	str	r0, [sp, #40]	; 0x28
 8004086:	3307      	adds	r3, #7
 8004088:	f023 0307 	bic.w	r3, r3, #7
 800408c:	f103 0208 	add.w	r2, r3, #8
 8004090:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004094:	f8d4 a000 	ldr.w	sl, [r4]
 8004098:	603a      	str	r2, [r7, #0]
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80040a2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80040a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80040aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80040ac:	f04f 32ff 	mov.w	r2, #4294967295
 80040b0:	4ba6      	ldr	r3, [pc, #664]	; (800434c <_printf_float+0x2ec>)
 80040b2:	4638      	mov	r0, r7
 80040b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040b6:	f7fc fca9 	bl	8000a0c <__aeabi_dcmpun>
 80040ba:	bb68      	cbnz	r0, 8004118 <_printf_float+0xb8>
 80040bc:	f04f 32ff 	mov.w	r2, #4294967295
 80040c0:	4ba2      	ldr	r3, [pc, #648]	; (800434c <_printf_float+0x2ec>)
 80040c2:	4638      	mov	r0, r7
 80040c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040c6:	f7fc fc83 	bl	80009d0 <__aeabi_dcmple>
 80040ca:	bb28      	cbnz	r0, 8004118 <_printf_float+0xb8>
 80040cc:	2200      	movs	r2, #0
 80040ce:	2300      	movs	r3, #0
 80040d0:	4638      	mov	r0, r7
 80040d2:	4649      	mov	r1, r9
 80040d4:	f7fc fc72 	bl	80009bc <__aeabi_dcmplt>
 80040d8:	b110      	cbz	r0, 80040e0 <_printf_float+0x80>
 80040da:	232d      	movs	r3, #45	; 0x2d
 80040dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040e0:	4f9b      	ldr	r7, [pc, #620]	; (8004350 <_printf_float+0x2f0>)
 80040e2:	4b9c      	ldr	r3, [pc, #624]	; (8004354 <_printf_float+0x2f4>)
 80040e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040e8:	bf98      	it	ls
 80040ea:	461f      	movls	r7, r3
 80040ec:	2303      	movs	r3, #3
 80040ee:	f04f 0900 	mov.w	r9, #0
 80040f2:	6123      	str	r3, [r4, #16]
 80040f4:	f02a 0304 	bic.w	r3, sl, #4
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	9600      	str	r6, [sp, #0]
 80040fc:	465b      	mov	r3, fp
 80040fe:	aa0f      	add	r2, sp, #60	; 0x3c
 8004100:	4621      	mov	r1, r4
 8004102:	4628      	mov	r0, r5
 8004104:	f000 f9e2 	bl	80044cc <_printf_common>
 8004108:	3001      	adds	r0, #1
 800410a:	f040 8090 	bne.w	800422e <_printf_float+0x1ce>
 800410e:	f04f 30ff 	mov.w	r0, #4294967295
 8004112:	b011      	add	sp, #68	; 0x44
 8004114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004118:	463a      	mov	r2, r7
 800411a:	464b      	mov	r3, r9
 800411c:	4638      	mov	r0, r7
 800411e:	4649      	mov	r1, r9
 8004120:	f7fc fc74 	bl	8000a0c <__aeabi_dcmpun>
 8004124:	b110      	cbz	r0, 800412c <_printf_float+0xcc>
 8004126:	4f8c      	ldr	r7, [pc, #560]	; (8004358 <_printf_float+0x2f8>)
 8004128:	4b8c      	ldr	r3, [pc, #560]	; (800435c <_printf_float+0x2fc>)
 800412a:	e7db      	b.n	80040e4 <_printf_float+0x84>
 800412c:	6863      	ldr	r3, [r4, #4]
 800412e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004132:	1c59      	adds	r1, r3, #1
 8004134:	a80d      	add	r0, sp, #52	; 0x34
 8004136:	a90e      	add	r1, sp, #56	; 0x38
 8004138:	d140      	bne.n	80041bc <_printf_float+0x15c>
 800413a:	2306      	movs	r3, #6
 800413c:	6063      	str	r3, [r4, #4]
 800413e:	f04f 0c00 	mov.w	ip, #0
 8004142:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004146:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800414a:	6863      	ldr	r3, [r4, #4]
 800414c:	6022      	str	r2, [r4, #0]
 800414e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	463a      	mov	r2, r7
 8004156:	464b      	mov	r3, r9
 8004158:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800415c:	4628      	mov	r0, r5
 800415e:	f7ff feee 	bl	8003f3e <__cvt>
 8004162:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004166:	2b47      	cmp	r3, #71	; 0x47
 8004168:	4607      	mov	r7, r0
 800416a:	d109      	bne.n	8004180 <_printf_float+0x120>
 800416c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800416e:	1cd8      	adds	r0, r3, #3
 8004170:	db02      	blt.n	8004178 <_printf_float+0x118>
 8004172:	6862      	ldr	r2, [r4, #4]
 8004174:	4293      	cmp	r3, r2
 8004176:	dd47      	ble.n	8004208 <_printf_float+0x1a8>
 8004178:	f1a8 0802 	sub.w	r8, r8, #2
 800417c:	fa5f f888 	uxtb.w	r8, r8
 8004180:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004184:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004186:	d824      	bhi.n	80041d2 <_printf_float+0x172>
 8004188:	3901      	subs	r1, #1
 800418a:	4642      	mov	r2, r8
 800418c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004190:	910d      	str	r1, [sp, #52]	; 0x34
 8004192:	f7ff ff30 	bl	8003ff6 <__exponent>
 8004196:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004198:	4681      	mov	r9, r0
 800419a:	1813      	adds	r3, r2, r0
 800419c:	2a01      	cmp	r2, #1
 800419e:	6123      	str	r3, [r4, #16]
 80041a0:	dc02      	bgt.n	80041a8 <_printf_float+0x148>
 80041a2:	6822      	ldr	r2, [r4, #0]
 80041a4:	07d1      	lsls	r1, r2, #31
 80041a6:	d501      	bpl.n	80041ac <_printf_float+0x14c>
 80041a8:	3301      	adds	r3, #1
 80041aa:	6123      	str	r3, [r4, #16]
 80041ac:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0a2      	beq.n	80040fa <_printf_float+0x9a>
 80041b4:	232d      	movs	r3, #45	; 0x2d
 80041b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ba:	e79e      	b.n	80040fa <_printf_float+0x9a>
 80041bc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80041c0:	f000 816e 	beq.w	80044a0 <_printf_float+0x440>
 80041c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80041c8:	d1b9      	bne.n	800413e <_printf_float+0xde>
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1b7      	bne.n	800413e <_printf_float+0xde>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e7b4      	b.n	800413c <_printf_float+0xdc>
 80041d2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80041d6:	d119      	bne.n	800420c <_printf_float+0x1ac>
 80041d8:	2900      	cmp	r1, #0
 80041da:	6863      	ldr	r3, [r4, #4]
 80041dc:	dd0c      	ble.n	80041f8 <_printf_float+0x198>
 80041de:	6121      	str	r1, [r4, #16]
 80041e0:	b913      	cbnz	r3, 80041e8 <_printf_float+0x188>
 80041e2:	6822      	ldr	r2, [r4, #0]
 80041e4:	07d2      	lsls	r2, r2, #31
 80041e6:	d502      	bpl.n	80041ee <_printf_float+0x18e>
 80041e8:	3301      	adds	r3, #1
 80041ea:	440b      	add	r3, r1
 80041ec:	6123      	str	r3, [r4, #16]
 80041ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041f0:	f04f 0900 	mov.w	r9, #0
 80041f4:	65a3      	str	r3, [r4, #88]	; 0x58
 80041f6:	e7d9      	b.n	80041ac <_printf_float+0x14c>
 80041f8:	b913      	cbnz	r3, 8004200 <_printf_float+0x1a0>
 80041fa:	6822      	ldr	r2, [r4, #0]
 80041fc:	07d0      	lsls	r0, r2, #31
 80041fe:	d501      	bpl.n	8004204 <_printf_float+0x1a4>
 8004200:	3302      	adds	r3, #2
 8004202:	e7f3      	b.n	80041ec <_printf_float+0x18c>
 8004204:	2301      	movs	r3, #1
 8004206:	e7f1      	b.n	80041ec <_printf_float+0x18c>
 8004208:	f04f 0867 	mov.w	r8, #103	; 0x67
 800420c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004210:	4293      	cmp	r3, r2
 8004212:	db05      	blt.n	8004220 <_printf_float+0x1c0>
 8004214:	6822      	ldr	r2, [r4, #0]
 8004216:	6123      	str	r3, [r4, #16]
 8004218:	07d1      	lsls	r1, r2, #31
 800421a:	d5e8      	bpl.n	80041ee <_printf_float+0x18e>
 800421c:	3301      	adds	r3, #1
 800421e:	e7e5      	b.n	80041ec <_printf_float+0x18c>
 8004220:	2b00      	cmp	r3, #0
 8004222:	bfcc      	ite	gt
 8004224:	2301      	movgt	r3, #1
 8004226:	f1c3 0302 	rsble	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	e7de      	b.n	80041ec <_printf_float+0x18c>
 800422e:	6823      	ldr	r3, [r4, #0]
 8004230:	055a      	lsls	r2, r3, #21
 8004232:	d407      	bmi.n	8004244 <_printf_float+0x1e4>
 8004234:	6923      	ldr	r3, [r4, #16]
 8004236:	463a      	mov	r2, r7
 8004238:	4659      	mov	r1, fp
 800423a:	4628      	mov	r0, r5
 800423c:	47b0      	blx	r6
 800423e:	3001      	adds	r0, #1
 8004240:	d129      	bne.n	8004296 <_printf_float+0x236>
 8004242:	e764      	b.n	800410e <_printf_float+0xae>
 8004244:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004248:	f240 80d7 	bls.w	80043fa <_printf_float+0x39a>
 800424c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004250:	2200      	movs	r2, #0
 8004252:	2300      	movs	r3, #0
 8004254:	f7fc fba8 	bl	80009a8 <__aeabi_dcmpeq>
 8004258:	b388      	cbz	r0, 80042be <_printf_float+0x25e>
 800425a:	2301      	movs	r3, #1
 800425c:	4a40      	ldr	r2, [pc, #256]	; (8004360 <_printf_float+0x300>)
 800425e:	4659      	mov	r1, fp
 8004260:	4628      	mov	r0, r5
 8004262:	47b0      	blx	r6
 8004264:	3001      	adds	r0, #1
 8004266:	f43f af52 	beq.w	800410e <_printf_float+0xae>
 800426a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800426e:	429a      	cmp	r2, r3
 8004270:	db02      	blt.n	8004278 <_printf_float+0x218>
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	07d8      	lsls	r0, r3, #31
 8004276:	d50e      	bpl.n	8004296 <_printf_float+0x236>
 8004278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800427c:	4659      	mov	r1, fp
 800427e:	4628      	mov	r0, r5
 8004280:	47b0      	blx	r6
 8004282:	3001      	adds	r0, #1
 8004284:	f43f af43 	beq.w	800410e <_printf_float+0xae>
 8004288:	2700      	movs	r7, #0
 800428a:	f104 081a 	add.w	r8, r4, #26
 800428e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004290:	3b01      	subs	r3, #1
 8004292:	42bb      	cmp	r3, r7
 8004294:	dc09      	bgt.n	80042aa <_printf_float+0x24a>
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	079f      	lsls	r7, r3, #30
 800429a:	f100 80fd 	bmi.w	8004498 <_printf_float+0x438>
 800429e:	68e0      	ldr	r0, [r4, #12]
 80042a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042a2:	4298      	cmp	r0, r3
 80042a4:	bfb8      	it	lt
 80042a6:	4618      	movlt	r0, r3
 80042a8:	e733      	b.n	8004112 <_printf_float+0xb2>
 80042aa:	2301      	movs	r3, #1
 80042ac:	4642      	mov	r2, r8
 80042ae:	4659      	mov	r1, fp
 80042b0:	4628      	mov	r0, r5
 80042b2:	47b0      	blx	r6
 80042b4:	3001      	adds	r0, #1
 80042b6:	f43f af2a 	beq.w	800410e <_printf_float+0xae>
 80042ba:	3701      	adds	r7, #1
 80042bc:	e7e7      	b.n	800428e <_printf_float+0x22e>
 80042be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	dc2b      	bgt.n	800431c <_printf_float+0x2bc>
 80042c4:	2301      	movs	r3, #1
 80042c6:	4a26      	ldr	r2, [pc, #152]	; (8004360 <_printf_float+0x300>)
 80042c8:	4659      	mov	r1, fp
 80042ca:	4628      	mov	r0, r5
 80042cc:	47b0      	blx	r6
 80042ce:	3001      	adds	r0, #1
 80042d0:	f43f af1d 	beq.w	800410e <_printf_float+0xae>
 80042d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042d6:	b923      	cbnz	r3, 80042e2 <_printf_float+0x282>
 80042d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042da:	b913      	cbnz	r3, 80042e2 <_printf_float+0x282>
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	07d9      	lsls	r1, r3, #31
 80042e0:	d5d9      	bpl.n	8004296 <_printf_float+0x236>
 80042e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042e6:	4659      	mov	r1, fp
 80042e8:	4628      	mov	r0, r5
 80042ea:	47b0      	blx	r6
 80042ec:	3001      	adds	r0, #1
 80042ee:	f43f af0e 	beq.w	800410e <_printf_float+0xae>
 80042f2:	f04f 0800 	mov.w	r8, #0
 80042f6:	f104 091a 	add.w	r9, r4, #26
 80042fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042fc:	425b      	negs	r3, r3
 80042fe:	4543      	cmp	r3, r8
 8004300:	dc01      	bgt.n	8004306 <_printf_float+0x2a6>
 8004302:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004304:	e797      	b.n	8004236 <_printf_float+0x1d6>
 8004306:	2301      	movs	r3, #1
 8004308:	464a      	mov	r2, r9
 800430a:	4659      	mov	r1, fp
 800430c:	4628      	mov	r0, r5
 800430e:	47b0      	blx	r6
 8004310:	3001      	adds	r0, #1
 8004312:	f43f aefc 	beq.w	800410e <_printf_float+0xae>
 8004316:	f108 0801 	add.w	r8, r8, #1
 800431a:	e7ee      	b.n	80042fa <_printf_float+0x29a>
 800431c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800431e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004320:	429a      	cmp	r2, r3
 8004322:	bfa8      	it	ge
 8004324:	461a      	movge	r2, r3
 8004326:	2a00      	cmp	r2, #0
 8004328:	4690      	mov	r8, r2
 800432a:	dd07      	ble.n	800433c <_printf_float+0x2dc>
 800432c:	4613      	mov	r3, r2
 800432e:	4659      	mov	r1, fp
 8004330:	463a      	mov	r2, r7
 8004332:	4628      	mov	r0, r5
 8004334:	47b0      	blx	r6
 8004336:	3001      	adds	r0, #1
 8004338:	f43f aee9 	beq.w	800410e <_printf_float+0xae>
 800433c:	f104 031a 	add.w	r3, r4, #26
 8004340:	f04f 0a00 	mov.w	sl, #0
 8004344:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004348:	930b      	str	r3, [sp, #44]	; 0x2c
 800434a:	e015      	b.n	8004378 <_printf_float+0x318>
 800434c:	7fefffff 	.word	0x7fefffff
 8004350:	08007288 	.word	0x08007288
 8004354:	08007284 	.word	0x08007284
 8004358:	08007290 	.word	0x08007290
 800435c:	0800728c 	.word	0x0800728c
 8004360:	08007294 	.word	0x08007294
 8004364:	2301      	movs	r3, #1
 8004366:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004368:	4659      	mov	r1, fp
 800436a:	4628      	mov	r0, r5
 800436c:	47b0      	blx	r6
 800436e:	3001      	adds	r0, #1
 8004370:	f43f aecd 	beq.w	800410e <_printf_float+0xae>
 8004374:	f10a 0a01 	add.w	sl, sl, #1
 8004378:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800437c:	eba9 0308 	sub.w	r3, r9, r8
 8004380:	4553      	cmp	r3, sl
 8004382:	dcef      	bgt.n	8004364 <_printf_float+0x304>
 8004384:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004388:	429a      	cmp	r2, r3
 800438a:	444f      	add	r7, r9
 800438c:	db14      	blt.n	80043b8 <_printf_float+0x358>
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	07da      	lsls	r2, r3, #31
 8004392:	d411      	bmi.n	80043b8 <_printf_float+0x358>
 8004394:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004396:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004398:	eba3 0209 	sub.w	r2, r3, r9
 800439c:	eba3 0901 	sub.w	r9, r3, r1
 80043a0:	4591      	cmp	r9, r2
 80043a2:	bfa8      	it	ge
 80043a4:	4691      	movge	r9, r2
 80043a6:	f1b9 0f00 	cmp.w	r9, #0
 80043aa:	dc0d      	bgt.n	80043c8 <_printf_float+0x368>
 80043ac:	2700      	movs	r7, #0
 80043ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043b2:	f104 081a 	add.w	r8, r4, #26
 80043b6:	e018      	b.n	80043ea <_printf_float+0x38a>
 80043b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043bc:	4659      	mov	r1, fp
 80043be:	4628      	mov	r0, r5
 80043c0:	47b0      	blx	r6
 80043c2:	3001      	adds	r0, #1
 80043c4:	d1e6      	bne.n	8004394 <_printf_float+0x334>
 80043c6:	e6a2      	b.n	800410e <_printf_float+0xae>
 80043c8:	464b      	mov	r3, r9
 80043ca:	463a      	mov	r2, r7
 80043cc:	4659      	mov	r1, fp
 80043ce:	4628      	mov	r0, r5
 80043d0:	47b0      	blx	r6
 80043d2:	3001      	adds	r0, #1
 80043d4:	d1ea      	bne.n	80043ac <_printf_float+0x34c>
 80043d6:	e69a      	b.n	800410e <_printf_float+0xae>
 80043d8:	2301      	movs	r3, #1
 80043da:	4642      	mov	r2, r8
 80043dc:	4659      	mov	r1, fp
 80043de:	4628      	mov	r0, r5
 80043e0:	47b0      	blx	r6
 80043e2:	3001      	adds	r0, #1
 80043e4:	f43f ae93 	beq.w	800410e <_printf_float+0xae>
 80043e8:	3701      	adds	r7, #1
 80043ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043ee:	1a9b      	subs	r3, r3, r2
 80043f0:	eba3 0309 	sub.w	r3, r3, r9
 80043f4:	42bb      	cmp	r3, r7
 80043f6:	dcef      	bgt.n	80043d8 <_printf_float+0x378>
 80043f8:	e74d      	b.n	8004296 <_printf_float+0x236>
 80043fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043fc:	2a01      	cmp	r2, #1
 80043fe:	dc01      	bgt.n	8004404 <_printf_float+0x3a4>
 8004400:	07db      	lsls	r3, r3, #31
 8004402:	d538      	bpl.n	8004476 <_printf_float+0x416>
 8004404:	2301      	movs	r3, #1
 8004406:	463a      	mov	r2, r7
 8004408:	4659      	mov	r1, fp
 800440a:	4628      	mov	r0, r5
 800440c:	47b0      	blx	r6
 800440e:	3001      	adds	r0, #1
 8004410:	f43f ae7d 	beq.w	800410e <_printf_float+0xae>
 8004414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004418:	4659      	mov	r1, fp
 800441a:	4628      	mov	r0, r5
 800441c:	47b0      	blx	r6
 800441e:	3001      	adds	r0, #1
 8004420:	f107 0701 	add.w	r7, r7, #1
 8004424:	f43f ae73 	beq.w	800410e <_printf_float+0xae>
 8004428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800442c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800442e:	2200      	movs	r2, #0
 8004430:	f103 38ff 	add.w	r8, r3, #4294967295
 8004434:	2300      	movs	r3, #0
 8004436:	f7fc fab7 	bl	80009a8 <__aeabi_dcmpeq>
 800443a:	b9c0      	cbnz	r0, 800446e <_printf_float+0x40e>
 800443c:	4643      	mov	r3, r8
 800443e:	463a      	mov	r2, r7
 8004440:	4659      	mov	r1, fp
 8004442:	4628      	mov	r0, r5
 8004444:	47b0      	blx	r6
 8004446:	3001      	adds	r0, #1
 8004448:	d10d      	bne.n	8004466 <_printf_float+0x406>
 800444a:	e660      	b.n	800410e <_printf_float+0xae>
 800444c:	2301      	movs	r3, #1
 800444e:	4642      	mov	r2, r8
 8004450:	4659      	mov	r1, fp
 8004452:	4628      	mov	r0, r5
 8004454:	47b0      	blx	r6
 8004456:	3001      	adds	r0, #1
 8004458:	f43f ae59 	beq.w	800410e <_printf_float+0xae>
 800445c:	3701      	adds	r7, #1
 800445e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004460:	3b01      	subs	r3, #1
 8004462:	42bb      	cmp	r3, r7
 8004464:	dcf2      	bgt.n	800444c <_printf_float+0x3ec>
 8004466:	464b      	mov	r3, r9
 8004468:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800446c:	e6e4      	b.n	8004238 <_printf_float+0x1d8>
 800446e:	2700      	movs	r7, #0
 8004470:	f104 081a 	add.w	r8, r4, #26
 8004474:	e7f3      	b.n	800445e <_printf_float+0x3fe>
 8004476:	2301      	movs	r3, #1
 8004478:	e7e1      	b.n	800443e <_printf_float+0x3de>
 800447a:	2301      	movs	r3, #1
 800447c:	4642      	mov	r2, r8
 800447e:	4659      	mov	r1, fp
 8004480:	4628      	mov	r0, r5
 8004482:	47b0      	blx	r6
 8004484:	3001      	adds	r0, #1
 8004486:	f43f ae42 	beq.w	800410e <_printf_float+0xae>
 800448a:	3701      	adds	r7, #1
 800448c:	68e3      	ldr	r3, [r4, #12]
 800448e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004490:	1a9b      	subs	r3, r3, r2
 8004492:	42bb      	cmp	r3, r7
 8004494:	dcf1      	bgt.n	800447a <_printf_float+0x41a>
 8004496:	e702      	b.n	800429e <_printf_float+0x23e>
 8004498:	2700      	movs	r7, #0
 800449a:	f104 0819 	add.w	r8, r4, #25
 800449e:	e7f5      	b.n	800448c <_printf_float+0x42c>
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f43f ae94 	beq.w	80041ce <_printf_float+0x16e>
 80044a6:	f04f 0c00 	mov.w	ip, #0
 80044aa:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80044ae:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80044b2:	6022      	str	r2, [r4, #0]
 80044b4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80044b8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	463a      	mov	r2, r7
 80044c0:	464b      	mov	r3, r9
 80044c2:	4628      	mov	r0, r5
 80044c4:	f7ff fd3b 	bl	8003f3e <__cvt>
 80044c8:	4607      	mov	r7, r0
 80044ca:	e64f      	b.n	800416c <_printf_float+0x10c>

080044cc <_printf_common>:
 80044cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d0:	4691      	mov	r9, r2
 80044d2:	461f      	mov	r7, r3
 80044d4:	688a      	ldr	r2, [r1, #8]
 80044d6:	690b      	ldr	r3, [r1, #16]
 80044d8:	4606      	mov	r6, r0
 80044da:	4293      	cmp	r3, r2
 80044dc:	bfb8      	it	lt
 80044de:	4613      	movlt	r3, r2
 80044e0:	f8c9 3000 	str.w	r3, [r9]
 80044e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044e8:	460c      	mov	r4, r1
 80044ea:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044ee:	b112      	cbz	r2, 80044f6 <_printf_common+0x2a>
 80044f0:	3301      	adds	r3, #1
 80044f2:	f8c9 3000 	str.w	r3, [r9]
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	0699      	lsls	r1, r3, #26
 80044fa:	bf42      	ittt	mi
 80044fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004500:	3302      	addmi	r3, #2
 8004502:	f8c9 3000 	strmi.w	r3, [r9]
 8004506:	6825      	ldr	r5, [r4, #0]
 8004508:	f015 0506 	ands.w	r5, r5, #6
 800450c:	d107      	bne.n	800451e <_printf_common+0x52>
 800450e:	f104 0a19 	add.w	sl, r4, #25
 8004512:	68e3      	ldr	r3, [r4, #12]
 8004514:	f8d9 2000 	ldr.w	r2, [r9]
 8004518:	1a9b      	subs	r3, r3, r2
 800451a:	42ab      	cmp	r3, r5
 800451c:	dc29      	bgt.n	8004572 <_printf_common+0xa6>
 800451e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004522:	6822      	ldr	r2, [r4, #0]
 8004524:	3300      	adds	r3, #0
 8004526:	bf18      	it	ne
 8004528:	2301      	movne	r3, #1
 800452a:	0692      	lsls	r2, r2, #26
 800452c:	d42e      	bmi.n	800458c <_printf_common+0xc0>
 800452e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004532:	4639      	mov	r1, r7
 8004534:	4630      	mov	r0, r6
 8004536:	47c0      	blx	r8
 8004538:	3001      	adds	r0, #1
 800453a:	d021      	beq.n	8004580 <_printf_common+0xb4>
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	68e5      	ldr	r5, [r4, #12]
 8004540:	f003 0306 	and.w	r3, r3, #6
 8004544:	2b04      	cmp	r3, #4
 8004546:	bf18      	it	ne
 8004548:	2500      	movne	r5, #0
 800454a:	f8d9 2000 	ldr.w	r2, [r9]
 800454e:	f04f 0900 	mov.w	r9, #0
 8004552:	bf08      	it	eq
 8004554:	1aad      	subeq	r5, r5, r2
 8004556:	68a3      	ldr	r3, [r4, #8]
 8004558:	6922      	ldr	r2, [r4, #16]
 800455a:	bf08      	it	eq
 800455c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004560:	4293      	cmp	r3, r2
 8004562:	bfc4      	itt	gt
 8004564:	1a9b      	subgt	r3, r3, r2
 8004566:	18ed      	addgt	r5, r5, r3
 8004568:	341a      	adds	r4, #26
 800456a:	454d      	cmp	r5, r9
 800456c:	d11a      	bne.n	80045a4 <_printf_common+0xd8>
 800456e:	2000      	movs	r0, #0
 8004570:	e008      	b.n	8004584 <_printf_common+0xb8>
 8004572:	2301      	movs	r3, #1
 8004574:	4652      	mov	r2, sl
 8004576:	4639      	mov	r1, r7
 8004578:	4630      	mov	r0, r6
 800457a:	47c0      	blx	r8
 800457c:	3001      	adds	r0, #1
 800457e:	d103      	bne.n	8004588 <_printf_common+0xbc>
 8004580:	f04f 30ff 	mov.w	r0, #4294967295
 8004584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004588:	3501      	adds	r5, #1
 800458a:	e7c2      	b.n	8004512 <_printf_common+0x46>
 800458c:	2030      	movs	r0, #48	; 0x30
 800458e:	18e1      	adds	r1, r4, r3
 8004590:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800459a:	4422      	add	r2, r4
 800459c:	3302      	adds	r3, #2
 800459e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045a2:	e7c4      	b.n	800452e <_printf_common+0x62>
 80045a4:	2301      	movs	r3, #1
 80045a6:	4622      	mov	r2, r4
 80045a8:	4639      	mov	r1, r7
 80045aa:	4630      	mov	r0, r6
 80045ac:	47c0      	blx	r8
 80045ae:	3001      	adds	r0, #1
 80045b0:	d0e6      	beq.n	8004580 <_printf_common+0xb4>
 80045b2:	f109 0901 	add.w	r9, r9, #1
 80045b6:	e7d8      	b.n	800456a <_printf_common+0x9e>

080045b8 <_printf_i>:
 80045b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80045c0:	460c      	mov	r4, r1
 80045c2:	7e09      	ldrb	r1, [r1, #24]
 80045c4:	b085      	sub	sp, #20
 80045c6:	296e      	cmp	r1, #110	; 0x6e
 80045c8:	4617      	mov	r7, r2
 80045ca:	4606      	mov	r6, r0
 80045cc:	4698      	mov	r8, r3
 80045ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045d0:	f000 80b3 	beq.w	800473a <_printf_i+0x182>
 80045d4:	d822      	bhi.n	800461c <_printf_i+0x64>
 80045d6:	2963      	cmp	r1, #99	; 0x63
 80045d8:	d036      	beq.n	8004648 <_printf_i+0x90>
 80045da:	d80a      	bhi.n	80045f2 <_printf_i+0x3a>
 80045dc:	2900      	cmp	r1, #0
 80045de:	f000 80b9 	beq.w	8004754 <_printf_i+0x19c>
 80045e2:	2958      	cmp	r1, #88	; 0x58
 80045e4:	f000 8083 	beq.w	80046ee <_printf_i+0x136>
 80045e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80045f0:	e032      	b.n	8004658 <_printf_i+0xa0>
 80045f2:	2964      	cmp	r1, #100	; 0x64
 80045f4:	d001      	beq.n	80045fa <_printf_i+0x42>
 80045f6:	2969      	cmp	r1, #105	; 0x69
 80045f8:	d1f6      	bne.n	80045e8 <_printf_i+0x30>
 80045fa:	6820      	ldr	r0, [r4, #0]
 80045fc:	6813      	ldr	r3, [r2, #0]
 80045fe:	0605      	lsls	r5, r0, #24
 8004600:	f103 0104 	add.w	r1, r3, #4
 8004604:	d52a      	bpl.n	800465c <_printf_i+0xa4>
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6011      	str	r1, [r2, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	da03      	bge.n	8004616 <_printf_i+0x5e>
 800460e:	222d      	movs	r2, #45	; 0x2d
 8004610:	425b      	negs	r3, r3
 8004612:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004616:	486f      	ldr	r0, [pc, #444]	; (80047d4 <_printf_i+0x21c>)
 8004618:	220a      	movs	r2, #10
 800461a:	e039      	b.n	8004690 <_printf_i+0xd8>
 800461c:	2973      	cmp	r1, #115	; 0x73
 800461e:	f000 809d 	beq.w	800475c <_printf_i+0x1a4>
 8004622:	d808      	bhi.n	8004636 <_printf_i+0x7e>
 8004624:	296f      	cmp	r1, #111	; 0x6f
 8004626:	d020      	beq.n	800466a <_printf_i+0xb2>
 8004628:	2970      	cmp	r1, #112	; 0x70
 800462a:	d1dd      	bne.n	80045e8 <_printf_i+0x30>
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	f043 0320 	orr.w	r3, r3, #32
 8004632:	6023      	str	r3, [r4, #0]
 8004634:	e003      	b.n	800463e <_printf_i+0x86>
 8004636:	2975      	cmp	r1, #117	; 0x75
 8004638:	d017      	beq.n	800466a <_printf_i+0xb2>
 800463a:	2978      	cmp	r1, #120	; 0x78
 800463c:	d1d4      	bne.n	80045e8 <_printf_i+0x30>
 800463e:	2378      	movs	r3, #120	; 0x78
 8004640:	4865      	ldr	r0, [pc, #404]	; (80047d8 <_printf_i+0x220>)
 8004642:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004646:	e055      	b.n	80046f4 <_printf_i+0x13c>
 8004648:	6813      	ldr	r3, [r2, #0]
 800464a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800464e:	1d19      	adds	r1, r3, #4
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6011      	str	r1, [r2, #0]
 8004654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004658:	2301      	movs	r3, #1
 800465a:	e08c      	b.n	8004776 <_printf_i+0x1be>
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004662:	6011      	str	r1, [r2, #0]
 8004664:	bf18      	it	ne
 8004666:	b21b      	sxthne	r3, r3
 8004668:	e7cf      	b.n	800460a <_printf_i+0x52>
 800466a:	6813      	ldr	r3, [r2, #0]
 800466c:	6825      	ldr	r5, [r4, #0]
 800466e:	1d18      	adds	r0, r3, #4
 8004670:	6010      	str	r0, [r2, #0]
 8004672:	0628      	lsls	r0, r5, #24
 8004674:	d501      	bpl.n	800467a <_printf_i+0xc2>
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	e002      	b.n	8004680 <_printf_i+0xc8>
 800467a:	0668      	lsls	r0, r5, #25
 800467c:	d5fb      	bpl.n	8004676 <_printf_i+0xbe>
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	296f      	cmp	r1, #111	; 0x6f
 8004682:	bf14      	ite	ne
 8004684:	220a      	movne	r2, #10
 8004686:	2208      	moveq	r2, #8
 8004688:	4852      	ldr	r0, [pc, #328]	; (80047d4 <_printf_i+0x21c>)
 800468a:	2100      	movs	r1, #0
 800468c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004690:	6865      	ldr	r5, [r4, #4]
 8004692:	2d00      	cmp	r5, #0
 8004694:	60a5      	str	r5, [r4, #8]
 8004696:	f2c0 8095 	blt.w	80047c4 <_printf_i+0x20c>
 800469a:	6821      	ldr	r1, [r4, #0]
 800469c:	f021 0104 	bic.w	r1, r1, #4
 80046a0:	6021      	str	r1, [r4, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d13d      	bne.n	8004722 <_printf_i+0x16a>
 80046a6:	2d00      	cmp	r5, #0
 80046a8:	f040 808e 	bne.w	80047c8 <_printf_i+0x210>
 80046ac:	4665      	mov	r5, ip
 80046ae:	2a08      	cmp	r2, #8
 80046b0:	d10b      	bne.n	80046ca <_printf_i+0x112>
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	07db      	lsls	r3, r3, #31
 80046b6:	d508      	bpl.n	80046ca <_printf_i+0x112>
 80046b8:	6923      	ldr	r3, [r4, #16]
 80046ba:	6862      	ldr	r2, [r4, #4]
 80046bc:	429a      	cmp	r2, r3
 80046be:	bfde      	ittt	le
 80046c0:	2330      	movle	r3, #48	; 0x30
 80046c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046ca:	ebac 0305 	sub.w	r3, ip, r5
 80046ce:	6123      	str	r3, [r4, #16]
 80046d0:	f8cd 8000 	str.w	r8, [sp]
 80046d4:	463b      	mov	r3, r7
 80046d6:	aa03      	add	r2, sp, #12
 80046d8:	4621      	mov	r1, r4
 80046da:	4630      	mov	r0, r6
 80046dc:	f7ff fef6 	bl	80044cc <_printf_common>
 80046e0:	3001      	adds	r0, #1
 80046e2:	d14d      	bne.n	8004780 <_printf_i+0x1c8>
 80046e4:	f04f 30ff 	mov.w	r0, #4294967295
 80046e8:	b005      	add	sp, #20
 80046ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046ee:	4839      	ldr	r0, [pc, #228]	; (80047d4 <_printf_i+0x21c>)
 80046f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80046f4:	6813      	ldr	r3, [r2, #0]
 80046f6:	6821      	ldr	r1, [r4, #0]
 80046f8:	1d1d      	adds	r5, r3, #4
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6015      	str	r5, [r2, #0]
 80046fe:	060a      	lsls	r2, r1, #24
 8004700:	d50b      	bpl.n	800471a <_printf_i+0x162>
 8004702:	07ca      	lsls	r2, r1, #31
 8004704:	bf44      	itt	mi
 8004706:	f041 0120 	orrmi.w	r1, r1, #32
 800470a:	6021      	strmi	r1, [r4, #0]
 800470c:	b91b      	cbnz	r3, 8004716 <_printf_i+0x15e>
 800470e:	6822      	ldr	r2, [r4, #0]
 8004710:	f022 0220 	bic.w	r2, r2, #32
 8004714:	6022      	str	r2, [r4, #0]
 8004716:	2210      	movs	r2, #16
 8004718:	e7b7      	b.n	800468a <_printf_i+0xd2>
 800471a:	064d      	lsls	r5, r1, #25
 800471c:	bf48      	it	mi
 800471e:	b29b      	uxthmi	r3, r3
 8004720:	e7ef      	b.n	8004702 <_printf_i+0x14a>
 8004722:	4665      	mov	r5, ip
 8004724:	fbb3 f1f2 	udiv	r1, r3, r2
 8004728:	fb02 3311 	mls	r3, r2, r1, r3
 800472c:	5cc3      	ldrb	r3, [r0, r3]
 800472e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004732:	460b      	mov	r3, r1
 8004734:	2900      	cmp	r1, #0
 8004736:	d1f5      	bne.n	8004724 <_printf_i+0x16c>
 8004738:	e7b9      	b.n	80046ae <_printf_i+0xf6>
 800473a:	6813      	ldr	r3, [r2, #0]
 800473c:	6825      	ldr	r5, [r4, #0]
 800473e:	1d18      	adds	r0, r3, #4
 8004740:	6961      	ldr	r1, [r4, #20]
 8004742:	6010      	str	r0, [r2, #0]
 8004744:	0628      	lsls	r0, r5, #24
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	d501      	bpl.n	800474e <_printf_i+0x196>
 800474a:	6019      	str	r1, [r3, #0]
 800474c:	e002      	b.n	8004754 <_printf_i+0x19c>
 800474e:	066a      	lsls	r2, r5, #25
 8004750:	d5fb      	bpl.n	800474a <_printf_i+0x192>
 8004752:	8019      	strh	r1, [r3, #0]
 8004754:	2300      	movs	r3, #0
 8004756:	4665      	mov	r5, ip
 8004758:	6123      	str	r3, [r4, #16]
 800475a:	e7b9      	b.n	80046d0 <_printf_i+0x118>
 800475c:	6813      	ldr	r3, [r2, #0]
 800475e:	1d19      	adds	r1, r3, #4
 8004760:	6011      	str	r1, [r2, #0]
 8004762:	681d      	ldr	r5, [r3, #0]
 8004764:	6862      	ldr	r2, [r4, #4]
 8004766:	2100      	movs	r1, #0
 8004768:	4628      	mov	r0, r5
 800476a:	f000 ffe1 	bl	8005730 <memchr>
 800476e:	b108      	cbz	r0, 8004774 <_printf_i+0x1bc>
 8004770:	1b40      	subs	r0, r0, r5
 8004772:	6060      	str	r0, [r4, #4]
 8004774:	6863      	ldr	r3, [r4, #4]
 8004776:	6123      	str	r3, [r4, #16]
 8004778:	2300      	movs	r3, #0
 800477a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800477e:	e7a7      	b.n	80046d0 <_printf_i+0x118>
 8004780:	6923      	ldr	r3, [r4, #16]
 8004782:	462a      	mov	r2, r5
 8004784:	4639      	mov	r1, r7
 8004786:	4630      	mov	r0, r6
 8004788:	47c0      	blx	r8
 800478a:	3001      	adds	r0, #1
 800478c:	d0aa      	beq.n	80046e4 <_printf_i+0x12c>
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	079b      	lsls	r3, r3, #30
 8004792:	d413      	bmi.n	80047bc <_printf_i+0x204>
 8004794:	68e0      	ldr	r0, [r4, #12]
 8004796:	9b03      	ldr	r3, [sp, #12]
 8004798:	4298      	cmp	r0, r3
 800479a:	bfb8      	it	lt
 800479c:	4618      	movlt	r0, r3
 800479e:	e7a3      	b.n	80046e8 <_printf_i+0x130>
 80047a0:	2301      	movs	r3, #1
 80047a2:	464a      	mov	r2, r9
 80047a4:	4639      	mov	r1, r7
 80047a6:	4630      	mov	r0, r6
 80047a8:	47c0      	blx	r8
 80047aa:	3001      	adds	r0, #1
 80047ac:	d09a      	beq.n	80046e4 <_printf_i+0x12c>
 80047ae:	3501      	adds	r5, #1
 80047b0:	68e3      	ldr	r3, [r4, #12]
 80047b2:	9a03      	ldr	r2, [sp, #12]
 80047b4:	1a9b      	subs	r3, r3, r2
 80047b6:	42ab      	cmp	r3, r5
 80047b8:	dcf2      	bgt.n	80047a0 <_printf_i+0x1e8>
 80047ba:	e7eb      	b.n	8004794 <_printf_i+0x1dc>
 80047bc:	2500      	movs	r5, #0
 80047be:	f104 0919 	add.w	r9, r4, #25
 80047c2:	e7f5      	b.n	80047b0 <_printf_i+0x1f8>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1ac      	bne.n	8004722 <_printf_i+0x16a>
 80047c8:	7803      	ldrb	r3, [r0, #0]
 80047ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047d2:	e76c      	b.n	80046ae <_printf_i+0xf6>
 80047d4:	08007296 	.word	0x08007296
 80047d8:	080072a7 	.word	0x080072a7

080047dc <sniprintf>:
 80047dc:	b40c      	push	{r2, r3}
 80047de:	b530      	push	{r4, r5, lr}
 80047e0:	4b17      	ldr	r3, [pc, #92]	; (8004840 <sniprintf+0x64>)
 80047e2:	1e0c      	subs	r4, r1, #0
 80047e4:	b09d      	sub	sp, #116	; 0x74
 80047e6:	681d      	ldr	r5, [r3, #0]
 80047e8:	da08      	bge.n	80047fc <sniprintf+0x20>
 80047ea:	238b      	movs	r3, #139	; 0x8b
 80047ec:	f04f 30ff 	mov.w	r0, #4294967295
 80047f0:	602b      	str	r3, [r5, #0]
 80047f2:	b01d      	add	sp, #116	; 0x74
 80047f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047f8:	b002      	add	sp, #8
 80047fa:	4770      	bx	lr
 80047fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004800:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004804:	bf0c      	ite	eq
 8004806:	4623      	moveq	r3, r4
 8004808:	f104 33ff 	addne.w	r3, r4, #4294967295
 800480c:	9304      	str	r3, [sp, #16]
 800480e:	9307      	str	r3, [sp, #28]
 8004810:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004814:	9002      	str	r0, [sp, #8]
 8004816:	9006      	str	r0, [sp, #24]
 8004818:	f8ad 3016 	strh.w	r3, [sp, #22]
 800481c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800481e:	ab21      	add	r3, sp, #132	; 0x84
 8004820:	a902      	add	r1, sp, #8
 8004822:	4628      	mov	r0, r5
 8004824:	9301      	str	r3, [sp, #4]
 8004826:	f001 fb7b 	bl	8005f20 <_svfiprintf_r>
 800482a:	1c43      	adds	r3, r0, #1
 800482c:	bfbc      	itt	lt
 800482e:	238b      	movlt	r3, #139	; 0x8b
 8004830:	602b      	strlt	r3, [r5, #0]
 8004832:	2c00      	cmp	r4, #0
 8004834:	d0dd      	beq.n	80047f2 <sniprintf+0x16>
 8004836:	2200      	movs	r2, #0
 8004838:	9b02      	ldr	r3, [sp, #8]
 800483a:	701a      	strb	r2, [r3, #0]
 800483c:	e7d9      	b.n	80047f2 <sniprintf+0x16>
 800483e:	bf00      	nop
 8004840:	20000018 	.word	0x20000018

08004844 <siprintf>:
 8004844:	b40e      	push	{r1, r2, r3}
 8004846:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800484a:	b500      	push	{lr}
 800484c:	b09c      	sub	sp, #112	; 0x70
 800484e:	ab1d      	add	r3, sp, #116	; 0x74
 8004850:	9002      	str	r0, [sp, #8]
 8004852:	9006      	str	r0, [sp, #24]
 8004854:	9107      	str	r1, [sp, #28]
 8004856:	9104      	str	r1, [sp, #16]
 8004858:	4808      	ldr	r0, [pc, #32]	; (800487c <siprintf+0x38>)
 800485a:	4909      	ldr	r1, [pc, #36]	; (8004880 <siprintf+0x3c>)
 800485c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004860:	9105      	str	r1, [sp, #20]
 8004862:	6800      	ldr	r0, [r0, #0]
 8004864:	a902      	add	r1, sp, #8
 8004866:	9301      	str	r3, [sp, #4]
 8004868:	f001 fb5a 	bl	8005f20 <_svfiprintf_r>
 800486c:	2200      	movs	r2, #0
 800486e:	9b02      	ldr	r3, [sp, #8]
 8004870:	701a      	strb	r2, [r3, #0]
 8004872:	b01c      	add	sp, #112	; 0x70
 8004874:	f85d eb04 	ldr.w	lr, [sp], #4
 8004878:	b003      	add	sp, #12
 800487a:	4770      	bx	lr
 800487c:	20000018 	.word	0x20000018
 8004880:	ffff0208 	.word	0xffff0208

08004884 <strtok>:
 8004884:	4b13      	ldr	r3, [pc, #76]	; (80048d4 <strtok+0x50>)
 8004886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800488a:	681d      	ldr	r5, [r3, #0]
 800488c:	4606      	mov	r6, r0
 800488e:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8004890:	460f      	mov	r7, r1
 8004892:	b9b4      	cbnz	r4, 80048c2 <strtok+0x3e>
 8004894:	2050      	movs	r0, #80	; 0x50
 8004896:	f000 ff31 	bl	80056fc <malloc>
 800489a:	65a8      	str	r0, [r5, #88]	; 0x58
 800489c:	e9c0 4400 	strd	r4, r4, [r0]
 80048a0:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80048a4:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80048a8:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80048ac:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80048b0:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80048b4:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80048b8:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80048bc:	6184      	str	r4, [r0, #24]
 80048be:	7704      	strb	r4, [r0, #28]
 80048c0:	6244      	str	r4, [r0, #36]	; 0x24
 80048c2:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80048c4:	4639      	mov	r1, r7
 80048c6:	4630      	mov	r0, r6
 80048c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048cc:	2301      	movs	r3, #1
 80048ce:	f000 b803 	b.w	80048d8 <__strtok_r>
 80048d2:	bf00      	nop
 80048d4:	20000018 	.word	0x20000018

080048d8 <__strtok_r>:
 80048d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048da:	b918      	cbnz	r0, 80048e4 <__strtok_r+0xc>
 80048dc:	6810      	ldr	r0, [r2, #0]
 80048de:	b908      	cbnz	r0, 80048e4 <__strtok_r+0xc>
 80048e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048e2:	4620      	mov	r0, r4
 80048e4:	4604      	mov	r4, r0
 80048e6:	460f      	mov	r7, r1
 80048e8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80048ec:	f817 6b01 	ldrb.w	r6, [r7], #1
 80048f0:	b91e      	cbnz	r6, 80048fa <__strtok_r+0x22>
 80048f2:	b96d      	cbnz	r5, 8004910 <__strtok_r+0x38>
 80048f4:	6015      	str	r5, [r2, #0]
 80048f6:	4628      	mov	r0, r5
 80048f8:	e7f2      	b.n	80048e0 <__strtok_r+0x8>
 80048fa:	42b5      	cmp	r5, r6
 80048fc:	d1f6      	bne.n	80048ec <__strtok_r+0x14>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1ef      	bne.n	80048e2 <__strtok_r+0xa>
 8004902:	6014      	str	r4, [r2, #0]
 8004904:	7003      	strb	r3, [r0, #0]
 8004906:	e7eb      	b.n	80048e0 <__strtok_r+0x8>
 8004908:	462b      	mov	r3, r5
 800490a:	e00d      	b.n	8004928 <__strtok_r+0x50>
 800490c:	b926      	cbnz	r6, 8004918 <__strtok_r+0x40>
 800490e:	461c      	mov	r4, r3
 8004910:	4623      	mov	r3, r4
 8004912:	460f      	mov	r7, r1
 8004914:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004918:	f817 6b01 	ldrb.w	r6, [r7], #1
 800491c:	42b5      	cmp	r5, r6
 800491e:	d1f5      	bne.n	800490c <__strtok_r+0x34>
 8004920:	2d00      	cmp	r5, #0
 8004922:	d0f1      	beq.n	8004908 <__strtok_r+0x30>
 8004924:	2100      	movs	r1, #0
 8004926:	7021      	strb	r1, [r4, #0]
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	e7d9      	b.n	80048e0 <__strtok_r+0x8>

0800492c <_strtol_l.isra.0>:
 800492c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004930:	4680      	mov	r8, r0
 8004932:	4689      	mov	r9, r1
 8004934:	4692      	mov	sl, r2
 8004936:	461e      	mov	r6, r3
 8004938:	460f      	mov	r7, r1
 800493a:	463d      	mov	r5, r7
 800493c:	9808      	ldr	r0, [sp, #32]
 800493e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004942:	f000 fec9 	bl	80056d8 <__locale_ctype_ptr_l>
 8004946:	4420      	add	r0, r4
 8004948:	7843      	ldrb	r3, [r0, #1]
 800494a:	f013 0308 	ands.w	r3, r3, #8
 800494e:	d132      	bne.n	80049b6 <_strtol_l.isra.0+0x8a>
 8004950:	2c2d      	cmp	r4, #45	; 0x2d
 8004952:	d132      	bne.n	80049ba <_strtol_l.isra.0+0x8e>
 8004954:	2201      	movs	r2, #1
 8004956:	787c      	ldrb	r4, [r7, #1]
 8004958:	1cbd      	adds	r5, r7, #2
 800495a:	2e00      	cmp	r6, #0
 800495c:	d05d      	beq.n	8004a1a <_strtol_l.isra.0+0xee>
 800495e:	2e10      	cmp	r6, #16
 8004960:	d109      	bne.n	8004976 <_strtol_l.isra.0+0x4a>
 8004962:	2c30      	cmp	r4, #48	; 0x30
 8004964:	d107      	bne.n	8004976 <_strtol_l.isra.0+0x4a>
 8004966:	782b      	ldrb	r3, [r5, #0]
 8004968:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800496c:	2b58      	cmp	r3, #88	; 0x58
 800496e:	d14f      	bne.n	8004a10 <_strtol_l.isra.0+0xe4>
 8004970:	2610      	movs	r6, #16
 8004972:	786c      	ldrb	r4, [r5, #1]
 8004974:	3502      	adds	r5, #2
 8004976:	2a00      	cmp	r2, #0
 8004978:	bf14      	ite	ne
 800497a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800497e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004982:	2700      	movs	r7, #0
 8004984:	fbb1 fcf6 	udiv	ip, r1, r6
 8004988:	4638      	mov	r0, r7
 800498a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800498e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004992:	2b09      	cmp	r3, #9
 8004994:	d817      	bhi.n	80049c6 <_strtol_l.isra.0+0x9a>
 8004996:	461c      	mov	r4, r3
 8004998:	42a6      	cmp	r6, r4
 800499a:	dd23      	ble.n	80049e4 <_strtol_l.isra.0+0xb8>
 800499c:	1c7b      	adds	r3, r7, #1
 800499e:	d007      	beq.n	80049b0 <_strtol_l.isra.0+0x84>
 80049a0:	4584      	cmp	ip, r0
 80049a2:	d31c      	bcc.n	80049de <_strtol_l.isra.0+0xb2>
 80049a4:	d101      	bne.n	80049aa <_strtol_l.isra.0+0x7e>
 80049a6:	45a6      	cmp	lr, r4
 80049a8:	db19      	blt.n	80049de <_strtol_l.isra.0+0xb2>
 80049aa:	2701      	movs	r7, #1
 80049ac:	fb00 4006 	mla	r0, r0, r6, r4
 80049b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80049b4:	e7eb      	b.n	800498e <_strtol_l.isra.0+0x62>
 80049b6:	462f      	mov	r7, r5
 80049b8:	e7bf      	b.n	800493a <_strtol_l.isra.0+0xe>
 80049ba:	2c2b      	cmp	r4, #43	; 0x2b
 80049bc:	bf04      	itt	eq
 80049be:	1cbd      	addeq	r5, r7, #2
 80049c0:	787c      	ldrbeq	r4, [r7, #1]
 80049c2:	461a      	mov	r2, r3
 80049c4:	e7c9      	b.n	800495a <_strtol_l.isra.0+0x2e>
 80049c6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80049ca:	2b19      	cmp	r3, #25
 80049cc:	d801      	bhi.n	80049d2 <_strtol_l.isra.0+0xa6>
 80049ce:	3c37      	subs	r4, #55	; 0x37
 80049d0:	e7e2      	b.n	8004998 <_strtol_l.isra.0+0x6c>
 80049d2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80049d6:	2b19      	cmp	r3, #25
 80049d8:	d804      	bhi.n	80049e4 <_strtol_l.isra.0+0xb8>
 80049da:	3c57      	subs	r4, #87	; 0x57
 80049dc:	e7dc      	b.n	8004998 <_strtol_l.isra.0+0x6c>
 80049de:	f04f 37ff 	mov.w	r7, #4294967295
 80049e2:	e7e5      	b.n	80049b0 <_strtol_l.isra.0+0x84>
 80049e4:	1c7b      	adds	r3, r7, #1
 80049e6:	d108      	bne.n	80049fa <_strtol_l.isra.0+0xce>
 80049e8:	2322      	movs	r3, #34	; 0x22
 80049ea:	4608      	mov	r0, r1
 80049ec:	f8c8 3000 	str.w	r3, [r8]
 80049f0:	f1ba 0f00 	cmp.w	sl, #0
 80049f4:	d107      	bne.n	8004a06 <_strtol_l.isra.0+0xda>
 80049f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049fa:	b102      	cbz	r2, 80049fe <_strtol_l.isra.0+0xd2>
 80049fc:	4240      	negs	r0, r0
 80049fe:	f1ba 0f00 	cmp.w	sl, #0
 8004a02:	d0f8      	beq.n	80049f6 <_strtol_l.isra.0+0xca>
 8004a04:	b10f      	cbz	r7, 8004a0a <_strtol_l.isra.0+0xde>
 8004a06:	f105 39ff 	add.w	r9, r5, #4294967295
 8004a0a:	f8ca 9000 	str.w	r9, [sl]
 8004a0e:	e7f2      	b.n	80049f6 <_strtol_l.isra.0+0xca>
 8004a10:	2430      	movs	r4, #48	; 0x30
 8004a12:	2e00      	cmp	r6, #0
 8004a14:	d1af      	bne.n	8004976 <_strtol_l.isra.0+0x4a>
 8004a16:	2608      	movs	r6, #8
 8004a18:	e7ad      	b.n	8004976 <_strtol_l.isra.0+0x4a>
 8004a1a:	2c30      	cmp	r4, #48	; 0x30
 8004a1c:	d0a3      	beq.n	8004966 <_strtol_l.isra.0+0x3a>
 8004a1e:	260a      	movs	r6, #10
 8004a20:	e7a9      	b.n	8004976 <_strtol_l.isra.0+0x4a>
	...

08004a24 <strtol>:
 8004a24:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <strtol+0x24>)
 8004a26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a28:	681c      	ldr	r4, [r3, #0]
 8004a2a:	4d08      	ldr	r5, [pc, #32]	; (8004a4c <strtol+0x28>)
 8004a2c:	6a23      	ldr	r3, [r4, #32]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	bf08      	it	eq
 8004a32:	462b      	moveq	r3, r5
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	4613      	mov	r3, r2
 8004a38:	460a      	mov	r2, r1
 8004a3a:	4601      	mov	r1, r0
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f7ff ff75 	bl	800492c <_strtol_l.isra.0>
 8004a42:	b003      	add	sp, #12
 8004a44:	bd30      	pop	{r4, r5, pc}
 8004a46:	bf00      	nop
 8004a48:	20000018 	.word	0x20000018
 8004a4c:	2000007c 	.word	0x2000007c

08004a50 <quorem>:
 8004a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a54:	6903      	ldr	r3, [r0, #16]
 8004a56:	690c      	ldr	r4, [r1, #16]
 8004a58:	4680      	mov	r8, r0
 8004a5a:	42a3      	cmp	r3, r4
 8004a5c:	f2c0 8084 	blt.w	8004b68 <quorem+0x118>
 8004a60:	3c01      	subs	r4, #1
 8004a62:	f101 0714 	add.w	r7, r1, #20
 8004a66:	f100 0614 	add.w	r6, r0, #20
 8004a6a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004a6e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004a72:	3501      	adds	r5, #1
 8004a74:	fbb0 f5f5 	udiv	r5, r0, r5
 8004a78:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004a7c:	eb06 030c 	add.w	r3, r6, ip
 8004a80:	eb07 090c 	add.w	r9, r7, ip
 8004a84:	9301      	str	r3, [sp, #4]
 8004a86:	b39d      	cbz	r5, 8004af0 <quorem+0xa0>
 8004a88:	f04f 0a00 	mov.w	sl, #0
 8004a8c:	4638      	mov	r0, r7
 8004a8e:	46b6      	mov	lr, r6
 8004a90:	46d3      	mov	fp, sl
 8004a92:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a96:	b293      	uxth	r3, r2
 8004a98:	fb05 a303 	mla	r3, r5, r3, sl
 8004a9c:	0c12      	lsrs	r2, r2, #16
 8004a9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004aa2:	fb05 a202 	mla	r2, r5, r2, sl
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	ebab 0303 	sub.w	r3, fp, r3
 8004aac:	f8de b000 	ldr.w	fp, [lr]
 8004ab0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004ab4:	fa1f fb8b 	uxth.w	fp, fp
 8004ab8:	445b      	add	r3, fp
 8004aba:	fa1f fb82 	uxth.w	fp, r2
 8004abe:	f8de 2000 	ldr.w	r2, [lr]
 8004ac2:	4581      	cmp	r9, r0
 8004ac4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004ac8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ad2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004ad6:	f84e 3b04 	str.w	r3, [lr], #4
 8004ada:	d2da      	bcs.n	8004a92 <quorem+0x42>
 8004adc:	f856 300c 	ldr.w	r3, [r6, ip]
 8004ae0:	b933      	cbnz	r3, 8004af0 <quorem+0xa0>
 8004ae2:	9b01      	ldr	r3, [sp, #4]
 8004ae4:	3b04      	subs	r3, #4
 8004ae6:	429e      	cmp	r6, r3
 8004ae8:	461a      	mov	r2, r3
 8004aea:	d331      	bcc.n	8004b50 <quorem+0x100>
 8004aec:	f8c8 4010 	str.w	r4, [r8, #16]
 8004af0:	4640      	mov	r0, r8
 8004af2:	f001 f83f 	bl	8005b74 <__mcmp>
 8004af6:	2800      	cmp	r0, #0
 8004af8:	db26      	blt.n	8004b48 <quorem+0xf8>
 8004afa:	4630      	mov	r0, r6
 8004afc:	f04f 0c00 	mov.w	ip, #0
 8004b00:	3501      	adds	r5, #1
 8004b02:	f857 1b04 	ldr.w	r1, [r7], #4
 8004b06:	f8d0 e000 	ldr.w	lr, [r0]
 8004b0a:	b28b      	uxth	r3, r1
 8004b0c:	ebac 0303 	sub.w	r3, ip, r3
 8004b10:	fa1f f28e 	uxth.w	r2, lr
 8004b14:	4413      	add	r3, r2
 8004b16:	0c0a      	lsrs	r2, r1, #16
 8004b18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004b1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b26:	45b9      	cmp	r9, r7
 8004b28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004b2c:	f840 3b04 	str.w	r3, [r0], #4
 8004b30:	d2e7      	bcs.n	8004b02 <quorem+0xb2>
 8004b32:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004b36:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004b3a:	b92a      	cbnz	r2, 8004b48 <quorem+0xf8>
 8004b3c:	3b04      	subs	r3, #4
 8004b3e:	429e      	cmp	r6, r3
 8004b40:	461a      	mov	r2, r3
 8004b42:	d30b      	bcc.n	8004b5c <quorem+0x10c>
 8004b44:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b48:	4628      	mov	r0, r5
 8004b4a:	b003      	add	sp, #12
 8004b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	3b04      	subs	r3, #4
 8004b54:	2a00      	cmp	r2, #0
 8004b56:	d1c9      	bne.n	8004aec <quorem+0x9c>
 8004b58:	3c01      	subs	r4, #1
 8004b5a:	e7c4      	b.n	8004ae6 <quorem+0x96>
 8004b5c:	6812      	ldr	r2, [r2, #0]
 8004b5e:	3b04      	subs	r3, #4
 8004b60:	2a00      	cmp	r2, #0
 8004b62:	d1ef      	bne.n	8004b44 <quorem+0xf4>
 8004b64:	3c01      	subs	r4, #1
 8004b66:	e7ea      	b.n	8004b3e <quorem+0xee>
 8004b68:	2000      	movs	r0, #0
 8004b6a:	e7ee      	b.n	8004b4a <quorem+0xfa>
 8004b6c:	0000      	movs	r0, r0
	...

08004b70 <_dtoa_r>:
 8004b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b74:	4616      	mov	r6, r2
 8004b76:	461f      	mov	r7, r3
 8004b78:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004b7a:	b095      	sub	sp, #84	; 0x54
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004b82:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004b86:	b93d      	cbnz	r5, 8004b98 <_dtoa_r+0x28>
 8004b88:	2010      	movs	r0, #16
 8004b8a:	f000 fdb7 	bl	80056fc <malloc>
 8004b8e:	6260      	str	r0, [r4, #36]	; 0x24
 8004b90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004b94:	6005      	str	r5, [r0, #0]
 8004b96:	60c5      	str	r5, [r0, #12]
 8004b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b9a:	6819      	ldr	r1, [r3, #0]
 8004b9c:	b151      	cbz	r1, 8004bb4 <_dtoa_r+0x44>
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	4093      	lsls	r3, r2
 8004ba4:	604a      	str	r2, [r1, #4]
 8004ba6:	608b      	str	r3, [r1, #8]
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f000 fe03 	bl	80057b4 <_Bfree>
 8004bae:	2200      	movs	r2, #0
 8004bb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	1e3b      	subs	r3, r7, #0
 8004bb6:	bfaf      	iteee	ge
 8004bb8:	2300      	movge	r3, #0
 8004bba:	2201      	movlt	r2, #1
 8004bbc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004bc0:	9303      	strlt	r3, [sp, #12]
 8004bc2:	bfac      	ite	ge
 8004bc4:	f8c8 3000 	strge.w	r3, [r8]
 8004bc8:	f8c8 2000 	strlt.w	r2, [r8]
 8004bcc:	4bae      	ldr	r3, [pc, #696]	; (8004e88 <_dtoa_r+0x318>)
 8004bce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004bd2:	ea33 0308 	bics.w	r3, r3, r8
 8004bd6:	d11b      	bne.n	8004c10 <_dtoa_r+0xa0>
 8004bd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004bdc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	9b02      	ldr	r3, [sp, #8]
 8004be2:	b923      	cbnz	r3, 8004bee <_dtoa_r+0x7e>
 8004be4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004be8:	2800      	cmp	r0, #0
 8004bea:	f000 8545 	beq.w	8005678 <_dtoa_r+0xb08>
 8004bee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bf0:	b953      	cbnz	r3, 8004c08 <_dtoa_r+0x98>
 8004bf2:	4ba6      	ldr	r3, [pc, #664]	; (8004e8c <_dtoa_r+0x31c>)
 8004bf4:	e021      	b.n	8004c3a <_dtoa_r+0xca>
 8004bf6:	4ba6      	ldr	r3, [pc, #664]	; (8004e90 <_dtoa_r+0x320>)
 8004bf8:	9306      	str	r3, [sp, #24]
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	9806      	ldr	r0, [sp, #24]
 8004c02:	b015      	add	sp, #84	; 0x54
 8004c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c08:	4ba0      	ldr	r3, [pc, #640]	; (8004e8c <_dtoa_r+0x31c>)
 8004c0a:	9306      	str	r3, [sp, #24]
 8004c0c:	3303      	adds	r3, #3
 8004c0e:	e7f5      	b.n	8004bfc <_dtoa_r+0x8c>
 8004c10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004c14:	2200      	movs	r2, #0
 8004c16:	2300      	movs	r3, #0
 8004c18:	4630      	mov	r0, r6
 8004c1a:	4639      	mov	r1, r7
 8004c1c:	f7fb fec4 	bl	80009a8 <__aeabi_dcmpeq>
 8004c20:	4682      	mov	sl, r0
 8004c22:	b160      	cbz	r0, 8004c3e <_dtoa_r+0xce>
 8004c24:	2301      	movs	r3, #1
 8004c26:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 8520 	beq.w	8005672 <_dtoa_r+0xb02>
 8004c32:	4b98      	ldr	r3, [pc, #608]	; (8004e94 <_dtoa_r+0x324>)
 8004c34:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	9306      	str	r3, [sp, #24]
 8004c3c:	e7e0      	b.n	8004c00 <_dtoa_r+0x90>
 8004c3e:	ab12      	add	r3, sp, #72	; 0x48
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	ab13      	add	r3, sp, #76	; 0x4c
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	4632      	mov	r2, r6
 8004c48:	463b      	mov	r3, r7
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f001 f80a 	bl	8005c64 <__d2b>
 8004c50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004c54:	4683      	mov	fp, r0
 8004c56:	2d00      	cmp	r5, #0
 8004c58:	d07d      	beq.n	8004d56 <_dtoa_r+0x1e6>
 8004c5a:	46b0      	mov	r8, r6
 8004c5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004c60:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004c64:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004c68:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004c6c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004c70:	2200      	movs	r2, #0
 8004c72:	4b89      	ldr	r3, [pc, #548]	; (8004e98 <_dtoa_r+0x328>)
 8004c74:	4640      	mov	r0, r8
 8004c76:	4649      	mov	r1, r9
 8004c78:	f7fb fa76 	bl	8000168 <__aeabi_dsub>
 8004c7c:	a37c      	add	r3, pc, #496	; (adr r3, 8004e70 <_dtoa_r+0x300>)
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f7fb fc29 	bl	80004d8 <__aeabi_dmul>
 8004c86:	a37c      	add	r3, pc, #496	; (adr r3, 8004e78 <_dtoa_r+0x308>)
 8004c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8c:	f7fb fa6e 	bl	800016c <__adddf3>
 8004c90:	4606      	mov	r6, r0
 8004c92:	4628      	mov	r0, r5
 8004c94:	460f      	mov	r7, r1
 8004c96:	f7fb fbb5 	bl	8000404 <__aeabi_i2d>
 8004c9a:	a379      	add	r3, pc, #484	; (adr r3, 8004e80 <_dtoa_r+0x310>)
 8004c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca0:	f7fb fc1a 	bl	80004d8 <__aeabi_dmul>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4630      	mov	r0, r6
 8004caa:	4639      	mov	r1, r7
 8004cac:	f7fb fa5e 	bl	800016c <__adddf3>
 8004cb0:	4606      	mov	r6, r0
 8004cb2:	460f      	mov	r7, r1
 8004cb4:	f7fb fec0 	bl	8000a38 <__aeabi_d2iz>
 8004cb8:	2200      	movs	r2, #0
 8004cba:	4682      	mov	sl, r0
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	4639      	mov	r1, r7
 8004cc2:	f7fb fe7b 	bl	80009bc <__aeabi_dcmplt>
 8004cc6:	b148      	cbz	r0, 8004cdc <_dtoa_r+0x16c>
 8004cc8:	4650      	mov	r0, sl
 8004cca:	f7fb fb9b 	bl	8000404 <__aeabi_i2d>
 8004cce:	4632      	mov	r2, r6
 8004cd0:	463b      	mov	r3, r7
 8004cd2:	f7fb fe69 	bl	80009a8 <__aeabi_dcmpeq>
 8004cd6:	b908      	cbnz	r0, 8004cdc <_dtoa_r+0x16c>
 8004cd8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cdc:	f1ba 0f16 	cmp.w	sl, #22
 8004ce0:	d85a      	bhi.n	8004d98 <_dtoa_r+0x228>
 8004ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ce6:	496d      	ldr	r1, [pc, #436]	; (8004e9c <_dtoa_r+0x32c>)
 8004ce8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cf0:	f7fb fe82 	bl	80009f8 <__aeabi_dcmpgt>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	d051      	beq.n	8004d9c <_dtoa_r+0x22c>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cfe:	930d      	str	r3, [sp, #52]	; 0x34
 8004d00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d02:	1b5d      	subs	r5, r3, r5
 8004d04:	1e6b      	subs	r3, r5, #1
 8004d06:	9307      	str	r3, [sp, #28]
 8004d08:	bf43      	ittte	mi
 8004d0a:	2300      	movmi	r3, #0
 8004d0c:	f1c5 0901 	rsbmi	r9, r5, #1
 8004d10:	9307      	strmi	r3, [sp, #28]
 8004d12:	f04f 0900 	movpl.w	r9, #0
 8004d16:	f1ba 0f00 	cmp.w	sl, #0
 8004d1a:	db41      	blt.n	8004da0 <_dtoa_r+0x230>
 8004d1c:	9b07      	ldr	r3, [sp, #28]
 8004d1e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004d22:	4453      	add	r3, sl
 8004d24:	9307      	str	r3, [sp, #28]
 8004d26:	2300      	movs	r3, #0
 8004d28:	9308      	str	r3, [sp, #32]
 8004d2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004d2c:	2b09      	cmp	r3, #9
 8004d2e:	f200 808f 	bhi.w	8004e50 <_dtoa_r+0x2e0>
 8004d32:	2b05      	cmp	r3, #5
 8004d34:	bfc4      	itt	gt
 8004d36:	3b04      	subgt	r3, #4
 8004d38:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004d3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004d3c:	bfc8      	it	gt
 8004d3e:	2500      	movgt	r5, #0
 8004d40:	f1a3 0302 	sub.w	r3, r3, #2
 8004d44:	bfd8      	it	le
 8004d46:	2501      	movle	r5, #1
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	f200 808d 	bhi.w	8004e68 <_dtoa_r+0x2f8>
 8004d4e:	e8df f003 	tbb	[pc, r3]
 8004d52:	7d7b      	.short	0x7d7b
 8004d54:	6f2f      	.short	0x6f2f
 8004d56:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004d5a:	441d      	add	r5, r3
 8004d5c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004d60:	2820      	cmp	r0, #32
 8004d62:	dd13      	ble.n	8004d8c <_dtoa_r+0x21c>
 8004d64:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004d68:	9b02      	ldr	r3, [sp, #8]
 8004d6a:	fa08 f800 	lsl.w	r8, r8, r0
 8004d6e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004d72:	fa23 f000 	lsr.w	r0, r3, r0
 8004d76:	ea48 0000 	orr.w	r0, r8, r0
 8004d7a:	f7fb fb33 	bl	80003e4 <__aeabi_ui2d>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	4680      	mov	r8, r0
 8004d82:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004d86:	3d01      	subs	r5, #1
 8004d88:	9310      	str	r3, [sp, #64]	; 0x40
 8004d8a:	e771      	b.n	8004c70 <_dtoa_r+0x100>
 8004d8c:	9b02      	ldr	r3, [sp, #8]
 8004d8e:	f1c0 0020 	rsb	r0, r0, #32
 8004d92:	fa03 f000 	lsl.w	r0, r3, r0
 8004d96:	e7f0      	b.n	8004d7a <_dtoa_r+0x20a>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e7b0      	b.n	8004cfe <_dtoa_r+0x18e>
 8004d9c:	900d      	str	r0, [sp, #52]	; 0x34
 8004d9e:	e7af      	b.n	8004d00 <_dtoa_r+0x190>
 8004da0:	f1ca 0300 	rsb	r3, sl, #0
 8004da4:	9308      	str	r3, [sp, #32]
 8004da6:	2300      	movs	r3, #0
 8004da8:	eba9 090a 	sub.w	r9, r9, sl
 8004dac:	930c      	str	r3, [sp, #48]	; 0x30
 8004dae:	e7bc      	b.n	8004d2a <_dtoa_r+0x1ba>
 8004db0:	2301      	movs	r3, #1
 8004db2:	9309      	str	r3, [sp, #36]	; 0x24
 8004db4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	dd74      	ble.n	8004ea4 <_dtoa_r+0x334>
 8004dba:	4698      	mov	r8, r3
 8004dbc:	9304      	str	r3, [sp, #16]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004dc2:	6072      	str	r2, [r6, #4]
 8004dc4:	2204      	movs	r2, #4
 8004dc6:	f102 0014 	add.w	r0, r2, #20
 8004dca:	4298      	cmp	r0, r3
 8004dcc:	6871      	ldr	r1, [r6, #4]
 8004dce:	d96e      	bls.n	8004eae <_dtoa_r+0x33e>
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	f000 fcbb 	bl	800574c <_Balloc>
 8004dd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dd8:	6030      	str	r0, [r6, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f1b8 0f0e 	cmp.w	r8, #14
 8004de0:	9306      	str	r3, [sp, #24]
 8004de2:	f200 80ed 	bhi.w	8004fc0 <_dtoa_r+0x450>
 8004de6:	2d00      	cmp	r5, #0
 8004de8:	f000 80ea 	beq.w	8004fc0 <_dtoa_r+0x450>
 8004dec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004df0:	f1ba 0f00 	cmp.w	sl, #0
 8004df4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004df8:	dd77      	ble.n	8004eea <_dtoa_r+0x37a>
 8004dfa:	4a28      	ldr	r2, [pc, #160]	; (8004e9c <_dtoa_r+0x32c>)
 8004dfc:	f00a 030f 	and.w	r3, sl, #15
 8004e00:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004e04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004e08:	06f0      	lsls	r0, r6, #27
 8004e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004e12:	d568      	bpl.n	8004ee6 <_dtoa_r+0x376>
 8004e14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004e18:	4b21      	ldr	r3, [pc, #132]	; (8004ea0 <_dtoa_r+0x330>)
 8004e1a:	2503      	movs	r5, #3
 8004e1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e20:	f7fb fc84 	bl	800072c <__aeabi_ddiv>
 8004e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e28:	f006 060f 	and.w	r6, r6, #15
 8004e2c:	4f1c      	ldr	r7, [pc, #112]	; (8004ea0 <_dtoa_r+0x330>)
 8004e2e:	e04f      	b.n	8004ed0 <_dtoa_r+0x360>
 8004e30:	2301      	movs	r3, #1
 8004e32:	9309      	str	r3, [sp, #36]	; 0x24
 8004e34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004e36:	4453      	add	r3, sl
 8004e38:	f103 0801 	add.w	r8, r3, #1
 8004e3c:	9304      	str	r3, [sp, #16]
 8004e3e:	4643      	mov	r3, r8
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	bfb8      	it	lt
 8004e44:	2301      	movlt	r3, #1
 8004e46:	e7ba      	b.n	8004dbe <_dtoa_r+0x24e>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e7b2      	b.n	8004db2 <_dtoa_r+0x242>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e7f0      	b.n	8004e32 <_dtoa_r+0x2c2>
 8004e50:	2501      	movs	r5, #1
 8004e52:	2300      	movs	r3, #0
 8004e54:	9509      	str	r5, [sp, #36]	; 0x24
 8004e56:	931e      	str	r3, [sp, #120]	; 0x78
 8004e58:	f04f 33ff 	mov.w	r3, #4294967295
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	9304      	str	r3, [sp, #16]
 8004e60:	4698      	mov	r8, r3
 8004e62:	2312      	movs	r3, #18
 8004e64:	921f      	str	r2, [sp, #124]	; 0x7c
 8004e66:	e7aa      	b.n	8004dbe <_dtoa_r+0x24e>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e6c:	e7f4      	b.n	8004e58 <_dtoa_r+0x2e8>
 8004e6e:	bf00      	nop
 8004e70:	636f4361 	.word	0x636f4361
 8004e74:	3fd287a7 	.word	0x3fd287a7
 8004e78:	8b60c8b3 	.word	0x8b60c8b3
 8004e7c:	3fc68a28 	.word	0x3fc68a28
 8004e80:	509f79fb 	.word	0x509f79fb
 8004e84:	3fd34413 	.word	0x3fd34413
 8004e88:	7ff00000 	.word	0x7ff00000
 8004e8c:	080072c1 	.word	0x080072c1
 8004e90:	080072b8 	.word	0x080072b8
 8004e94:	08007295 	.word	0x08007295
 8004e98:	3ff80000 	.word	0x3ff80000
 8004e9c:	080072f8 	.word	0x080072f8
 8004ea0:	080072d0 	.word	0x080072d0
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	9304      	str	r3, [sp, #16]
 8004ea8:	4698      	mov	r8, r3
 8004eaa:	461a      	mov	r2, r3
 8004eac:	e7da      	b.n	8004e64 <_dtoa_r+0x2f4>
 8004eae:	3101      	adds	r1, #1
 8004eb0:	6071      	str	r1, [r6, #4]
 8004eb2:	0052      	lsls	r2, r2, #1
 8004eb4:	e787      	b.n	8004dc6 <_dtoa_r+0x256>
 8004eb6:	07f1      	lsls	r1, r6, #31
 8004eb8:	d508      	bpl.n	8004ecc <_dtoa_r+0x35c>
 8004eba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ebe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ec2:	f7fb fb09 	bl	80004d8 <__aeabi_dmul>
 8004ec6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004eca:	3501      	adds	r5, #1
 8004ecc:	1076      	asrs	r6, r6, #1
 8004ece:	3708      	adds	r7, #8
 8004ed0:	2e00      	cmp	r6, #0
 8004ed2:	d1f0      	bne.n	8004eb6 <_dtoa_r+0x346>
 8004ed4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004ed8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004edc:	f7fb fc26 	bl	800072c <__aeabi_ddiv>
 8004ee0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ee4:	e01b      	b.n	8004f1e <_dtoa_r+0x3ae>
 8004ee6:	2502      	movs	r5, #2
 8004ee8:	e7a0      	b.n	8004e2c <_dtoa_r+0x2bc>
 8004eea:	f000 80a4 	beq.w	8005036 <_dtoa_r+0x4c6>
 8004eee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004ef2:	f1ca 0600 	rsb	r6, sl, #0
 8004ef6:	4ba0      	ldr	r3, [pc, #640]	; (8005178 <_dtoa_r+0x608>)
 8004ef8:	f006 020f 	and.w	r2, r6, #15
 8004efc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f04:	f7fb fae8 	bl	80004d8 <__aeabi_dmul>
 8004f08:	2502      	movs	r5, #2
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f10:	4f9a      	ldr	r7, [pc, #616]	; (800517c <_dtoa_r+0x60c>)
 8004f12:	1136      	asrs	r6, r6, #4
 8004f14:	2e00      	cmp	r6, #0
 8004f16:	f040 8083 	bne.w	8005020 <_dtoa_r+0x4b0>
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e0      	bne.n	8004ee0 <_dtoa_r+0x370>
 8004f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 808a 	beq.w	800503a <_dtoa_r+0x4ca>
 8004f26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f2a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f32:	2200      	movs	r2, #0
 8004f34:	4b92      	ldr	r3, [pc, #584]	; (8005180 <_dtoa_r+0x610>)
 8004f36:	f7fb fd41 	bl	80009bc <__aeabi_dcmplt>
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d07d      	beq.n	800503a <_dtoa_r+0x4ca>
 8004f3e:	f1b8 0f00 	cmp.w	r8, #0
 8004f42:	d07a      	beq.n	800503a <_dtoa_r+0x4ca>
 8004f44:	9b04      	ldr	r3, [sp, #16]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	dd36      	ble.n	8004fb8 <_dtoa_r+0x448>
 8004f4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f4e:	2200      	movs	r2, #0
 8004f50:	4b8c      	ldr	r3, [pc, #560]	; (8005184 <_dtoa_r+0x614>)
 8004f52:	f7fb fac1 	bl	80004d8 <__aeabi_dmul>
 8004f56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f5a:	9e04      	ldr	r6, [sp, #16]
 8004f5c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004f60:	3501      	adds	r5, #1
 8004f62:	4628      	mov	r0, r5
 8004f64:	f7fb fa4e 	bl	8000404 <__aeabi_i2d>
 8004f68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f6c:	f7fb fab4 	bl	80004d8 <__aeabi_dmul>
 8004f70:	2200      	movs	r2, #0
 8004f72:	4b85      	ldr	r3, [pc, #532]	; (8005188 <_dtoa_r+0x618>)
 8004f74:	f7fb f8fa 	bl	800016c <__adddf3>
 8004f78:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004f7c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004f80:	950b      	str	r5, [sp, #44]	; 0x2c
 8004f82:	2e00      	cmp	r6, #0
 8004f84:	d15c      	bne.n	8005040 <_dtoa_r+0x4d0>
 8004f86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	4b7f      	ldr	r3, [pc, #508]	; (800518c <_dtoa_r+0x61c>)
 8004f8e:	f7fb f8eb 	bl	8000168 <__aeabi_dsub>
 8004f92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f94:	462b      	mov	r3, r5
 8004f96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f9a:	f7fb fd2d 	bl	80009f8 <__aeabi_dcmpgt>
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	f040 8281 	bne.w	80054a6 <_dtoa_r+0x936>
 8004fa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004faa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004fae:	f7fb fd05 	bl	80009bc <__aeabi_dcmplt>
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	f040 8275 	bne.w	80054a2 <_dtoa_r+0x932>
 8004fb8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004fbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004fc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f2c0 814b 	blt.w	800525e <_dtoa_r+0x6ee>
 8004fc8:	f1ba 0f0e 	cmp.w	sl, #14
 8004fcc:	f300 8147 	bgt.w	800525e <_dtoa_r+0x6ee>
 8004fd0:	4b69      	ldr	r3, [pc, #420]	; (8005178 <_dtoa_r+0x608>)
 8004fd2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004fde:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f280 80d7 	bge.w	8005194 <_dtoa_r+0x624>
 8004fe6:	f1b8 0f00 	cmp.w	r8, #0
 8004fea:	f300 80d3 	bgt.w	8005194 <_dtoa_r+0x624>
 8004fee:	f040 8257 	bne.w	80054a0 <_dtoa_r+0x930>
 8004ff2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	4b64      	ldr	r3, [pc, #400]	; (800518c <_dtoa_r+0x61c>)
 8004ffa:	f7fb fa6d 	bl	80004d8 <__aeabi_dmul>
 8004ffe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005002:	f7fb fcef 	bl	80009e4 <__aeabi_dcmpge>
 8005006:	4646      	mov	r6, r8
 8005008:	4647      	mov	r7, r8
 800500a:	2800      	cmp	r0, #0
 800500c:	f040 822d 	bne.w	800546a <_dtoa_r+0x8fa>
 8005010:	9b06      	ldr	r3, [sp, #24]
 8005012:	9a06      	ldr	r2, [sp, #24]
 8005014:	1c5d      	adds	r5, r3, #1
 8005016:	2331      	movs	r3, #49	; 0x31
 8005018:	f10a 0a01 	add.w	sl, sl, #1
 800501c:	7013      	strb	r3, [r2, #0]
 800501e:	e228      	b.n	8005472 <_dtoa_r+0x902>
 8005020:	07f2      	lsls	r2, r6, #31
 8005022:	d505      	bpl.n	8005030 <_dtoa_r+0x4c0>
 8005024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005028:	f7fb fa56 	bl	80004d8 <__aeabi_dmul>
 800502c:	2301      	movs	r3, #1
 800502e:	3501      	adds	r5, #1
 8005030:	1076      	asrs	r6, r6, #1
 8005032:	3708      	adds	r7, #8
 8005034:	e76e      	b.n	8004f14 <_dtoa_r+0x3a4>
 8005036:	2502      	movs	r5, #2
 8005038:	e771      	b.n	8004f1e <_dtoa_r+0x3ae>
 800503a:	4657      	mov	r7, sl
 800503c:	4646      	mov	r6, r8
 800503e:	e790      	b.n	8004f62 <_dtoa_r+0x3f2>
 8005040:	4b4d      	ldr	r3, [pc, #308]	; (8005178 <_dtoa_r+0x608>)
 8005042:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005046:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800504a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800504c:	2b00      	cmp	r3, #0
 800504e:	d048      	beq.n	80050e2 <_dtoa_r+0x572>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	2000      	movs	r0, #0
 8005056:	494e      	ldr	r1, [pc, #312]	; (8005190 <_dtoa_r+0x620>)
 8005058:	f7fb fb68 	bl	800072c <__aeabi_ddiv>
 800505c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005060:	f7fb f882 	bl	8000168 <__aeabi_dsub>
 8005064:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005068:	9d06      	ldr	r5, [sp, #24]
 800506a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800506e:	f7fb fce3 	bl	8000a38 <__aeabi_d2iz>
 8005072:	9011      	str	r0, [sp, #68]	; 0x44
 8005074:	f7fb f9c6 	bl	8000404 <__aeabi_i2d>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005080:	f7fb f872 	bl	8000168 <__aeabi_dsub>
 8005084:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800508a:	3330      	adds	r3, #48	; 0x30
 800508c:	f805 3b01 	strb.w	r3, [r5], #1
 8005090:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005094:	f7fb fc92 	bl	80009bc <__aeabi_dcmplt>
 8005098:	2800      	cmp	r0, #0
 800509a:	d163      	bne.n	8005164 <_dtoa_r+0x5f4>
 800509c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050a0:	2000      	movs	r0, #0
 80050a2:	4937      	ldr	r1, [pc, #220]	; (8005180 <_dtoa_r+0x610>)
 80050a4:	f7fb f860 	bl	8000168 <__aeabi_dsub>
 80050a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050ac:	f7fb fc86 	bl	80009bc <__aeabi_dcmplt>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	f040 80b5 	bne.w	8005220 <_dtoa_r+0x6b0>
 80050b6:	9b06      	ldr	r3, [sp, #24]
 80050b8:	1aeb      	subs	r3, r5, r3
 80050ba:	429e      	cmp	r6, r3
 80050bc:	f77f af7c 	ble.w	8004fb8 <_dtoa_r+0x448>
 80050c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80050c4:	2200      	movs	r2, #0
 80050c6:	4b2f      	ldr	r3, [pc, #188]	; (8005184 <_dtoa_r+0x614>)
 80050c8:	f7fb fa06 	bl	80004d8 <__aeabi_dmul>
 80050cc:	2200      	movs	r2, #0
 80050ce:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80050d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050d6:	4b2b      	ldr	r3, [pc, #172]	; (8005184 <_dtoa_r+0x614>)
 80050d8:	f7fb f9fe 	bl	80004d8 <__aeabi_dmul>
 80050dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050e0:	e7c3      	b.n	800506a <_dtoa_r+0x4fa>
 80050e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050e6:	f7fb f9f7 	bl	80004d8 <__aeabi_dmul>
 80050ea:	9b06      	ldr	r3, [sp, #24]
 80050ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80050f0:	199d      	adds	r5, r3, r6
 80050f2:	461e      	mov	r6, r3
 80050f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050f8:	f7fb fc9e 	bl	8000a38 <__aeabi_d2iz>
 80050fc:	9011      	str	r0, [sp, #68]	; 0x44
 80050fe:	f7fb f981 	bl	8000404 <__aeabi_i2d>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800510a:	f7fb f82d 	bl	8000168 <__aeabi_dsub>
 800510e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005110:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005114:	3330      	adds	r3, #48	; 0x30
 8005116:	f806 3b01 	strb.w	r3, [r6], #1
 800511a:	42ae      	cmp	r6, r5
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	d124      	bne.n	800516c <_dtoa_r+0x5fc>
 8005122:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005126:	4b1a      	ldr	r3, [pc, #104]	; (8005190 <_dtoa_r+0x620>)
 8005128:	f7fb f820 	bl	800016c <__adddf3>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005134:	f7fb fc60 	bl	80009f8 <__aeabi_dcmpgt>
 8005138:	2800      	cmp	r0, #0
 800513a:	d171      	bne.n	8005220 <_dtoa_r+0x6b0>
 800513c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005140:	2000      	movs	r0, #0
 8005142:	4913      	ldr	r1, [pc, #76]	; (8005190 <_dtoa_r+0x620>)
 8005144:	f7fb f810 	bl	8000168 <__aeabi_dsub>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005150:	f7fb fc34 	bl	80009bc <__aeabi_dcmplt>
 8005154:	2800      	cmp	r0, #0
 8005156:	f43f af2f 	beq.w	8004fb8 <_dtoa_r+0x448>
 800515a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800515e:	1e6a      	subs	r2, r5, #1
 8005160:	2b30      	cmp	r3, #48	; 0x30
 8005162:	d001      	beq.n	8005168 <_dtoa_r+0x5f8>
 8005164:	46ba      	mov	sl, r7
 8005166:	e04a      	b.n	80051fe <_dtoa_r+0x68e>
 8005168:	4615      	mov	r5, r2
 800516a:	e7f6      	b.n	800515a <_dtoa_r+0x5ea>
 800516c:	4b05      	ldr	r3, [pc, #20]	; (8005184 <_dtoa_r+0x614>)
 800516e:	f7fb f9b3 	bl	80004d8 <__aeabi_dmul>
 8005172:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005176:	e7bd      	b.n	80050f4 <_dtoa_r+0x584>
 8005178:	080072f8 	.word	0x080072f8
 800517c:	080072d0 	.word	0x080072d0
 8005180:	3ff00000 	.word	0x3ff00000
 8005184:	40240000 	.word	0x40240000
 8005188:	401c0000 	.word	0x401c0000
 800518c:	40140000 	.word	0x40140000
 8005190:	3fe00000 	.word	0x3fe00000
 8005194:	9d06      	ldr	r5, [sp, #24]
 8005196:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800519a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800519e:	4630      	mov	r0, r6
 80051a0:	4639      	mov	r1, r7
 80051a2:	f7fb fac3 	bl	800072c <__aeabi_ddiv>
 80051a6:	f7fb fc47 	bl	8000a38 <__aeabi_d2iz>
 80051aa:	4681      	mov	r9, r0
 80051ac:	f7fb f92a 	bl	8000404 <__aeabi_i2d>
 80051b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051b4:	f7fb f990 	bl	80004d8 <__aeabi_dmul>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4630      	mov	r0, r6
 80051be:	4639      	mov	r1, r7
 80051c0:	f7fa ffd2 	bl	8000168 <__aeabi_dsub>
 80051c4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80051c8:	f805 6b01 	strb.w	r6, [r5], #1
 80051cc:	9e06      	ldr	r6, [sp, #24]
 80051ce:	4602      	mov	r2, r0
 80051d0:	1bae      	subs	r6, r5, r6
 80051d2:	45b0      	cmp	r8, r6
 80051d4:	460b      	mov	r3, r1
 80051d6:	d135      	bne.n	8005244 <_dtoa_r+0x6d4>
 80051d8:	f7fa ffc8 	bl	800016c <__adddf3>
 80051dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051e0:	4606      	mov	r6, r0
 80051e2:	460f      	mov	r7, r1
 80051e4:	f7fb fc08 	bl	80009f8 <__aeabi_dcmpgt>
 80051e8:	b9c8      	cbnz	r0, 800521e <_dtoa_r+0x6ae>
 80051ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051ee:	4630      	mov	r0, r6
 80051f0:	4639      	mov	r1, r7
 80051f2:	f7fb fbd9 	bl	80009a8 <__aeabi_dcmpeq>
 80051f6:	b110      	cbz	r0, 80051fe <_dtoa_r+0x68e>
 80051f8:	f019 0f01 	tst.w	r9, #1
 80051fc:	d10f      	bne.n	800521e <_dtoa_r+0x6ae>
 80051fe:	4659      	mov	r1, fp
 8005200:	4620      	mov	r0, r4
 8005202:	f000 fad7 	bl	80057b4 <_Bfree>
 8005206:	2300      	movs	r3, #0
 8005208:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800520a:	702b      	strb	r3, [r5, #0]
 800520c:	f10a 0301 	add.w	r3, sl, #1
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005214:	2b00      	cmp	r3, #0
 8005216:	f43f acf3 	beq.w	8004c00 <_dtoa_r+0x90>
 800521a:	601d      	str	r5, [r3, #0]
 800521c:	e4f0      	b.n	8004c00 <_dtoa_r+0x90>
 800521e:	4657      	mov	r7, sl
 8005220:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005224:	1e6b      	subs	r3, r5, #1
 8005226:	2a39      	cmp	r2, #57	; 0x39
 8005228:	d106      	bne.n	8005238 <_dtoa_r+0x6c8>
 800522a:	9a06      	ldr	r2, [sp, #24]
 800522c:	429a      	cmp	r2, r3
 800522e:	d107      	bne.n	8005240 <_dtoa_r+0x6d0>
 8005230:	2330      	movs	r3, #48	; 0x30
 8005232:	7013      	strb	r3, [r2, #0]
 8005234:	4613      	mov	r3, r2
 8005236:	3701      	adds	r7, #1
 8005238:	781a      	ldrb	r2, [r3, #0]
 800523a:	3201      	adds	r2, #1
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	e791      	b.n	8005164 <_dtoa_r+0x5f4>
 8005240:	461d      	mov	r5, r3
 8005242:	e7ed      	b.n	8005220 <_dtoa_r+0x6b0>
 8005244:	2200      	movs	r2, #0
 8005246:	4b99      	ldr	r3, [pc, #612]	; (80054ac <_dtoa_r+0x93c>)
 8005248:	f7fb f946 	bl	80004d8 <__aeabi_dmul>
 800524c:	2200      	movs	r2, #0
 800524e:	2300      	movs	r3, #0
 8005250:	4606      	mov	r6, r0
 8005252:	460f      	mov	r7, r1
 8005254:	f7fb fba8 	bl	80009a8 <__aeabi_dcmpeq>
 8005258:	2800      	cmp	r0, #0
 800525a:	d09e      	beq.n	800519a <_dtoa_r+0x62a>
 800525c:	e7cf      	b.n	80051fe <_dtoa_r+0x68e>
 800525e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005260:	2a00      	cmp	r2, #0
 8005262:	f000 8088 	beq.w	8005376 <_dtoa_r+0x806>
 8005266:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005268:	2a01      	cmp	r2, #1
 800526a:	dc6d      	bgt.n	8005348 <_dtoa_r+0x7d8>
 800526c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800526e:	2a00      	cmp	r2, #0
 8005270:	d066      	beq.n	8005340 <_dtoa_r+0x7d0>
 8005272:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005276:	464d      	mov	r5, r9
 8005278:	9e08      	ldr	r6, [sp, #32]
 800527a:	9a07      	ldr	r2, [sp, #28]
 800527c:	2101      	movs	r1, #1
 800527e:	441a      	add	r2, r3
 8005280:	4620      	mov	r0, r4
 8005282:	4499      	add	r9, r3
 8005284:	9207      	str	r2, [sp, #28]
 8005286:	f000 fb35 	bl	80058f4 <__i2b>
 800528a:	4607      	mov	r7, r0
 800528c:	2d00      	cmp	r5, #0
 800528e:	dd0b      	ble.n	80052a8 <_dtoa_r+0x738>
 8005290:	9b07      	ldr	r3, [sp, #28]
 8005292:	2b00      	cmp	r3, #0
 8005294:	dd08      	ble.n	80052a8 <_dtoa_r+0x738>
 8005296:	42ab      	cmp	r3, r5
 8005298:	bfa8      	it	ge
 800529a:	462b      	movge	r3, r5
 800529c:	9a07      	ldr	r2, [sp, #28]
 800529e:	eba9 0903 	sub.w	r9, r9, r3
 80052a2:	1aed      	subs	r5, r5, r3
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	9307      	str	r3, [sp, #28]
 80052a8:	9b08      	ldr	r3, [sp, #32]
 80052aa:	b1eb      	cbz	r3, 80052e8 <_dtoa_r+0x778>
 80052ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d065      	beq.n	800537e <_dtoa_r+0x80e>
 80052b2:	b18e      	cbz	r6, 80052d8 <_dtoa_r+0x768>
 80052b4:	4639      	mov	r1, r7
 80052b6:	4632      	mov	r2, r6
 80052b8:	4620      	mov	r0, r4
 80052ba:	f000 fbb9 	bl	8005a30 <__pow5mult>
 80052be:	465a      	mov	r2, fp
 80052c0:	4601      	mov	r1, r0
 80052c2:	4607      	mov	r7, r0
 80052c4:	4620      	mov	r0, r4
 80052c6:	f000 fb1e 	bl	8005906 <__multiply>
 80052ca:	4659      	mov	r1, fp
 80052cc:	900a      	str	r0, [sp, #40]	; 0x28
 80052ce:	4620      	mov	r0, r4
 80052d0:	f000 fa70 	bl	80057b4 <_Bfree>
 80052d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052d6:	469b      	mov	fp, r3
 80052d8:	9b08      	ldr	r3, [sp, #32]
 80052da:	1b9a      	subs	r2, r3, r6
 80052dc:	d004      	beq.n	80052e8 <_dtoa_r+0x778>
 80052de:	4659      	mov	r1, fp
 80052e0:	4620      	mov	r0, r4
 80052e2:	f000 fba5 	bl	8005a30 <__pow5mult>
 80052e6:	4683      	mov	fp, r0
 80052e8:	2101      	movs	r1, #1
 80052ea:	4620      	mov	r0, r4
 80052ec:	f000 fb02 	bl	80058f4 <__i2b>
 80052f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052f2:	4606      	mov	r6, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 81c6 	beq.w	8005686 <_dtoa_r+0xb16>
 80052fa:	461a      	mov	r2, r3
 80052fc:	4601      	mov	r1, r0
 80052fe:	4620      	mov	r0, r4
 8005300:	f000 fb96 	bl	8005a30 <__pow5mult>
 8005304:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005306:	4606      	mov	r6, r0
 8005308:	2b01      	cmp	r3, #1
 800530a:	dc3e      	bgt.n	800538a <_dtoa_r+0x81a>
 800530c:	9b02      	ldr	r3, [sp, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d137      	bne.n	8005382 <_dtoa_r+0x812>
 8005312:	9b03      	ldr	r3, [sp, #12]
 8005314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005318:	2b00      	cmp	r3, #0
 800531a:	d134      	bne.n	8005386 <_dtoa_r+0x816>
 800531c:	9b03      	ldr	r3, [sp, #12]
 800531e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005322:	0d1b      	lsrs	r3, r3, #20
 8005324:	051b      	lsls	r3, r3, #20
 8005326:	b12b      	cbz	r3, 8005334 <_dtoa_r+0x7c4>
 8005328:	9b07      	ldr	r3, [sp, #28]
 800532a:	f109 0901 	add.w	r9, r9, #1
 800532e:	3301      	adds	r3, #1
 8005330:	9307      	str	r3, [sp, #28]
 8005332:	2301      	movs	r3, #1
 8005334:	9308      	str	r3, [sp, #32]
 8005336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005338:	2b00      	cmp	r3, #0
 800533a:	d128      	bne.n	800538e <_dtoa_r+0x81e>
 800533c:	2001      	movs	r0, #1
 800533e:	e02e      	b.n	800539e <_dtoa_r+0x82e>
 8005340:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005342:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005346:	e796      	b.n	8005276 <_dtoa_r+0x706>
 8005348:	9b08      	ldr	r3, [sp, #32]
 800534a:	f108 36ff 	add.w	r6, r8, #4294967295
 800534e:	42b3      	cmp	r3, r6
 8005350:	bfb7      	itett	lt
 8005352:	9b08      	ldrlt	r3, [sp, #32]
 8005354:	1b9e      	subge	r6, r3, r6
 8005356:	1af2      	sublt	r2, r6, r3
 8005358:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800535a:	bfbf      	itttt	lt
 800535c:	9608      	strlt	r6, [sp, #32]
 800535e:	189b      	addlt	r3, r3, r2
 8005360:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005362:	2600      	movlt	r6, #0
 8005364:	f1b8 0f00 	cmp.w	r8, #0
 8005368:	bfb9      	ittee	lt
 800536a:	eba9 0508 	sublt.w	r5, r9, r8
 800536e:	2300      	movlt	r3, #0
 8005370:	464d      	movge	r5, r9
 8005372:	4643      	movge	r3, r8
 8005374:	e781      	b.n	800527a <_dtoa_r+0x70a>
 8005376:	9e08      	ldr	r6, [sp, #32]
 8005378:	464d      	mov	r5, r9
 800537a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800537c:	e786      	b.n	800528c <_dtoa_r+0x71c>
 800537e:	9a08      	ldr	r2, [sp, #32]
 8005380:	e7ad      	b.n	80052de <_dtoa_r+0x76e>
 8005382:	2300      	movs	r3, #0
 8005384:	e7d6      	b.n	8005334 <_dtoa_r+0x7c4>
 8005386:	9b02      	ldr	r3, [sp, #8]
 8005388:	e7d4      	b.n	8005334 <_dtoa_r+0x7c4>
 800538a:	2300      	movs	r3, #0
 800538c:	9308      	str	r3, [sp, #32]
 800538e:	6933      	ldr	r3, [r6, #16]
 8005390:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005394:	6918      	ldr	r0, [r3, #16]
 8005396:	f000 fa5f 	bl	8005858 <__hi0bits>
 800539a:	f1c0 0020 	rsb	r0, r0, #32
 800539e:	9b07      	ldr	r3, [sp, #28]
 80053a0:	4418      	add	r0, r3
 80053a2:	f010 001f 	ands.w	r0, r0, #31
 80053a6:	d047      	beq.n	8005438 <_dtoa_r+0x8c8>
 80053a8:	f1c0 0320 	rsb	r3, r0, #32
 80053ac:	2b04      	cmp	r3, #4
 80053ae:	dd3b      	ble.n	8005428 <_dtoa_r+0x8b8>
 80053b0:	9b07      	ldr	r3, [sp, #28]
 80053b2:	f1c0 001c 	rsb	r0, r0, #28
 80053b6:	4481      	add	r9, r0
 80053b8:	4405      	add	r5, r0
 80053ba:	4403      	add	r3, r0
 80053bc:	9307      	str	r3, [sp, #28]
 80053be:	f1b9 0f00 	cmp.w	r9, #0
 80053c2:	dd05      	ble.n	80053d0 <_dtoa_r+0x860>
 80053c4:	4659      	mov	r1, fp
 80053c6:	464a      	mov	r2, r9
 80053c8:	4620      	mov	r0, r4
 80053ca:	f000 fb7f 	bl	8005acc <__lshift>
 80053ce:	4683      	mov	fp, r0
 80053d0:	9b07      	ldr	r3, [sp, #28]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	dd05      	ble.n	80053e2 <_dtoa_r+0x872>
 80053d6:	4631      	mov	r1, r6
 80053d8:	461a      	mov	r2, r3
 80053da:	4620      	mov	r0, r4
 80053dc:	f000 fb76 	bl	8005acc <__lshift>
 80053e0:	4606      	mov	r6, r0
 80053e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053e4:	b353      	cbz	r3, 800543c <_dtoa_r+0x8cc>
 80053e6:	4631      	mov	r1, r6
 80053e8:	4658      	mov	r0, fp
 80053ea:	f000 fbc3 	bl	8005b74 <__mcmp>
 80053ee:	2800      	cmp	r0, #0
 80053f0:	da24      	bge.n	800543c <_dtoa_r+0x8cc>
 80053f2:	2300      	movs	r3, #0
 80053f4:	4659      	mov	r1, fp
 80053f6:	220a      	movs	r2, #10
 80053f8:	4620      	mov	r0, r4
 80053fa:	f000 f9f2 	bl	80057e2 <__multadd>
 80053fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005400:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005404:	4683      	mov	fp, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 8144 	beq.w	8005694 <_dtoa_r+0xb24>
 800540c:	2300      	movs	r3, #0
 800540e:	4639      	mov	r1, r7
 8005410:	220a      	movs	r2, #10
 8005412:	4620      	mov	r0, r4
 8005414:	f000 f9e5 	bl	80057e2 <__multadd>
 8005418:	9b04      	ldr	r3, [sp, #16]
 800541a:	4607      	mov	r7, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	dc4d      	bgt.n	80054bc <_dtoa_r+0x94c>
 8005420:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005422:	2b02      	cmp	r3, #2
 8005424:	dd4a      	ble.n	80054bc <_dtoa_r+0x94c>
 8005426:	e011      	b.n	800544c <_dtoa_r+0x8dc>
 8005428:	d0c9      	beq.n	80053be <_dtoa_r+0x84e>
 800542a:	9a07      	ldr	r2, [sp, #28]
 800542c:	331c      	adds	r3, #28
 800542e:	441a      	add	r2, r3
 8005430:	4499      	add	r9, r3
 8005432:	441d      	add	r5, r3
 8005434:	4613      	mov	r3, r2
 8005436:	e7c1      	b.n	80053bc <_dtoa_r+0x84c>
 8005438:	4603      	mov	r3, r0
 800543a:	e7f6      	b.n	800542a <_dtoa_r+0x8ba>
 800543c:	f1b8 0f00 	cmp.w	r8, #0
 8005440:	dc36      	bgt.n	80054b0 <_dtoa_r+0x940>
 8005442:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005444:	2b02      	cmp	r3, #2
 8005446:	dd33      	ble.n	80054b0 <_dtoa_r+0x940>
 8005448:	f8cd 8010 	str.w	r8, [sp, #16]
 800544c:	9b04      	ldr	r3, [sp, #16]
 800544e:	b963      	cbnz	r3, 800546a <_dtoa_r+0x8fa>
 8005450:	4631      	mov	r1, r6
 8005452:	2205      	movs	r2, #5
 8005454:	4620      	mov	r0, r4
 8005456:	f000 f9c4 	bl	80057e2 <__multadd>
 800545a:	4601      	mov	r1, r0
 800545c:	4606      	mov	r6, r0
 800545e:	4658      	mov	r0, fp
 8005460:	f000 fb88 	bl	8005b74 <__mcmp>
 8005464:	2800      	cmp	r0, #0
 8005466:	f73f add3 	bgt.w	8005010 <_dtoa_r+0x4a0>
 800546a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800546c:	9d06      	ldr	r5, [sp, #24]
 800546e:	ea6f 0a03 	mvn.w	sl, r3
 8005472:	f04f 0900 	mov.w	r9, #0
 8005476:	4631      	mov	r1, r6
 8005478:	4620      	mov	r0, r4
 800547a:	f000 f99b 	bl	80057b4 <_Bfree>
 800547e:	2f00      	cmp	r7, #0
 8005480:	f43f aebd 	beq.w	80051fe <_dtoa_r+0x68e>
 8005484:	f1b9 0f00 	cmp.w	r9, #0
 8005488:	d005      	beq.n	8005496 <_dtoa_r+0x926>
 800548a:	45b9      	cmp	r9, r7
 800548c:	d003      	beq.n	8005496 <_dtoa_r+0x926>
 800548e:	4649      	mov	r1, r9
 8005490:	4620      	mov	r0, r4
 8005492:	f000 f98f 	bl	80057b4 <_Bfree>
 8005496:	4639      	mov	r1, r7
 8005498:	4620      	mov	r0, r4
 800549a:	f000 f98b 	bl	80057b4 <_Bfree>
 800549e:	e6ae      	b.n	80051fe <_dtoa_r+0x68e>
 80054a0:	2600      	movs	r6, #0
 80054a2:	4637      	mov	r7, r6
 80054a4:	e7e1      	b.n	800546a <_dtoa_r+0x8fa>
 80054a6:	46ba      	mov	sl, r7
 80054a8:	4637      	mov	r7, r6
 80054aa:	e5b1      	b.n	8005010 <_dtoa_r+0x4a0>
 80054ac:	40240000 	.word	0x40240000
 80054b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 80f3 	beq.w	80056a2 <_dtoa_r+0xb32>
 80054bc:	2d00      	cmp	r5, #0
 80054be:	dd05      	ble.n	80054cc <_dtoa_r+0x95c>
 80054c0:	4639      	mov	r1, r7
 80054c2:	462a      	mov	r2, r5
 80054c4:	4620      	mov	r0, r4
 80054c6:	f000 fb01 	bl	8005acc <__lshift>
 80054ca:	4607      	mov	r7, r0
 80054cc:	9b08      	ldr	r3, [sp, #32]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d04c      	beq.n	800556c <_dtoa_r+0x9fc>
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	4620      	mov	r0, r4
 80054d6:	f000 f939 	bl	800574c <_Balloc>
 80054da:	4605      	mov	r5, r0
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	f107 010c 	add.w	r1, r7, #12
 80054e2:	3202      	adds	r2, #2
 80054e4:	0092      	lsls	r2, r2, #2
 80054e6:	300c      	adds	r0, #12
 80054e8:	f7fe fd16 	bl	8003f18 <memcpy>
 80054ec:	2201      	movs	r2, #1
 80054ee:	4629      	mov	r1, r5
 80054f0:	4620      	mov	r0, r4
 80054f2:	f000 faeb 	bl	8005acc <__lshift>
 80054f6:	46b9      	mov	r9, r7
 80054f8:	4607      	mov	r7, r0
 80054fa:	9b06      	ldr	r3, [sp, #24]
 80054fc:	9307      	str	r3, [sp, #28]
 80054fe:	9b02      	ldr	r3, [sp, #8]
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	9308      	str	r3, [sp, #32]
 8005506:	4631      	mov	r1, r6
 8005508:	4658      	mov	r0, fp
 800550a:	f7ff faa1 	bl	8004a50 <quorem>
 800550e:	4649      	mov	r1, r9
 8005510:	4605      	mov	r5, r0
 8005512:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005516:	4658      	mov	r0, fp
 8005518:	f000 fb2c 	bl	8005b74 <__mcmp>
 800551c:	463a      	mov	r2, r7
 800551e:	9002      	str	r0, [sp, #8]
 8005520:	4631      	mov	r1, r6
 8005522:	4620      	mov	r0, r4
 8005524:	f000 fb40 	bl	8005ba8 <__mdiff>
 8005528:	68c3      	ldr	r3, [r0, #12]
 800552a:	4602      	mov	r2, r0
 800552c:	bb03      	cbnz	r3, 8005570 <_dtoa_r+0xa00>
 800552e:	4601      	mov	r1, r0
 8005530:	9009      	str	r0, [sp, #36]	; 0x24
 8005532:	4658      	mov	r0, fp
 8005534:	f000 fb1e 	bl	8005b74 <__mcmp>
 8005538:	4603      	mov	r3, r0
 800553a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800553c:	4611      	mov	r1, r2
 800553e:	4620      	mov	r0, r4
 8005540:	9309      	str	r3, [sp, #36]	; 0x24
 8005542:	f000 f937 	bl	80057b4 <_Bfree>
 8005546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005548:	b9a3      	cbnz	r3, 8005574 <_dtoa_r+0xa04>
 800554a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800554c:	b992      	cbnz	r2, 8005574 <_dtoa_r+0xa04>
 800554e:	9a08      	ldr	r2, [sp, #32]
 8005550:	b982      	cbnz	r2, 8005574 <_dtoa_r+0xa04>
 8005552:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005556:	d029      	beq.n	80055ac <_dtoa_r+0xa3c>
 8005558:	9b02      	ldr	r3, [sp, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	dd01      	ble.n	8005562 <_dtoa_r+0x9f2>
 800555e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005562:	9b07      	ldr	r3, [sp, #28]
 8005564:	1c5d      	adds	r5, r3, #1
 8005566:	f883 8000 	strb.w	r8, [r3]
 800556a:	e784      	b.n	8005476 <_dtoa_r+0x906>
 800556c:	4638      	mov	r0, r7
 800556e:	e7c2      	b.n	80054f6 <_dtoa_r+0x986>
 8005570:	2301      	movs	r3, #1
 8005572:	e7e3      	b.n	800553c <_dtoa_r+0x9cc>
 8005574:	9a02      	ldr	r2, [sp, #8]
 8005576:	2a00      	cmp	r2, #0
 8005578:	db04      	blt.n	8005584 <_dtoa_r+0xa14>
 800557a:	d123      	bne.n	80055c4 <_dtoa_r+0xa54>
 800557c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800557e:	bb0a      	cbnz	r2, 80055c4 <_dtoa_r+0xa54>
 8005580:	9a08      	ldr	r2, [sp, #32]
 8005582:	b9fa      	cbnz	r2, 80055c4 <_dtoa_r+0xa54>
 8005584:	2b00      	cmp	r3, #0
 8005586:	ddec      	ble.n	8005562 <_dtoa_r+0x9f2>
 8005588:	4659      	mov	r1, fp
 800558a:	2201      	movs	r2, #1
 800558c:	4620      	mov	r0, r4
 800558e:	f000 fa9d 	bl	8005acc <__lshift>
 8005592:	4631      	mov	r1, r6
 8005594:	4683      	mov	fp, r0
 8005596:	f000 faed 	bl	8005b74 <__mcmp>
 800559a:	2800      	cmp	r0, #0
 800559c:	dc03      	bgt.n	80055a6 <_dtoa_r+0xa36>
 800559e:	d1e0      	bne.n	8005562 <_dtoa_r+0x9f2>
 80055a0:	f018 0f01 	tst.w	r8, #1
 80055a4:	d0dd      	beq.n	8005562 <_dtoa_r+0x9f2>
 80055a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80055aa:	d1d8      	bne.n	800555e <_dtoa_r+0x9ee>
 80055ac:	9b07      	ldr	r3, [sp, #28]
 80055ae:	9a07      	ldr	r2, [sp, #28]
 80055b0:	1c5d      	adds	r5, r3, #1
 80055b2:	2339      	movs	r3, #57	; 0x39
 80055b4:	7013      	strb	r3, [r2, #0]
 80055b6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80055ba:	1e6a      	subs	r2, r5, #1
 80055bc:	2b39      	cmp	r3, #57	; 0x39
 80055be:	d04d      	beq.n	800565c <_dtoa_r+0xaec>
 80055c0:	3301      	adds	r3, #1
 80055c2:	e052      	b.n	800566a <_dtoa_r+0xafa>
 80055c4:	9a07      	ldr	r2, [sp, #28]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f102 0501 	add.w	r5, r2, #1
 80055cc:	dd06      	ble.n	80055dc <_dtoa_r+0xa6c>
 80055ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80055d2:	d0eb      	beq.n	80055ac <_dtoa_r+0xa3c>
 80055d4:	f108 0801 	add.w	r8, r8, #1
 80055d8:	9b07      	ldr	r3, [sp, #28]
 80055da:	e7c4      	b.n	8005566 <_dtoa_r+0x9f6>
 80055dc:	9b06      	ldr	r3, [sp, #24]
 80055de:	9a04      	ldr	r2, [sp, #16]
 80055e0:	1aeb      	subs	r3, r5, r3
 80055e2:	4293      	cmp	r3, r2
 80055e4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80055e8:	d021      	beq.n	800562e <_dtoa_r+0xabe>
 80055ea:	4659      	mov	r1, fp
 80055ec:	2300      	movs	r3, #0
 80055ee:	220a      	movs	r2, #10
 80055f0:	4620      	mov	r0, r4
 80055f2:	f000 f8f6 	bl	80057e2 <__multadd>
 80055f6:	45b9      	cmp	r9, r7
 80055f8:	4683      	mov	fp, r0
 80055fa:	f04f 0300 	mov.w	r3, #0
 80055fe:	f04f 020a 	mov.w	r2, #10
 8005602:	4649      	mov	r1, r9
 8005604:	4620      	mov	r0, r4
 8005606:	d105      	bne.n	8005614 <_dtoa_r+0xaa4>
 8005608:	f000 f8eb 	bl	80057e2 <__multadd>
 800560c:	4681      	mov	r9, r0
 800560e:	4607      	mov	r7, r0
 8005610:	9507      	str	r5, [sp, #28]
 8005612:	e778      	b.n	8005506 <_dtoa_r+0x996>
 8005614:	f000 f8e5 	bl	80057e2 <__multadd>
 8005618:	4639      	mov	r1, r7
 800561a:	4681      	mov	r9, r0
 800561c:	2300      	movs	r3, #0
 800561e:	220a      	movs	r2, #10
 8005620:	4620      	mov	r0, r4
 8005622:	f000 f8de 	bl	80057e2 <__multadd>
 8005626:	4607      	mov	r7, r0
 8005628:	e7f2      	b.n	8005610 <_dtoa_r+0xaa0>
 800562a:	f04f 0900 	mov.w	r9, #0
 800562e:	4659      	mov	r1, fp
 8005630:	2201      	movs	r2, #1
 8005632:	4620      	mov	r0, r4
 8005634:	f000 fa4a 	bl	8005acc <__lshift>
 8005638:	4631      	mov	r1, r6
 800563a:	4683      	mov	fp, r0
 800563c:	f000 fa9a 	bl	8005b74 <__mcmp>
 8005640:	2800      	cmp	r0, #0
 8005642:	dcb8      	bgt.n	80055b6 <_dtoa_r+0xa46>
 8005644:	d102      	bne.n	800564c <_dtoa_r+0xadc>
 8005646:	f018 0f01 	tst.w	r8, #1
 800564a:	d1b4      	bne.n	80055b6 <_dtoa_r+0xa46>
 800564c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005650:	1e6a      	subs	r2, r5, #1
 8005652:	2b30      	cmp	r3, #48	; 0x30
 8005654:	f47f af0f 	bne.w	8005476 <_dtoa_r+0x906>
 8005658:	4615      	mov	r5, r2
 800565a:	e7f7      	b.n	800564c <_dtoa_r+0xadc>
 800565c:	9b06      	ldr	r3, [sp, #24]
 800565e:	4293      	cmp	r3, r2
 8005660:	d105      	bne.n	800566e <_dtoa_r+0xafe>
 8005662:	2331      	movs	r3, #49	; 0x31
 8005664:	9a06      	ldr	r2, [sp, #24]
 8005666:	f10a 0a01 	add.w	sl, sl, #1
 800566a:	7013      	strb	r3, [r2, #0]
 800566c:	e703      	b.n	8005476 <_dtoa_r+0x906>
 800566e:	4615      	mov	r5, r2
 8005670:	e7a1      	b.n	80055b6 <_dtoa_r+0xa46>
 8005672:	4b17      	ldr	r3, [pc, #92]	; (80056d0 <_dtoa_r+0xb60>)
 8005674:	f7ff bae1 	b.w	8004c3a <_dtoa_r+0xca>
 8005678:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800567a:	2b00      	cmp	r3, #0
 800567c:	f47f aabb 	bne.w	8004bf6 <_dtoa_r+0x86>
 8005680:	4b14      	ldr	r3, [pc, #80]	; (80056d4 <_dtoa_r+0xb64>)
 8005682:	f7ff bada 	b.w	8004c3a <_dtoa_r+0xca>
 8005686:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005688:	2b01      	cmp	r3, #1
 800568a:	f77f ae3f 	ble.w	800530c <_dtoa_r+0x79c>
 800568e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005690:	9308      	str	r3, [sp, #32]
 8005692:	e653      	b.n	800533c <_dtoa_r+0x7cc>
 8005694:	9b04      	ldr	r3, [sp, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	dc03      	bgt.n	80056a2 <_dtoa_r+0xb32>
 800569a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800569c:	2b02      	cmp	r3, #2
 800569e:	f73f aed5 	bgt.w	800544c <_dtoa_r+0x8dc>
 80056a2:	9d06      	ldr	r5, [sp, #24]
 80056a4:	4631      	mov	r1, r6
 80056a6:	4658      	mov	r0, fp
 80056a8:	f7ff f9d2 	bl	8004a50 <quorem>
 80056ac:	9b06      	ldr	r3, [sp, #24]
 80056ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80056b2:	f805 8b01 	strb.w	r8, [r5], #1
 80056b6:	9a04      	ldr	r2, [sp, #16]
 80056b8:	1aeb      	subs	r3, r5, r3
 80056ba:	429a      	cmp	r2, r3
 80056bc:	ddb5      	ble.n	800562a <_dtoa_r+0xaba>
 80056be:	4659      	mov	r1, fp
 80056c0:	2300      	movs	r3, #0
 80056c2:	220a      	movs	r2, #10
 80056c4:	4620      	mov	r0, r4
 80056c6:	f000 f88c 	bl	80057e2 <__multadd>
 80056ca:	4683      	mov	fp, r0
 80056cc:	e7ea      	b.n	80056a4 <_dtoa_r+0xb34>
 80056ce:	bf00      	nop
 80056d0:	08007294 	.word	0x08007294
 80056d4:	080072b8 	.word	0x080072b8

080056d8 <__locale_ctype_ptr_l>:
 80056d8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80056dc:	4770      	bx	lr
	...

080056e0 <_localeconv_r>:
 80056e0:	4b04      	ldr	r3, [pc, #16]	; (80056f4 <_localeconv_r+0x14>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6a18      	ldr	r0, [r3, #32]
 80056e6:	4b04      	ldr	r3, [pc, #16]	; (80056f8 <_localeconv_r+0x18>)
 80056e8:	2800      	cmp	r0, #0
 80056ea:	bf08      	it	eq
 80056ec:	4618      	moveq	r0, r3
 80056ee:	30f0      	adds	r0, #240	; 0xf0
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	20000018 	.word	0x20000018
 80056f8:	2000007c 	.word	0x2000007c

080056fc <malloc>:
 80056fc:	4b02      	ldr	r3, [pc, #8]	; (8005708 <malloc+0xc>)
 80056fe:	4601      	mov	r1, r0
 8005700:	6818      	ldr	r0, [r3, #0]
 8005702:	f000 bb59 	b.w	8005db8 <_malloc_r>
 8005706:	bf00      	nop
 8005708:	20000018 	.word	0x20000018

0800570c <__ascii_mbtowc>:
 800570c:	b082      	sub	sp, #8
 800570e:	b901      	cbnz	r1, 8005712 <__ascii_mbtowc+0x6>
 8005710:	a901      	add	r1, sp, #4
 8005712:	b142      	cbz	r2, 8005726 <__ascii_mbtowc+0x1a>
 8005714:	b14b      	cbz	r3, 800572a <__ascii_mbtowc+0x1e>
 8005716:	7813      	ldrb	r3, [r2, #0]
 8005718:	600b      	str	r3, [r1, #0]
 800571a:	7812      	ldrb	r2, [r2, #0]
 800571c:	1c10      	adds	r0, r2, #0
 800571e:	bf18      	it	ne
 8005720:	2001      	movne	r0, #1
 8005722:	b002      	add	sp, #8
 8005724:	4770      	bx	lr
 8005726:	4610      	mov	r0, r2
 8005728:	e7fb      	b.n	8005722 <__ascii_mbtowc+0x16>
 800572a:	f06f 0001 	mvn.w	r0, #1
 800572e:	e7f8      	b.n	8005722 <__ascii_mbtowc+0x16>

08005730 <memchr>:
 8005730:	b510      	push	{r4, lr}
 8005732:	b2c9      	uxtb	r1, r1
 8005734:	4402      	add	r2, r0
 8005736:	4290      	cmp	r0, r2
 8005738:	4603      	mov	r3, r0
 800573a:	d101      	bne.n	8005740 <memchr+0x10>
 800573c:	2300      	movs	r3, #0
 800573e:	e003      	b.n	8005748 <memchr+0x18>
 8005740:	781c      	ldrb	r4, [r3, #0]
 8005742:	3001      	adds	r0, #1
 8005744:	428c      	cmp	r4, r1
 8005746:	d1f6      	bne.n	8005736 <memchr+0x6>
 8005748:	4618      	mov	r0, r3
 800574a:	bd10      	pop	{r4, pc}

0800574c <_Balloc>:
 800574c:	b570      	push	{r4, r5, r6, lr}
 800574e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005750:	4604      	mov	r4, r0
 8005752:	460e      	mov	r6, r1
 8005754:	b93d      	cbnz	r5, 8005766 <_Balloc+0x1a>
 8005756:	2010      	movs	r0, #16
 8005758:	f7ff ffd0 	bl	80056fc <malloc>
 800575c:	6260      	str	r0, [r4, #36]	; 0x24
 800575e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005762:	6005      	str	r5, [r0, #0]
 8005764:	60c5      	str	r5, [r0, #12]
 8005766:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005768:	68eb      	ldr	r3, [r5, #12]
 800576a:	b183      	cbz	r3, 800578e <_Balloc+0x42>
 800576c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005774:	b9b8      	cbnz	r0, 80057a6 <_Balloc+0x5a>
 8005776:	2101      	movs	r1, #1
 8005778:	fa01 f506 	lsl.w	r5, r1, r6
 800577c:	1d6a      	adds	r2, r5, #5
 800577e:	0092      	lsls	r2, r2, #2
 8005780:	4620      	mov	r0, r4
 8005782:	f000 fabe 	bl	8005d02 <_calloc_r>
 8005786:	b160      	cbz	r0, 80057a2 <_Balloc+0x56>
 8005788:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800578c:	e00e      	b.n	80057ac <_Balloc+0x60>
 800578e:	2221      	movs	r2, #33	; 0x21
 8005790:	2104      	movs	r1, #4
 8005792:	4620      	mov	r0, r4
 8005794:	f000 fab5 	bl	8005d02 <_calloc_r>
 8005798:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800579a:	60e8      	str	r0, [r5, #12]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1e4      	bne.n	800576c <_Balloc+0x20>
 80057a2:	2000      	movs	r0, #0
 80057a4:	bd70      	pop	{r4, r5, r6, pc}
 80057a6:	6802      	ldr	r2, [r0, #0]
 80057a8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80057ac:	2300      	movs	r3, #0
 80057ae:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80057b2:	e7f7      	b.n	80057a4 <_Balloc+0x58>

080057b4 <_Bfree>:
 80057b4:	b570      	push	{r4, r5, r6, lr}
 80057b6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80057b8:	4606      	mov	r6, r0
 80057ba:	460d      	mov	r5, r1
 80057bc:	b93c      	cbnz	r4, 80057ce <_Bfree+0x1a>
 80057be:	2010      	movs	r0, #16
 80057c0:	f7ff ff9c 	bl	80056fc <malloc>
 80057c4:	6270      	str	r0, [r6, #36]	; 0x24
 80057c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057ca:	6004      	str	r4, [r0, #0]
 80057cc:	60c4      	str	r4, [r0, #12]
 80057ce:	b13d      	cbz	r5, 80057e0 <_Bfree+0x2c>
 80057d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80057d2:	686a      	ldr	r2, [r5, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057da:	6029      	str	r1, [r5, #0]
 80057dc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80057e0:	bd70      	pop	{r4, r5, r6, pc}

080057e2 <__multadd>:
 80057e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e6:	461f      	mov	r7, r3
 80057e8:	4606      	mov	r6, r0
 80057ea:	460c      	mov	r4, r1
 80057ec:	2300      	movs	r3, #0
 80057ee:	690d      	ldr	r5, [r1, #16]
 80057f0:	f101 0c14 	add.w	ip, r1, #20
 80057f4:	f8dc 0000 	ldr.w	r0, [ip]
 80057f8:	3301      	adds	r3, #1
 80057fa:	b281      	uxth	r1, r0
 80057fc:	fb02 7101 	mla	r1, r2, r1, r7
 8005800:	0c00      	lsrs	r0, r0, #16
 8005802:	0c0f      	lsrs	r7, r1, #16
 8005804:	fb02 7000 	mla	r0, r2, r0, r7
 8005808:	b289      	uxth	r1, r1
 800580a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800580e:	429d      	cmp	r5, r3
 8005810:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005814:	f84c 1b04 	str.w	r1, [ip], #4
 8005818:	dcec      	bgt.n	80057f4 <__multadd+0x12>
 800581a:	b1d7      	cbz	r7, 8005852 <__multadd+0x70>
 800581c:	68a3      	ldr	r3, [r4, #8]
 800581e:	42ab      	cmp	r3, r5
 8005820:	dc12      	bgt.n	8005848 <__multadd+0x66>
 8005822:	6861      	ldr	r1, [r4, #4]
 8005824:	4630      	mov	r0, r6
 8005826:	3101      	adds	r1, #1
 8005828:	f7ff ff90 	bl	800574c <_Balloc>
 800582c:	4680      	mov	r8, r0
 800582e:	6922      	ldr	r2, [r4, #16]
 8005830:	f104 010c 	add.w	r1, r4, #12
 8005834:	3202      	adds	r2, #2
 8005836:	0092      	lsls	r2, r2, #2
 8005838:	300c      	adds	r0, #12
 800583a:	f7fe fb6d 	bl	8003f18 <memcpy>
 800583e:	4621      	mov	r1, r4
 8005840:	4630      	mov	r0, r6
 8005842:	f7ff ffb7 	bl	80057b4 <_Bfree>
 8005846:	4644      	mov	r4, r8
 8005848:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800584c:	3501      	adds	r5, #1
 800584e:	615f      	str	r7, [r3, #20]
 8005850:	6125      	str	r5, [r4, #16]
 8005852:	4620      	mov	r0, r4
 8005854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005858 <__hi0bits>:
 8005858:	0c02      	lsrs	r2, r0, #16
 800585a:	0412      	lsls	r2, r2, #16
 800585c:	4603      	mov	r3, r0
 800585e:	b9b2      	cbnz	r2, 800588e <__hi0bits+0x36>
 8005860:	0403      	lsls	r3, r0, #16
 8005862:	2010      	movs	r0, #16
 8005864:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005868:	bf04      	itt	eq
 800586a:	021b      	lsleq	r3, r3, #8
 800586c:	3008      	addeq	r0, #8
 800586e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005872:	bf04      	itt	eq
 8005874:	011b      	lsleq	r3, r3, #4
 8005876:	3004      	addeq	r0, #4
 8005878:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800587c:	bf04      	itt	eq
 800587e:	009b      	lsleq	r3, r3, #2
 8005880:	3002      	addeq	r0, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	db06      	blt.n	8005894 <__hi0bits+0x3c>
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	d503      	bpl.n	8005892 <__hi0bits+0x3a>
 800588a:	3001      	adds	r0, #1
 800588c:	4770      	bx	lr
 800588e:	2000      	movs	r0, #0
 8005890:	e7e8      	b.n	8005864 <__hi0bits+0xc>
 8005892:	2020      	movs	r0, #32
 8005894:	4770      	bx	lr

08005896 <__lo0bits>:
 8005896:	6803      	ldr	r3, [r0, #0]
 8005898:	4601      	mov	r1, r0
 800589a:	f013 0207 	ands.w	r2, r3, #7
 800589e:	d00b      	beq.n	80058b8 <__lo0bits+0x22>
 80058a0:	07da      	lsls	r2, r3, #31
 80058a2:	d423      	bmi.n	80058ec <__lo0bits+0x56>
 80058a4:	0798      	lsls	r0, r3, #30
 80058a6:	bf49      	itett	mi
 80058a8:	085b      	lsrmi	r3, r3, #1
 80058aa:	089b      	lsrpl	r3, r3, #2
 80058ac:	2001      	movmi	r0, #1
 80058ae:	600b      	strmi	r3, [r1, #0]
 80058b0:	bf5c      	itt	pl
 80058b2:	600b      	strpl	r3, [r1, #0]
 80058b4:	2002      	movpl	r0, #2
 80058b6:	4770      	bx	lr
 80058b8:	b298      	uxth	r0, r3
 80058ba:	b9a8      	cbnz	r0, 80058e8 <__lo0bits+0x52>
 80058bc:	2010      	movs	r0, #16
 80058be:	0c1b      	lsrs	r3, r3, #16
 80058c0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80058c4:	bf04      	itt	eq
 80058c6:	0a1b      	lsreq	r3, r3, #8
 80058c8:	3008      	addeq	r0, #8
 80058ca:	071a      	lsls	r2, r3, #28
 80058cc:	bf04      	itt	eq
 80058ce:	091b      	lsreq	r3, r3, #4
 80058d0:	3004      	addeq	r0, #4
 80058d2:	079a      	lsls	r2, r3, #30
 80058d4:	bf04      	itt	eq
 80058d6:	089b      	lsreq	r3, r3, #2
 80058d8:	3002      	addeq	r0, #2
 80058da:	07da      	lsls	r2, r3, #31
 80058dc:	d402      	bmi.n	80058e4 <__lo0bits+0x4e>
 80058de:	085b      	lsrs	r3, r3, #1
 80058e0:	d006      	beq.n	80058f0 <__lo0bits+0x5a>
 80058e2:	3001      	adds	r0, #1
 80058e4:	600b      	str	r3, [r1, #0]
 80058e6:	4770      	bx	lr
 80058e8:	4610      	mov	r0, r2
 80058ea:	e7e9      	b.n	80058c0 <__lo0bits+0x2a>
 80058ec:	2000      	movs	r0, #0
 80058ee:	4770      	bx	lr
 80058f0:	2020      	movs	r0, #32
 80058f2:	4770      	bx	lr

080058f4 <__i2b>:
 80058f4:	b510      	push	{r4, lr}
 80058f6:	460c      	mov	r4, r1
 80058f8:	2101      	movs	r1, #1
 80058fa:	f7ff ff27 	bl	800574c <_Balloc>
 80058fe:	2201      	movs	r2, #1
 8005900:	6144      	str	r4, [r0, #20]
 8005902:	6102      	str	r2, [r0, #16]
 8005904:	bd10      	pop	{r4, pc}

08005906 <__multiply>:
 8005906:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800590a:	4614      	mov	r4, r2
 800590c:	690a      	ldr	r2, [r1, #16]
 800590e:	6923      	ldr	r3, [r4, #16]
 8005910:	4688      	mov	r8, r1
 8005912:	429a      	cmp	r2, r3
 8005914:	bfbe      	ittt	lt
 8005916:	460b      	movlt	r3, r1
 8005918:	46a0      	movlt	r8, r4
 800591a:	461c      	movlt	r4, r3
 800591c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005920:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005924:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005928:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800592c:	eb07 0609 	add.w	r6, r7, r9
 8005930:	42b3      	cmp	r3, r6
 8005932:	bfb8      	it	lt
 8005934:	3101      	addlt	r1, #1
 8005936:	f7ff ff09 	bl	800574c <_Balloc>
 800593a:	f100 0514 	add.w	r5, r0, #20
 800593e:	462b      	mov	r3, r5
 8005940:	2200      	movs	r2, #0
 8005942:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005946:	4573      	cmp	r3, lr
 8005948:	d316      	bcc.n	8005978 <__multiply+0x72>
 800594a:	f104 0214 	add.w	r2, r4, #20
 800594e:	f108 0114 	add.w	r1, r8, #20
 8005952:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005956:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	9b00      	ldr	r3, [sp, #0]
 800595e:	9201      	str	r2, [sp, #4]
 8005960:	4293      	cmp	r3, r2
 8005962:	d80c      	bhi.n	800597e <__multiply+0x78>
 8005964:	2e00      	cmp	r6, #0
 8005966:	dd03      	ble.n	8005970 <__multiply+0x6a>
 8005968:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800596c:	2b00      	cmp	r3, #0
 800596e:	d05d      	beq.n	8005a2c <__multiply+0x126>
 8005970:	6106      	str	r6, [r0, #16]
 8005972:	b003      	add	sp, #12
 8005974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005978:	f843 2b04 	str.w	r2, [r3], #4
 800597c:	e7e3      	b.n	8005946 <__multiply+0x40>
 800597e:	f8b2 b000 	ldrh.w	fp, [r2]
 8005982:	f1bb 0f00 	cmp.w	fp, #0
 8005986:	d023      	beq.n	80059d0 <__multiply+0xca>
 8005988:	4689      	mov	r9, r1
 800598a:	46ac      	mov	ip, r5
 800598c:	f04f 0800 	mov.w	r8, #0
 8005990:	f859 4b04 	ldr.w	r4, [r9], #4
 8005994:	f8dc a000 	ldr.w	sl, [ip]
 8005998:	b2a3      	uxth	r3, r4
 800599a:	fa1f fa8a 	uxth.w	sl, sl
 800599e:	fb0b a303 	mla	r3, fp, r3, sl
 80059a2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80059a6:	f8dc 4000 	ldr.w	r4, [ip]
 80059aa:	4443      	add	r3, r8
 80059ac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80059b0:	fb0b 840a 	mla	r4, fp, sl, r8
 80059b4:	46e2      	mov	sl, ip
 80059b6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80059c0:	454f      	cmp	r7, r9
 80059c2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80059c6:	f84a 3b04 	str.w	r3, [sl], #4
 80059ca:	d82b      	bhi.n	8005a24 <__multiply+0x11e>
 80059cc:	f8cc 8004 	str.w	r8, [ip, #4]
 80059d0:	9b01      	ldr	r3, [sp, #4]
 80059d2:	3204      	adds	r2, #4
 80059d4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80059d8:	f1ba 0f00 	cmp.w	sl, #0
 80059dc:	d020      	beq.n	8005a20 <__multiply+0x11a>
 80059de:	4689      	mov	r9, r1
 80059e0:	46a8      	mov	r8, r5
 80059e2:	f04f 0b00 	mov.w	fp, #0
 80059e6:	682b      	ldr	r3, [r5, #0]
 80059e8:	f8b9 c000 	ldrh.w	ip, [r9]
 80059ec:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	fb0a 440c 	mla	r4, sl, ip, r4
 80059f6:	46c4      	mov	ip, r8
 80059f8:	445c      	add	r4, fp
 80059fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80059fe:	f84c 3b04 	str.w	r3, [ip], #4
 8005a02:	f859 3b04 	ldr.w	r3, [r9], #4
 8005a06:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005a0a:	0c1b      	lsrs	r3, r3, #16
 8005a0c:	fb0a b303 	mla	r3, sl, r3, fp
 8005a10:	454f      	cmp	r7, r9
 8005a12:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005a16:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005a1a:	d805      	bhi.n	8005a28 <__multiply+0x122>
 8005a1c:	f8c8 3004 	str.w	r3, [r8, #4]
 8005a20:	3504      	adds	r5, #4
 8005a22:	e79b      	b.n	800595c <__multiply+0x56>
 8005a24:	46d4      	mov	ip, sl
 8005a26:	e7b3      	b.n	8005990 <__multiply+0x8a>
 8005a28:	46e0      	mov	r8, ip
 8005a2a:	e7dd      	b.n	80059e8 <__multiply+0xe2>
 8005a2c:	3e01      	subs	r6, #1
 8005a2e:	e799      	b.n	8005964 <__multiply+0x5e>

08005a30 <__pow5mult>:
 8005a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a34:	4615      	mov	r5, r2
 8005a36:	f012 0203 	ands.w	r2, r2, #3
 8005a3a:	4606      	mov	r6, r0
 8005a3c:	460f      	mov	r7, r1
 8005a3e:	d007      	beq.n	8005a50 <__pow5mult+0x20>
 8005a40:	4c21      	ldr	r4, [pc, #132]	; (8005ac8 <__pow5mult+0x98>)
 8005a42:	3a01      	subs	r2, #1
 8005a44:	2300      	movs	r3, #0
 8005a46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a4a:	f7ff feca 	bl	80057e2 <__multadd>
 8005a4e:	4607      	mov	r7, r0
 8005a50:	10ad      	asrs	r5, r5, #2
 8005a52:	d035      	beq.n	8005ac0 <__pow5mult+0x90>
 8005a54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005a56:	b93c      	cbnz	r4, 8005a68 <__pow5mult+0x38>
 8005a58:	2010      	movs	r0, #16
 8005a5a:	f7ff fe4f 	bl	80056fc <malloc>
 8005a5e:	6270      	str	r0, [r6, #36]	; 0x24
 8005a60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a64:	6004      	str	r4, [r0, #0]
 8005a66:	60c4      	str	r4, [r0, #12]
 8005a68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005a6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a70:	b94c      	cbnz	r4, 8005a86 <__pow5mult+0x56>
 8005a72:	f240 2171 	movw	r1, #625	; 0x271
 8005a76:	4630      	mov	r0, r6
 8005a78:	f7ff ff3c 	bl	80058f4 <__i2b>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	4604      	mov	r4, r0
 8005a80:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a84:	6003      	str	r3, [r0, #0]
 8005a86:	f04f 0800 	mov.w	r8, #0
 8005a8a:	07eb      	lsls	r3, r5, #31
 8005a8c:	d50a      	bpl.n	8005aa4 <__pow5mult+0x74>
 8005a8e:	4639      	mov	r1, r7
 8005a90:	4622      	mov	r2, r4
 8005a92:	4630      	mov	r0, r6
 8005a94:	f7ff ff37 	bl	8005906 <__multiply>
 8005a98:	4681      	mov	r9, r0
 8005a9a:	4639      	mov	r1, r7
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	f7ff fe89 	bl	80057b4 <_Bfree>
 8005aa2:	464f      	mov	r7, r9
 8005aa4:	106d      	asrs	r5, r5, #1
 8005aa6:	d00b      	beq.n	8005ac0 <__pow5mult+0x90>
 8005aa8:	6820      	ldr	r0, [r4, #0]
 8005aaa:	b938      	cbnz	r0, 8005abc <__pow5mult+0x8c>
 8005aac:	4622      	mov	r2, r4
 8005aae:	4621      	mov	r1, r4
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	f7ff ff28 	bl	8005906 <__multiply>
 8005ab6:	6020      	str	r0, [r4, #0]
 8005ab8:	f8c0 8000 	str.w	r8, [r0]
 8005abc:	4604      	mov	r4, r0
 8005abe:	e7e4      	b.n	8005a8a <__pow5mult+0x5a>
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ac6:	bf00      	nop
 8005ac8:	080073c0 	.word	0x080073c0

08005acc <__lshift>:
 8005acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	4607      	mov	r7, r0
 8005ad4:	4616      	mov	r6, r2
 8005ad6:	6923      	ldr	r3, [r4, #16]
 8005ad8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005adc:	eb0a 0903 	add.w	r9, sl, r3
 8005ae0:	6849      	ldr	r1, [r1, #4]
 8005ae2:	68a3      	ldr	r3, [r4, #8]
 8005ae4:	f109 0501 	add.w	r5, r9, #1
 8005ae8:	42ab      	cmp	r3, r5
 8005aea:	db32      	blt.n	8005b52 <__lshift+0x86>
 8005aec:	4638      	mov	r0, r7
 8005aee:	f7ff fe2d 	bl	800574c <_Balloc>
 8005af2:	2300      	movs	r3, #0
 8005af4:	4680      	mov	r8, r0
 8005af6:	461a      	mov	r2, r3
 8005af8:	f100 0114 	add.w	r1, r0, #20
 8005afc:	4553      	cmp	r3, sl
 8005afe:	db2b      	blt.n	8005b58 <__lshift+0x8c>
 8005b00:	6920      	ldr	r0, [r4, #16]
 8005b02:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b06:	f104 0314 	add.w	r3, r4, #20
 8005b0a:	f016 021f 	ands.w	r2, r6, #31
 8005b0e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b12:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b16:	d025      	beq.n	8005b64 <__lshift+0x98>
 8005b18:	2000      	movs	r0, #0
 8005b1a:	f1c2 0e20 	rsb	lr, r2, #32
 8005b1e:	468a      	mov	sl, r1
 8005b20:	681e      	ldr	r6, [r3, #0]
 8005b22:	4096      	lsls	r6, r2
 8005b24:	4330      	orrs	r0, r6
 8005b26:	f84a 0b04 	str.w	r0, [sl], #4
 8005b2a:	f853 0b04 	ldr.w	r0, [r3], #4
 8005b2e:	459c      	cmp	ip, r3
 8005b30:	fa20 f00e 	lsr.w	r0, r0, lr
 8005b34:	d814      	bhi.n	8005b60 <__lshift+0x94>
 8005b36:	6048      	str	r0, [r1, #4]
 8005b38:	b108      	cbz	r0, 8005b3e <__lshift+0x72>
 8005b3a:	f109 0502 	add.w	r5, r9, #2
 8005b3e:	3d01      	subs	r5, #1
 8005b40:	4638      	mov	r0, r7
 8005b42:	f8c8 5010 	str.w	r5, [r8, #16]
 8005b46:	4621      	mov	r1, r4
 8005b48:	f7ff fe34 	bl	80057b4 <_Bfree>
 8005b4c:	4640      	mov	r0, r8
 8005b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b52:	3101      	adds	r1, #1
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	e7c7      	b.n	8005ae8 <__lshift+0x1c>
 8005b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	e7cd      	b.n	8005afc <__lshift+0x30>
 8005b60:	4651      	mov	r1, sl
 8005b62:	e7dc      	b.n	8005b1e <__lshift+0x52>
 8005b64:	3904      	subs	r1, #4
 8005b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b6a:	459c      	cmp	ip, r3
 8005b6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005b70:	d8f9      	bhi.n	8005b66 <__lshift+0x9a>
 8005b72:	e7e4      	b.n	8005b3e <__lshift+0x72>

08005b74 <__mcmp>:
 8005b74:	6903      	ldr	r3, [r0, #16]
 8005b76:	690a      	ldr	r2, [r1, #16]
 8005b78:	b530      	push	{r4, r5, lr}
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	d10c      	bne.n	8005b98 <__mcmp+0x24>
 8005b7e:	0092      	lsls	r2, r2, #2
 8005b80:	3014      	adds	r0, #20
 8005b82:	3114      	adds	r1, #20
 8005b84:	1884      	adds	r4, r0, r2
 8005b86:	4411      	add	r1, r2
 8005b88:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005b8c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005b90:	4295      	cmp	r5, r2
 8005b92:	d003      	beq.n	8005b9c <__mcmp+0x28>
 8005b94:	d305      	bcc.n	8005ba2 <__mcmp+0x2e>
 8005b96:	2301      	movs	r3, #1
 8005b98:	4618      	mov	r0, r3
 8005b9a:	bd30      	pop	{r4, r5, pc}
 8005b9c:	42a0      	cmp	r0, r4
 8005b9e:	d3f3      	bcc.n	8005b88 <__mcmp+0x14>
 8005ba0:	e7fa      	b.n	8005b98 <__mcmp+0x24>
 8005ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba6:	e7f7      	b.n	8005b98 <__mcmp+0x24>

08005ba8 <__mdiff>:
 8005ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bac:	460d      	mov	r5, r1
 8005bae:	4607      	mov	r7, r0
 8005bb0:	4611      	mov	r1, r2
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	4614      	mov	r4, r2
 8005bb6:	f7ff ffdd 	bl	8005b74 <__mcmp>
 8005bba:	1e06      	subs	r6, r0, #0
 8005bbc:	d108      	bne.n	8005bd0 <__mdiff+0x28>
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	4638      	mov	r0, r7
 8005bc2:	f7ff fdc3 	bl	800574c <_Balloc>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd0:	bfa4      	itt	ge
 8005bd2:	4623      	movge	r3, r4
 8005bd4:	462c      	movge	r4, r5
 8005bd6:	4638      	mov	r0, r7
 8005bd8:	6861      	ldr	r1, [r4, #4]
 8005bda:	bfa6      	itte	ge
 8005bdc:	461d      	movge	r5, r3
 8005bde:	2600      	movge	r6, #0
 8005be0:	2601      	movlt	r6, #1
 8005be2:	f7ff fdb3 	bl	800574c <_Balloc>
 8005be6:	f04f 0e00 	mov.w	lr, #0
 8005bea:	60c6      	str	r6, [r0, #12]
 8005bec:	692b      	ldr	r3, [r5, #16]
 8005bee:	6926      	ldr	r6, [r4, #16]
 8005bf0:	f104 0214 	add.w	r2, r4, #20
 8005bf4:	f105 0914 	add.w	r9, r5, #20
 8005bf8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005bfc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005c00:	f100 0114 	add.w	r1, r0, #20
 8005c04:	f852 ab04 	ldr.w	sl, [r2], #4
 8005c08:	f859 5b04 	ldr.w	r5, [r9], #4
 8005c0c:	fa1f f38a 	uxth.w	r3, sl
 8005c10:	4473      	add	r3, lr
 8005c12:	b2ac      	uxth	r4, r5
 8005c14:	1b1b      	subs	r3, r3, r4
 8005c16:	0c2c      	lsrs	r4, r5, #16
 8005c18:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005c1c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005c26:	45c8      	cmp	r8, r9
 8005c28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005c2c:	4694      	mov	ip, r2
 8005c2e:	f841 4b04 	str.w	r4, [r1], #4
 8005c32:	d8e7      	bhi.n	8005c04 <__mdiff+0x5c>
 8005c34:	45bc      	cmp	ip, r7
 8005c36:	d304      	bcc.n	8005c42 <__mdiff+0x9a>
 8005c38:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005c3c:	b183      	cbz	r3, 8005c60 <__mdiff+0xb8>
 8005c3e:	6106      	str	r6, [r0, #16]
 8005c40:	e7c4      	b.n	8005bcc <__mdiff+0x24>
 8005c42:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005c46:	b2a2      	uxth	r2, r4
 8005c48:	4472      	add	r2, lr
 8005c4a:	1413      	asrs	r3, r2, #16
 8005c4c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005c50:	b292      	uxth	r2, r2
 8005c52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005c56:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005c5a:	f841 2b04 	str.w	r2, [r1], #4
 8005c5e:	e7e9      	b.n	8005c34 <__mdiff+0x8c>
 8005c60:	3e01      	subs	r6, #1
 8005c62:	e7e9      	b.n	8005c38 <__mdiff+0x90>

08005c64 <__d2b>:
 8005c64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005c68:	461c      	mov	r4, r3
 8005c6a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005c6e:	2101      	movs	r1, #1
 8005c70:	4690      	mov	r8, r2
 8005c72:	f7ff fd6b 	bl	800574c <_Balloc>
 8005c76:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005c7a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005c7e:	4607      	mov	r7, r0
 8005c80:	bb34      	cbnz	r4, 8005cd0 <__d2b+0x6c>
 8005c82:	9201      	str	r2, [sp, #4]
 8005c84:	f1b8 0200 	subs.w	r2, r8, #0
 8005c88:	d027      	beq.n	8005cda <__d2b+0x76>
 8005c8a:	a802      	add	r0, sp, #8
 8005c8c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005c90:	f7ff fe01 	bl	8005896 <__lo0bits>
 8005c94:	9900      	ldr	r1, [sp, #0]
 8005c96:	b1f0      	cbz	r0, 8005cd6 <__d2b+0x72>
 8005c98:	9a01      	ldr	r2, [sp, #4]
 8005c9a:	f1c0 0320 	rsb	r3, r0, #32
 8005c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca2:	430b      	orrs	r3, r1
 8005ca4:	40c2      	lsrs	r2, r0
 8005ca6:	617b      	str	r3, [r7, #20]
 8005ca8:	9201      	str	r2, [sp, #4]
 8005caa:	9b01      	ldr	r3, [sp, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	bf14      	ite	ne
 8005cb0:	2102      	movne	r1, #2
 8005cb2:	2101      	moveq	r1, #1
 8005cb4:	61bb      	str	r3, [r7, #24]
 8005cb6:	6139      	str	r1, [r7, #16]
 8005cb8:	b1c4      	cbz	r4, 8005cec <__d2b+0x88>
 8005cba:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005cbe:	4404      	add	r4, r0
 8005cc0:	6034      	str	r4, [r6, #0]
 8005cc2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005cc6:	6028      	str	r0, [r5, #0]
 8005cc8:	4638      	mov	r0, r7
 8005cca:	b002      	add	sp, #8
 8005ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cd0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005cd4:	e7d5      	b.n	8005c82 <__d2b+0x1e>
 8005cd6:	6179      	str	r1, [r7, #20]
 8005cd8:	e7e7      	b.n	8005caa <__d2b+0x46>
 8005cda:	a801      	add	r0, sp, #4
 8005cdc:	f7ff fddb 	bl	8005896 <__lo0bits>
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	9b01      	ldr	r3, [sp, #4]
 8005ce4:	6139      	str	r1, [r7, #16]
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	3020      	adds	r0, #32
 8005cea:	e7e5      	b.n	8005cb8 <__d2b+0x54>
 8005cec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005cf0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005cf4:	6030      	str	r0, [r6, #0]
 8005cf6:	6918      	ldr	r0, [r3, #16]
 8005cf8:	f7ff fdae 	bl	8005858 <__hi0bits>
 8005cfc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005d00:	e7e1      	b.n	8005cc6 <__d2b+0x62>

08005d02 <_calloc_r>:
 8005d02:	b538      	push	{r3, r4, r5, lr}
 8005d04:	fb02 f401 	mul.w	r4, r2, r1
 8005d08:	4621      	mov	r1, r4
 8005d0a:	f000 f855 	bl	8005db8 <_malloc_r>
 8005d0e:	4605      	mov	r5, r0
 8005d10:	b118      	cbz	r0, 8005d1a <_calloc_r+0x18>
 8005d12:	4622      	mov	r2, r4
 8005d14:	2100      	movs	r1, #0
 8005d16:	f7fe f90a 	bl	8003f2e <memset>
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	bd38      	pop	{r3, r4, r5, pc}
	...

08005d20 <_free_r>:
 8005d20:	b538      	push	{r3, r4, r5, lr}
 8005d22:	4605      	mov	r5, r0
 8005d24:	2900      	cmp	r1, #0
 8005d26:	d043      	beq.n	8005db0 <_free_r+0x90>
 8005d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d2c:	1f0c      	subs	r4, r1, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	bfb8      	it	lt
 8005d32:	18e4      	addlt	r4, r4, r3
 8005d34:	f000 fa22 	bl	800617c <__malloc_lock>
 8005d38:	4a1e      	ldr	r2, [pc, #120]	; (8005db4 <_free_r+0x94>)
 8005d3a:	6813      	ldr	r3, [r2, #0]
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	b933      	cbnz	r3, 8005d4e <_free_r+0x2e>
 8005d40:	6063      	str	r3, [r4, #4]
 8005d42:	6014      	str	r4, [r2, #0]
 8005d44:	4628      	mov	r0, r5
 8005d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d4a:	f000 ba18 	b.w	800617e <__malloc_unlock>
 8005d4e:	42a3      	cmp	r3, r4
 8005d50:	d90b      	bls.n	8005d6a <_free_r+0x4a>
 8005d52:	6821      	ldr	r1, [r4, #0]
 8005d54:	1862      	adds	r2, r4, r1
 8005d56:	4293      	cmp	r3, r2
 8005d58:	bf01      	itttt	eq
 8005d5a:	681a      	ldreq	r2, [r3, #0]
 8005d5c:	685b      	ldreq	r3, [r3, #4]
 8005d5e:	1852      	addeq	r2, r2, r1
 8005d60:	6022      	streq	r2, [r4, #0]
 8005d62:	6063      	str	r3, [r4, #4]
 8005d64:	6004      	str	r4, [r0, #0]
 8005d66:	e7ed      	b.n	8005d44 <_free_r+0x24>
 8005d68:	4613      	mov	r3, r2
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	b10a      	cbz	r2, 8005d72 <_free_r+0x52>
 8005d6e:	42a2      	cmp	r2, r4
 8005d70:	d9fa      	bls.n	8005d68 <_free_r+0x48>
 8005d72:	6819      	ldr	r1, [r3, #0]
 8005d74:	1858      	adds	r0, r3, r1
 8005d76:	42a0      	cmp	r0, r4
 8005d78:	d10b      	bne.n	8005d92 <_free_r+0x72>
 8005d7a:	6820      	ldr	r0, [r4, #0]
 8005d7c:	4401      	add	r1, r0
 8005d7e:	1858      	adds	r0, r3, r1
 8005d80:	4282      	cmp	r2, r0
 8005d82:	6019      	str	r1, [r3, #0]
 8005d84:	d1de      	bne.n	8005d44 <_free_r+0x24>
 8005d86:	6810      	ldr	r0, [r2, #0]
 8005d88:	6852      	ldr	r2, [r2, #4]
 8005d8a:	4401      	add	r1, r0
 8005d8c:	6019      	str	r1, [r3, #0]
 8005d8e:	605a      	str	r2, [r3, #4]
 8005d90:	e7d8      	b.n	8005d44 <_free_r+0x24>
 8005d92:	d902      	bls.n	8005d9a <_free_r+0x7a>
 8005d94:	230c      	movs	r3, #12
 8005d96:	602b      	str	r3, [r5, #0]
 8005d98:	e7d4      	b.n	8005d44 <_free_r+0x24>
 8005d9a:	6820      	ldr	r0, [r4, #0]
 8005d9c:	1821      	adds	r1, r4, r0
 8005d9e:	428a      	cmp	r2, r1
 8005da0:	bf01      	itttt	eq
 8005da2:	6811      	ldreq	r1, [r2, #0]
 8005da4:	6852      	ldreq	r2, [r2, #4]
 8005da6:	1809      	addeq	r1, r1, r0
 8005da8:	6021      	streq	r1, [r4, #0]
 8005daa:	6062      	str	r2, [r4, #4]
 8005dac:	605c      	str	r4, [r3, #4]
 8005dae:	e7c9      	b.n	8005d44 <_free_r+0x24>
 8005db0:	bd38      	pop	{r3, r4, r5, pc}
 8005db2:	bf00      	nop
 8005db4:	20000224 	.word	0x20000224

08005db8 <_malloc_r>:
 8005db8:	b570      	push	{r4, r5, r6, lr}
 8005dba:	1ccd      	adds	r5, r1, #3
 8005dbc:	f025 0503 	bic.w	r5, r5, #3
 8005dc0:	3508      	adds	r5, #8
 8005dc2:	2d0c      	cmp	r5, #12
 8005dc4:	bf38      	it	cc
 8005dc6:	250c      	movcc	r5, #12
 8005dc8:	2d00      	cmp	r5, #0
 8005dca:	4606      	mov	r6, r0
 8005dcc:	db01      	blt.n	8005dd2 <_malloc_r+0x1a>
 8005dce:	42a9      	cmp	r1, r5
 8005dd0:	d903      	bls.n	8005dda <_malloc_r+0x22>
 8005dd2:	230c      	movs	r3, #12
 8005dd4:	6033      	str	r3, [r6, #0]
 8005dd6:	2000      	movs	r0, #0
 8005dd8:	bd70      	pop	{r4, r5, r6, pc}
 8005dda:	f000 f9cf 	bl	800617c <__malloc_lock>
 8005dde:	4a21      	ldr	r2, [pc, #132]	; (8005e64 <_malloc_r+0xac>)
 8005de0:	6814      	ldr	r4, [r2, #0]
 8005de2:	4621      	mov	r1, r4
 8005de4:	b991      	cbnz	r1, 8005e0c <_malloc_r+0x54>
 8005de6:	4c20      	ldr	r4, [pc, #128]	; (8005e68 <_malloc_r+0xb0>)
 8005de8:	6823      	ldr	r3, [r4, #0]
 8005dea:	b91b      	cbnz	r3, 8005df4 <_malloc_r+0x3c>
 8005dec:	4630      	mov	r0, r6
 8005dee:	f000 f98f 	bl	8006110 <_sbrk_r>
 8005df2:	6020      	str	r0, [r4, #0]
 8005df4:	4629      	mov	r1, r5
 8005df6:	4630      	mov	r0, r6
 8005df8:	f000 f98a 	bl	8006110 <_sbrk_r>
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	d124      	bne.n	8005e4a <_malloc_r+0x92>
 8005e00:	230c      	movs	r3, #12
 8005e02:	4630      	mov	r0, r6
 8005e04:	6033      	str	r3, [r6, #0]
 8005e06:	f000 f9ba 	bl	800617e <__malloc_unlock>
 8005e0a:	e7e4      	b.n	8005dd6 <_malloc_r+0x1e>
 8005e0c:	680b      	ldr	r3, [r1, #0]
 8005e0e:	1b5b      	subs	r3, r3, r5
 8005e10:	d418      	bmi.n	8005e44 <_malloc_r+0x8c>
 8005e12:	2b0b      	cmp	r3, #11
 8005e14:	d90f      	bls.n	8005e36 <_malloc_r+0x7e>
 8005e16:	600b      	str	r3, [r1, #0]
 8005e18:	18cc      	adds	r4, r1, r3
 8005e1a:	50cd      	str	r5, [r1, r3]
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	f000 f9ae 	bl	800617e <__malloc_unlock>
 8005e22:	f104 000b 	add.w	r0, r4, #11
 8005e26:	1d23      	adds	r3, r4, #4
 8005e28:	f020 0007 	bic.w	r0, r0, #7
 8005e2c:	1ac3      	subs	r3, r0, r3
 8005e2e:	d0d3      	beq.n	8005dd8 <_malloc_r+0x20>
 8005e30:	425a      	negs	r2, r3
 8005e32:	50e2      	str	r2, [r4, r3]
 8005e34:	e7d0      	b.n	8005dd8 <_malloc_r+0x20>
 8005e36:	684b      	ldr	r3, [r1, #4]
 8005e38:	428c      	cmp	r4, r1
 8005e3a:	bf16      	itet	ne
 8005e3c:	6063      	strne	r3, [r4, #4]
 8005e3e:	6013      	streq	r3, [r2, #0]
 8005e40:	460c      	movne	r4, r1
 8005e42:	e7eb      	b.n	8005e1c <_malloc_r+0x64>
 8005e44:	460c      	mov	r4, r1
 8005e46:	6849      	ldr	r1, [r1, #4]
 8005e48:	e7cc      	b.n	8005de4 <_malloc_r+0x2c>
 8005e4a:	1cc4      	adds	r4, r0, #3
 8005e4c:	f024 0403 	bic.w	r4, r4, #3
 8005e50:	42a0      	cmp	r0, r4
 8005e52:	d005      	beq.n	8005e60 <_malloc_r+0xa8>
 8005e54:	1a21      	subs	r1, r4, r0
 8005e56:	4630      	mov	r0, r6
 8005e58:	f000 f95a 	bl	8006110 <_sbrk_r>
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	d0cf      	beq.n	8005e00 <_malloc_r+0x48>
 8005e60:	6025      	str	r5, [r4, #0]
 8005e62:	e7db      	b.n	8005e1c <_malloc_r+0x64>
 8005e64:	20000224 	.word	0x20000224
 8005e68:	20000228 	.word	0x20000228

08005e6c <__ssputs_r>:
 8005e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e70:	688e      	ldr	r6, [r1, #8]
 8005e72:	4682      	mov	sl, r0
 8005e74:	429e      	cmp	r6, r3
 8005e76:	460c      	mov	r4, r1
 8005e78:	4690      	mov	r8, r2
 8005e7a:	4699      	mov	r9, r3
 8005e7c:	d837      	bhi.n	8005eee <__ssputs_r+0x82>
 8005e7e:	898a      	ldrh	r2, [r1, #12]
 8005e80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e84:	d031      	beq.n	8005eea <__ssputs_r+0x7e>
 8005e86:	2302      	movs	r3, #2
 8005e88:	6825      	ldr	r5, [r4, #0]
 8005e8a:	6909      	ldr	r1, [r1, #16]
 8005e8c:	1a6f      	subs	r7, r5, r1
 8005e8e:	6965      	ldr	r5, [r4, #20]
 8005e90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e94:	fb95 f5f3 	sdiv	r5, r5, r3
 8005e98:	f109 0301 	add.w	r3, r9, #1
 8005e9c:	443b      	add	r3, r7
 8005e9e:	429d      	cmp	r5, r3
 8005ea0:	bf38      	it	cc
 8005ea2:	461d      	movcc	r5, r3
 8005ea4:	0553      	lsls	r3, r2, #21
 8005ea6:	d530      	bpl.n	8005f0a <__ssputs_r+0x9e>
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	f7ff ff85 	bl	8005db8 <_malloc_r>
 8005eae:	4606      	mov	r6, r0
 8005eb0:	b950      	cbnz	r0, 8005ec8 <__ssputs_r+0x5c>
 8005eb2:	230c      	movs	r3, #12
 8005eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb8:	f8ca 3000 	str.w	r3, [sl]
 8005ebc:	89a3      	ldrh	r3, [r4, #12]
 8005ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ec2:	81a3      	strh	r3, [r4, #12]
 8005ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec8:	463a      	mov	r2, r7
 8005eca:	6921      	ldr	r1, [r4, #16]
 8005ecc:	f7fe f824 	bl	8003f18 <memcpy>
 8005ed0:	89a3      	ldrh	r3, [r4, #12]
 8005ed2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eda:	81a3      	strh	r3, [r4, #12]
 8005edc:	6126      	str	r6, [r4, #16]
 8005ede:	443e      	add	r6, r7
 8005ee0:	6026      	str	r6, [r4, #0]
 8005ee2:	464e      	mov	r6, r9
 8005ee4:	6165      	str	r5, [r4, #20]
 8005ee6:	1bed      	subs	r5, r5, r7
 8005ee8:	60a5      	str	r5, [r4, #8]
 8005eea:	454e      	cmp	r6, r9
 8005eec:	d900      	bls.n	8005ef0 <__ssputs_r+0x84>
 8005eee:	464e      	mov	r6, r9
 8005ef0:	4632      	mov	r2, r6
 8005ef2:	4641      	mov	r1, r8
 8005ef4:	6820      	ldr	r0, [r4, #0]
 8005ef6:	f000 f928 	bl	800614a <memmove>
 8005efa:	68a3      	ldr	r3, [r4, #8]
 8005efc:	2000      	movs	r0, #0
 8005efe:	1b9b      	subs	r3, r3, r6
 8005f00:	60a3      	str	r3, [r4, #8]
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	441e      	add	r6, r3
 8005f06:	6026      	str	r6, [r4, #0]
 8005f08:	e7dc      	b.n	8005ec4 <__ssputs_r+0x58>
 8005f0a:	462a      	mov	r2, r5
 8005f0c:	f000 f938 	bl	8006180 <_realloc_r>
 8005f10:	4606      	mov	r6, r0
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d1e2      	bne.n	8005edc <__ssputs_r+0x70>
 8005f16:	6921      	ldr	r1, [r4, #16]
 8005f18:	4650      	mov	r0, sl
 8005f1a:	f7ff ff01 	bl	8005d20 <_free_r>
 8005f1e:	e7c8      	b.n	8005eb2 <__ssputs_r+0x46>

08005f20 <_svfiprintf_r>:
 8005f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f24:	461d      	mov	r5, r3
 8005f26:	898b      	ldrh	r3, [r1, #12]
 8005f28:	b09d      	sub	sp, #116	; 0x74
 8005f2a:	061f      	lsls	r7, r3, #24
 8005f2c:	4680      	mov	r8, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	4616      	mov	r6, r2
 8005f32:	d50f      	bpl.n	8005f54 <_svfiprintf_r+0x34>
 8005f34:	690b      	ldr	r3, [r1, #16]
 8005f36:	b96b      	cbnz	r3, 8005f54 <_svfiprintf_r+0x34>
 8005f38:	2140      	movs	r1, #64	; 0x40
 8005f3a:	f7ff ff3d 	bl	8005db8 <_malloc_r>
 8005f3e:	6020      	str	r0, [r4, #0]
 8005f40:	6120      	str	r0, [r4, #16]
 8005f42:	b928      	cbnz	r0, 8005f50 <_svfiprintf_r+0x30>
 8005f44:	230c      	movs	r3, #12
 8005f46:	f8c8 3000 	str.w	r3, [r8]
 8005f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4e:	e0c8      	b.n	80060e2 <_svfiprintf_r+0x1c2>
 8005f50:	2340      	movs	r3, #64	; 0x40
 8005f52:	6163      	str	r3, [r4, #20]
 8005f54:	2300      	movs	r3, #0
 8005f56:	9309      	str	r3, [sp, #36]	; 0x24
 8005f58:	2320      	movs	r3, #32
 8005f5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f5e:	2330      	movs	r3, #48	; 0x30
 8005f60:	f04f 0b01 	mov.w	fp, #1
 8005f64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f68:	9503      	str	r5, [sp, #12]
 8005f6a:	4637      	mov	r7, r6
 8005f6c:	463d      	mov	r5, r7
 8005f6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f72:	b10b      	cbz	r3, 8005f78 <_svfiprintf_r+0x58>
 8005f74:	2b25      	cmp	r3, #37	; 0x25
 8005f76:	d13e      	bne.n	8005ff6 <_svfiprintf_r+0xd6>
 8005f78:	ebb7 0a06 	subs.w	sl, r7, r6
 8005f7c:	d00b      	beq.n	8005f96 <_svfiprintf_r+0x76>
 8005f7e:	4653      	mov	r3, sl
 8005f80:	4632      	mov	r2, r6
 8005f82:	4621      	mov	r1, r4
 8005f84:	4640      	mov	r0, r8
 8005f86:	f7ff ff71 	bl	8005e6c <__ssputs_r>
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	f000 80a4 	beq.w	80060d8 <_svfiprintf_r+0x1b8>
 8005f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f92:	4453      	add	r3, sl
 8005f94:	9309      	str	r3, [sp, #36]	; 0x24
 8005f96:	783b      	ldrb	r3, [r7, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 809d 	beq.w	80060d8 <_svfiprintf_r+0x1b8>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fa8:	9304      	str	r3, [sp, #16]
 8005faa:	9307      	str	r3, [sp, #28]
 8005fac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fb0:	931a      	str	r3, [sp, #104]	; 0x68
 8005fb2:	462f      	mov	r7, r5
 8005fb4:	2205      	movs	r2, #5
 8005fb6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005fba:	4850      	ldr	r0, [pc, #320]	; (80060fc <_svfiprintf_r+0x1dc>)
 8005fbc:	f7ff fbb8 	bl	8005730 <memchr>
 8005fc0:	9b04      	ldr	r3, [sp, #16]
 8005fc2:	b9d0      	cbnz	r0, 8005ffa <_svfiprintf_r+0xda>
 8005fc4:	06d9      	lsls	r1, r3, #27
 8005fc6:	bf44      	itt	mi
 8005fc8:	2220      	movmi	r2, #32
 8005fca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005fce:	071a      	lsls	r2, r3, #28
 8005fd0:	bf44      	itt	mi
 8005fd2:	222b      	movmi	r2, #43	; 0x2b
 8005fd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005fd8:	782a      	ldrb	r2, [r5, #0]
 8005fda:	2a2a      	cmp	r2, #42	; 0x2a
 8005fdc:	d015      	beq.n	800600a <_svfiprintf_r+0xea>
 8005fde:	462f      	mov	r7, r5
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	250a      	movs	r5, #10
 8005fe4:	9a07      	ldr	r2, [sp, #28]
 8005fe6:	4639      	mov	r1, r7
 8005fe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fec:	3b30      	subs	r3, #48	; 0x30
 8005fee:	2b09      	cmp	r3, #9
 8005ff0:	d94d      	bls.n	800608e <_svfiprintf_r+0x16e>
 8005ff2:	b1b8      	cbz	r0, 8006024 <_svfiprintf_r+0x104>
 8005ff4:	e00f      	b.n	8006016 <_svfiprintf_r+0xf6>
 8005ff6:	462f      	mov	r7, r5
 8005ff8:	e7b8      	b.n	8005f6c <_svfiprintf_r+0x4c>
 8005ffa:	4a40      	ldr	r2, [pc, #256]	; (80060fc <_svfiprintf_r+0x1dc>)
 8005ffc:	463d      	mov	r5, r7
 8005ffe:	1a80      	subs	r0, r0, r2
 8006000:	fa0b f000 	lsl.w	r0, fp, r0
 8006004:	4318      	orrs	r0, r3
 8006006:	9004      	str	r0, [sp, #16]
 8006008:	e7d3      	b.n	8005fb2 <_svfiprintf_r+0x92>
 800600a:	9a03      	ldr	r2, [sp, #12]
 800600c:	1d11      	adds	r1, r2, #4
 800600e:	6812      	ldr	r2, [r2, #0]
 8006010:	9103      	str	r1, [sp, #12]
 8006012:	2a00      	cmp	r2, #0
 8006014:	db01      	blt.n	800601a <_svfiprintf_r+0xfa>
 8006016:	9207      	str	r2, [sp, #28]
 8006018:	e004      	b.n	8006024 <_svfiprintf_r+0x104>
 800601a:	4252      	negs	r2, r2
 800601c:	f043 0302 	orr.w	r3, r3, #2
 8006020:	9207      	str	r2, [sp, #28]
 8006022:	9304      	str	r3, [sp, #16]
 8006024:	783b      	ldrb	r3, [r7, #0]
 8006026:	2b2e      	cmp	r3, #46	; 0x2e
 8006028:	d10c      	bne.n	8006044 <_svfiprintf_r+0x124>
 800602a:	787b      	ldrb	r3, [r7, #1]
 800602c:	2b2a      	cmp	r3, #42	; 0x2a
 800602e:	d133      	bne.n	8006098 <_svfiprintf_r+0x178>
 8006030:	9b03      	ldr	r3, [sp, #12]
 8006032:	3702      	adds	r7, #2
 8006034:	1d1a      	adds	r2, r3, #4
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	9203      	str	r2, [sp, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	bfb8      	it	lt
 800603e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006042:	9305      	str	r3, [sp, #20]
 8006044:	4d2e      	ldr	r5, [pc, #184]	; (8006100 <_svfiprintf_r+0x1e0>)
 8006046:	2203      	movs	r2, #3
 8006048:	7839      	ldrb	r1, [r7, #0]
 800604a:	4628      	mov	r0, r5
 800604c:	f7ff fb70 	bl	8005730 <memchr>
 8006050:	b138      	cbz	r0, 8006062 <_svfiprintf_r+0x142>
 8006052:	2340      	movs	r3, #64	; 0x40
 8006054:	1b40      	subs	r0, r0, r5
 8006056:	fa03 f000 	lsl.w	r0, r3, r0
 800605a:	9b04      	ldr	r3, [sp, #16]
 800605c:	3701      	adds	r7, #1
 800605e:	4303      	orrs	r3, r0
 8006060:	9304      	str	r3, [sp, #16]
 8006062:	7839      	ldrb	r1, [r7, #0]
 8006064:	2206      	movs	r2, #6
 8006066:	4827      	ldr	r0, [pc, #156]	; (8006104 <_svfiprintf_r+0x1e4>)
 8006068:	1c7e      	adds	r6, r7, #1
 800606a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800606e:	f7ff fb5f 	bl	8005730 <memchr>
 8006072:	2800      	cmp	r0, #0
 8006074:	d038      	beq.n	80060e8 <_svfiprintf_r+0x1c8>
 8006076:	4b24      	ldr	r3, [pc, #144]	; (8006108 <_svfiprintf_r+0x1e8>)
 8006078:	bb13      	cbnz	r3, 80060c0 <_svfiprintf_r+0x1a0>
 800607a:	9b03      	ldr	r3, [sp, #12]
 800607c:	3307      	adds	r3, #7
 800607e:	f023 0307 	bic.w	r3, r3, #7
 8006082:	3308      	adds	r3, #8
 8006084:	9303      	str	r3, [sp, #12]
 8006086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006088:	444b      	add	r3, r9
 800608a:	9309      	str	r3, [sp, #36]	; 0x24
 800608c:	e76d      	b.n	8005f6a <_svfiprintf_r+0x4a>
 800608e:	fb05 3202 	mla	r2, r5, r2, r3
 8006092:	2001      	movs	r0, #1
 8006094:	460f      	mov	r7, r1
 8006096:	e7a6      	b.n	8005fe6 <_svfiprintf_r+0xc6>
 8006098:	2300      	movs	r3, #0
 800609a:	250a      	movs	r5, #10
 800609c:	4619      	mov	r1, r3
 800609e:	3701      	adds	r7, #1
 80060a0:	9305      	str	r3, [sp, #20]
 80060a2:	4638      	mov	r0, r7
 80060a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060a8:	3a30      	subs	r2, #48	; 0x30
 80060aa:	2a09      	cmp	r2, #9
 80060ac:	d903      	bls.n	80060b6 <_svfiprintf_r+0x196>
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0c8      	beq.n	8006044 <_svfiprintf_r+0x124>
 80060b2:	9105      	str	r1, [sp, #20]
 80060b4:	e7c6      	b.n	8006044 <_svfiprintf_r+0x124>
 80060b6:	fb05 2101 	mla	r1, r5, r1, r2
 80060ba:	2301      	movs	r3, #1
 80060bc:	4607      	mov	r7, r0
 80060be:	e7f0      	b.n	80060a2 <_svfiprintf_r+0x182>
 80060c0:	ab03      	add	r3, sp, #12
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	4622      	mov	r2, r4
 80060c6:	4b11      	ldr	r3, [pc, #68]	; (800610c <_svfiprintf_r+0x1ec>)
 80060c8:	a904      	add	r1, sp, #16
 80060ca:	4640      	mov	r0, r8
 80060cc:	f7fd ffc8 	bl	8004060 <_printf_float>
 80060d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80060d4:	4681      	mov	r9, r0
 80060d6:	d1d6      	bne.n	8006086 <_svfiprintf_r+0x166>
 80060d8:	89a3      	ldrh	r3, [r4, #12]
 80060da:	065b      	lsls	r3, r3, #25
 80060dc:	f53f af35 	bmi.w	8005f4a <_svfiprintf_r+0x2a>
 80060e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060e2:	b01d      	add	sp, #116	; 0x74
 80060e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e8:	ab03      	add	r3, sp, #12
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	4622      	mov	r2, r4
 80060ee:	4b07      	ldr	r3, [pc, #28]	; (800610c <_svfiprintf_r+0x1ec>)
 80060f0:	a904      	add	r1, sp, #16
 80060f2:	4640      	mov	r0, r8
 80060f4:	f7fe fa60 	bl	80045b8 <_printf_i>
 80060f8:	e7ea      	b.n	80060d0 <_svfiprintf_r+0x1b0>
 80060fa:	bf00      	nop
 80060fc:	080073cc 	.word	0x080073cc
 8006100:	080073d2 	.word	0x080073d2
 8006104:	080073d6 	.word	0x080073d6
 8006108:	08004061 	.word	0x08004061
 800610c:	08005e6d 	.word	0x08005e6d

08006110 <_sbrk_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	2300      	movs	r3, #0
 8006114:	4c05      	ldr	r4, [pc, #20]	; (800612c <_sbrk_r+0x1c>)
 8006116:	4605      	mov	r5, r0
 8006118:	4608      	mov	r0, r1
 800611a:	6023      	str	r3, [r4, #0]
 800611c:	f7fb feda 	bl	8001ed4 <_sbrk>
 8006120:	1c43      	adds	r3, r0, #1
 8006122:	d102      	bne.n	800612a <_sbrk_r+0x1a>
 8006124:	6823      	ldr	r3, [r4, #0]
 8006126:	b103      	cbz	r3, 800612a <_sbrk_r+0x1a>
 8006128:	602b      	str	r3, [r5, #0]
 800612a:	bd38      	pop	{r3, r4, r5, pc}
 800612c:	20000734 	.word	0x20000734

08006130 <__ascii_wctomb>:
 8006130:	b149      	cbz	r1, 8006146 <__ascii_wctomb+0x16>
 8006132:	2aff      	cmp	r2, #255	; 0xff
 8006134:	bf8b      	itete	hi
 8006136:	238a      	movhi	r3, #138	; 0x8a
 8006138:	700a      	strbls	r2, [r1, #0]
 800613a:	6003      	strhi	r3, [r0, #0]
 800613c:	2001      	movls	r0, #1
 800613e:	bf88      	it	hi
 8006140:	f04f 30ff 	movhi.w	r0, #4294967295
 8006144:	4770      	bx	lr
 8006146:	4608      	mov	r0, r1
 8006148:	4770      	bx	lr

0800614a <memmove>:
 800614a:	4288      	cmp	r0, r1
 800614c:	b510      	push	{r4, lr}
 800614e:	eb01 0302 	add.w	r3, r1, r2
 8006152:	d807      	bhi.n	8006164 <memmove+0x1a>
 8006154:	1e42      	subs	r2, r0, #1
 8006156:	4299      	cmp	r1, r3
 8006158:	d00a      	beq.n	8006170 <memmove+0x26>
 800615a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800615e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006162:	e7f8      	b.n	8006156 <memmove+0xc>
 8006164:	4283      	cmp	r3, r0
 8006166:	d9f5      	bls.n	8006154 <memmove+0xa>
 8006168:	1881      	adds	r1, r0, r2
 800616a:	1ad2      	subs	r2, r2, r3
 800616c:	42d3      	cmn	r3, r2
 800616e:	d100      	bne.n	8006172 <memmove+0x28>
 8006170:	bd10      	pop	{r4, pc}
 8006172:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006176:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800617a:	e7f7      	b.n	800616c <memmove+0x22>

0800617c <__malloc_lock>:
 800617c:	4770      	bx	lr

0800617e <__malloc_unlock>:
 800617e:	4770      	bx	lr

08006180 <_realloc_r>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	4607      	mov	r7, r0
 8006184:	4614      	mov	r4, r2
 8006186:	460e      	mov	r6, r1
 8006188:	b921      	cbnz	r1, 8006194 <_realloc_r+0x14>
 800618a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800618e:	4611      	mov	r1, r2
 8006190:	f7ff be12 	b.w	8005db8 <_malloc_r>
 8006194:	b922      	cbnz	r2, 80061a0 <_realloc_r+0x20>
 8006196:	f7ff fdc3 	bl	8005d20 <_free_r>
 800619a:	4625      	mov	r5, r4
 800619c:	4628      	mov	r0, r5
 800619e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a0:	f000 f814 	bl	80061cc <_malloc_usable_size_r>
 80061a4:	42a0      	cmp	r0, r4
 80061a6:	d20f      	bcs.n	80061c8 <_realloc_r+0x48>
 80061a8:	4621      	mov	r1, r4
 80061aa:	4638      	mov	r0, r7
 80061ac:	f7ff fe04 	bl	8005db8 <_malloc_r>
 80061b0:	4605      	mov	r5, r0
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d0f2      	beq.n	800619c <_realloc_r+0x1c>
 80061b6:	4631      	mov	r1, r6
 80061b8:	4622      	mov	r2, r4
 80061ba:	f7fd fead 	bl	8003f18 <memcpy>
 80061be:	4631      	mov	r1, r6
 80061c0:	4638      	mov	r0, r7
 80061c2:	f7ff fdad 	bl	8005d20 <_free_r>
 80061c6:	e7e9      	b.n	800619c <_realloc_r+0x1c>
 80061c8:	4635      	mov	r5, r6
 80061ca:	e7e7      	b.n	800619c <_realloc_r+0x1c>

080061cc <_malloc_usable_size_r>:
 80061cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061d0:	1f18      	subs	r0, r3, #4
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	bfbc      	itt	lt
 80061d6:	580b      	ldrlt	r3, [r1, r0]
 80061d8:	18c0      	addlt	r0, r0, r3
 80061da:	4770      	bx	lr

080061dc <_init>:
 80061dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061de:	bf00      	nop
 80061e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061e2:	bc08      	pop	{r3}
 80061e4:	469e      	mov	lr, r3
 80061e6:	4770      	bx	lr

080061e8 <_fini>:
 80061e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ea:	bf00      	nop
 80061ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ee:	bc08      	pop	{r3}
 80061f0:	469e      	mov	lr, r3
 80061f2:	4770      	bx	lr
