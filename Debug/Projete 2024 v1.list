
Projete 2024 v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000309c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080031ac  080031ac  000131ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003268  08003268  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003268  08003268  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003268  08003268  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003268  08003268  00013268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800326c  0800326c  0001326c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000010  0800327c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  0800327c  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007653  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001634  00000000  00000000  00027688  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c8  00000000  00000000  00028cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000700  00000000  00000000  00029488  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015c33  00000000  00000000  00029b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006d32  00000000  00000000  0003f7bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000831b7  00000000  00000000  000464ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c96a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002034  00000000  00000000  000c9720  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003194 	.word	0x08003194

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003194 	.word	0x08003194

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000a06:	2200      	movs	r2, #0
 8000a08:	2110      	movs	r1, #16
 8000a0a:	480c      	ldr	r0, [pc, #48]	; (8000a3c <ST7789_WriteCommand+0x40>)
 8000a0c:	f001 fc78 	bl	8002300 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000a10:	2200      	movs	r2, #0
 8000a12:	2101      	movs	r1, #1
 8000a14:	480a      	ldr	r0, [pc, #40]	; (8000a40 <ST7789_WriteCommand+0x44>)
 8000a16:	f001 fc73 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000a1a:	1df9      	adds	r1, r7, #7
 8000a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a20:	2201      	movs	r2, #1
 8000a22:	4808      	ldr	r0, [pc, #32]	; (8000a44 <ST7789_WriteCommand+0x48>)
 8000a24:	f002 f9a8 	bl	8002d78 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <ST7789_WriteCommand+0x40>)
 8000a2e:	f001 fc67 	bl	8002300 <HAL_GPIO_WritePin>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40010800 	.word	0x40010800
 8000a40:	40010c00 	.word	0x40010c00
 8000a44:	20000100 	.word	0x20000100

08000a48 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8000a52:	2200      	movs	r2, #0
 8000a54:	2110      	movs	r1, #16
 8000a56:	4815      	ldr	r0, [pc, #84]	; (8000aac <ST7789_WriteData+0x64>)
 8000a58:	f001 fc52 	bl	8002300 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2101      	movs	r1, #1
 8000a60:	4813      	ldr	r0, [pc, #76]	; (8000ab0 <ST7789_WriteData+0x68>)
 8000a62:	f001 fc4d 	bl	8002300 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8000a66:	e015      	b.n	8000a94 <ST7789_WriteData+0x4c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	bf28      	it	cs
 8000a72:	4613      	movcs	r3, r2
 8000a74:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000a76:	89fa      	ldrh	r2, [r7, #14]
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7c:	6879      	ldr	r1, [r7, #4]
 8000a7e:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <ST7789_WriteData+0x6c>)
 8000a80:	f002 f97a 	bl	8002d78 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 8000a84:	89fb      	ldrh	r3, [r7, #14]
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8000a8c:	89fb      	ldrh	r3, [r7, #14]
 8000a8e:	683a      	ldr	r2, [r7, #0]
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d1e6      	bne.n	8000a68 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2110      	movs	r1, #16
 8000a9e:	4803      	ldr	r0, [pc, #12]	; (8000aac <ST7789_WriteData+0x64>)
 8000aa0:	f001 fc2e 	bl	8002300 <HAL_GPIO_WritePin>
}
 8000aa4:	bf00      	nop
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40010800 	.word	0x40010800
 8000ab0:	40010c00 	.word	0x40010c00
 8000ab4:	20000100 	.word	0x20000100

08000ab8 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2110      	movs	r1, #16
 8000ac6:	480c      	ldr	r0, [pc, #48]	; (8000af8 <ST7789_WriteSmallData+0x40>)
 8000ac8:	f001 fc1a 	bl	8002300 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000acc:	2201      	movs	r2, #1
 8000ace:	2101      	movs	r1, #1
 8000ad0:	480a      	ldr	r0, [pc, #40]	; (8000afc <ST7789_WriteSmallData+0x44>)
 8000ad2:	f001 fc15 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000ad6:	1df9      	adds	r1, r7, #7
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8000adc:	2201      	movs	r2, #1
 8000ade:	4808      	ldr	r0, [pc, #32]	; (8000b00 <ST7789_WriteSmallData+0x48>)
 8000ae0:	f002 f94a 	bl	8002d78 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2110      	movs	r1, #16
 8000ae8:	4803      	ldr	r0, [pc, #12]	; (8000af8 <ST7789_WriteSmallData+0x40>)
 8000aea:	f001 fc09 	bl	8002300 <HAL_GPIO_WritePin>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40010800 	.word	0x40010800
 8000afc:	40010c00 	.word	0x40010c00
 8000b00:	20000100 	.word	0x20000100

08000b04 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8000b0e:	2036      	movs	r0, #54	; 0x36
 8000b10:	f7ff ff74 	bl	80009fc <ST7789_WriteCommand>
	switch (m) {
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d81a      	bhi.n	8000b50 <ST7789_SetRotation+0x4c>
 8000b1a:	a201      	add	r2, pc, #4	; (adr r2, 8000b20 <ST7789_SetRotation+0x1c>)
 8000b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b20:	08000b31 	.word	0x08000b31
 8000b24:	08000b39 	.word	0x08000b39
 8000b28:	08000b41 	.word	0x08000b41
 8000b2c:	08000b49 	.word	0x08000b49
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8000b30:	20c0      	movs	r0, #192	; 0xc0
 8000b32:	f7ff ffc1 	bl	8000ab8 <ST7789_WriteSmallData>
		break;
 8000b36:	e00c      	b.n	8000b52 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000b38:	20a0      	movs	r0, #160	; 0xa0
 8000b3a:	f7ff ffbd 	bl	8000ab8 <ST7789_WriteSmallData>
		break;
 8000b3e:	e008      	b.n	8000b52 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff ffb9 	bl	8000ab8 <ST7789_WriteSmallData>
		break;
 8000b46:	e004      	b.n	8000b52 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000b48:	2060      	movs	r0, #96	; 0x60
 8000b4a:	f7ff ffb5 	bl	8000ab8 <ST7789_WriteSmallData>
		break;
 8000b4e:	e000      	b.n	8000b52 <ST7789_SetRotation+0x4e>
	default:
		break;
 8000b50:	bf00      	nop
	}
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop

08000b5c <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b087      	sub	sp, #28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4604      	mov	r4, r0
 8000b64:	4608      	mov	r0, r1
 8000b66:	4611      	mov	r1, r2
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	80fb      	strh	r3, [r7, #6]
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80bb      	strh	r3, [r7, #4]
 8000b72:	460b      	mov	r3, r1
 8000b74:	807b      	strh	r3, [r7, #2]
 8000b76:	4613      	mov	r3, r2
 8000b78:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2110      	movs	r1, #16
 8000b7e:	4824      	ldr	r0, [pc, #144]	; (8000c10 <ST7789_SetAddressWindow+0xb4>)
 8000b80:	f001 fbbe 	bl	8002300 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	82fb      	strh	r3, [r7, #22]
 8000b88:	887b      	ldrh	r3, [r7, #2]
 8000b8a:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8000b8c:	88bb      	ldrh	r3, [r7, #4]
 8000b8e:	827b      	strh	r3, [r7, #18]
 8000b90:	883b      	ldrh	r3, [r7, #0]
 8000b92:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8000b94:	202a      	movs	r0, #42	; 0x2a
 8000b96:	f7ff ff31 	bl	80009fc <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8000b9a:	8afb      	ldrh	r3, [r7, #22]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	733b      	strb	r3, [r7, #12]
 8000ba4:	8afb      	ldrh	r3, [r7, #22]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	737b      	strb	r3, [r7, #13]
 8000baa:	8abb      	ldrh	r3, [r7, #20]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	73bb      	strb	r3, [r7, #14]
 8000bb4:	8abb      	ldrh	r3, [r7, #20]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff41 	bl	8000a48 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8000bc6:	202b      	movs	r0, #43	; 0x2b
 8000bc8:	f7ff ff18 	bl	80009fc <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8000bcc:	8a7b      	ldrh	r3, [r7, #18]
 8000bce:	0a1b      	lsrs	r3, r3, #8
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	723b      	strb	r3, [r7, #8]
 8000bd6:	8a7b      	ldrh	r3, [r7, #18]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	727b      	strb	r3, [r7, #9]
 8000bdc:	8a3b      	ldrh	r3, [r7, #16]
 8000bde:	0a1b      	lsrs	r3, r3, #8
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	72bb      	strb	r3, [r7, #10]
 8000be6:	8a3b      	ldrh	r3, [r7, #16]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ff28 	bl	8000a48 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000bf8:	202c      	movs	r0, #44	; 0x2c
 8000bfa:	f7ff feff 	bl	80009fc <ST7789_WriteCommand>
	ST7789_UnSelect();
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2110      	movs	r1, #16
 8000c02:	4803      	ldr	r0, [pc, #12]	; (8000c10 <ST7789_SetAddressWindow+0xb4>)
 8000c04:	f001 fb7c 	bl	8002300 <HAL_GPIO_WritePin>
}
 8000c08:	bf00      	nop
 8000c0a:	371c      	adds	r7, #28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd90      	pop	{r4, r7, pc}
 8000c10:	40010800 	.word	0x40010800

08000c14 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b08b      	sub	sp, #44	; 0x2c
 8000c18:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(10);
 8000c1a:	200a      	movs	r0, #10
 8000c1c:	f000 fdea 	bl	80017f4 <HAL_Delay>
    ST7789_RST_Clr();
 8000c20:	2200      	movs	r2, #0
 8000c22:	2102      	movs	r1, #2
 8000c24:	4846      	ldr	r0, [pc, #280]	; (8000d40 <ST7789_Init+0x12c>)
 8000c26:	f001 fb6b 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000c2a:	200a      	movs	r0, #10
 8000c2c:	f000 fde2 	bl	80017f4 <HAL_Delay>
    ST7789_RST_Set();
 8000c30:	2201      	movs	r2, #1
 8000c32:	2102      	movs	r1, #2
 8000c34:	4842      	ldr	r0, [pc, #264]	; (8000d40 <ST7789_Init+0x12c>)
 8000c36:	f001 fb63 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000c3a:	2014      	movs	r0, #20
 8000c3c:	f000 fdda 	bl	80017f4 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8000c40:	203a      	movs	r0, #58	; 0x3a
 8000c42:	f7ff fedb 	bl	80009fc <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8000c46:	2055      	movs	r0, #85	; 0x55
 8000c48:	f7ff ff36 	bl	8000ab8 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8000c4c:	20b2      	movs	r0, #178	; 0xb2
 8000c4e:	f7ff fed5 	bl	80009fc <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8000c52:	4a3c      	ldr	r2, [pc, #240]	; (8000d44 <ST7789_Init+0x130>)
 8000c54:	f107 0320 	add.w	r3, r7, #32
 8000c58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c5c:	6018      	str	r0, [r3, #0]
 8000c5e:	3304      	adds	r3, #4
 8000c60:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8000c62:	f107 0320 	add.w	r3, r7, #32
 8000c66:	2105      	movs	r1, #5
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff feed 	bl	8000a48 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8000c6e:	2002      	movs	r0, #2
 8000c70:	f7ff ff48 	bl	8000b04 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8000c74:	20b7      	movs	r0, #183	; 0xb7
 8000c76:	f7ff fec1 	bl	80009fc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8000c7a:	2035      	movs	r0, #53	; 0x35
 8000c7c:	f7ff ff1c 	bl	8000ab8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8000c80:	20bb      	movs	r0, #187	; 0xbb
 8000c82:	f7ff febb 	bl	80009fc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8000c86:	2019      	movs	r0, #25
 8000c88:	f7ff ff16 	bl	8000ab8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8000c8c:	20c0      	movs	r0, #192	; 0xc0
 8000c8e:	f7ff feb5 	bl	80009fc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8000c92:	202c      	movs	r0, #44	; 0x2c
 8000c94:	f7ff ff10 	bl	8000ab8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8000c98:	20c2      	movs	r0, #194	; 0xc2
 8000c9a:	f7ff feaf 	bl	80009fc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f7ff ff0a 	bl	8000ab8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8000ca4:	20c3      	movs	r0, #195	; 0xc3
 8000ca6:	f7ff fea9 	bl	80009fc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8000caa:	2012      	movs	r0, #18
 8000cac:	f7ff ff04 	bl	8000ab8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8000cb0:	20c4      	movs	r0, #196	; 0xc4
 8000cb2:	f7ff fea3 	bl	80009fc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8000cb6:	2020      	movs	r0, #32
 8000cb8:	f7ff fefe 	bl	8000ab8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8000cbc:	20c6      	movs	r0, #198	; 0xc6
 8000cbe:	f7ff fe9d 	bl	80009fc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8000cc2:	200f      	movs	r0, #15
 8000cc4:	f7ff fef8 	bl	8000ab8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8000cc8:	20d0      	movs	r0, #208	; 0xd0
 8000cca:	f7ff fe97 	bl	80009fc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8000cce:	20a4      	movs	r0, #164	; 0xa4
 8000cd0:	f7ff fef2 	bl	8000ab8 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000cd4:	20a1      	movs	r0, #161	; 0xa1
 8000cd6:	f7ff feef 	bl	8000ab8 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8000cda:	20e0      	movs	r0, #224	; 0xe0
 8000cdc:	f7ff fe8e 	bl	80009fc <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <ST7789_Init+0x134>)
 8000ce2:	f107 0410 	add.w	r4, r7, #16
 8000ce6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ce8:	c407      	stmia	r4!, {r0, r1, r2}
 8000cea:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	210e      	movs	r1, #14
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fea8 	bl	8000a48 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8000cf8:	20e1      	movs	r0, #225	; 0xe1
 8000cfa:	f7ff fe7f 	bl	80009fc <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <ST7789_Init+0x138>)
 8000d00:	463c      	mov	r4, r7
 8000d02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d04:	c407      	stmia	r4!, {r0, r1, r2}
 8000d06:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000d08:	463b      	mov	r3, r7
 8000d0a:	210e      	movs	r1, #14
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fe9b 	bl	8000a48 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8000d12:	2021      	movs	r0, #33	; 0x21
 8000d14:	f7ff fe72 	bl	80009fc <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000d18:	2011      	movs	r0, #17
 8000d1a:	f7ff fe6f 	bl	80009fc <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8000d1e:	2013      	movs	r0, #19
 8000d20:	f7ff fe6c 	bl	80009fc <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8000d24:	2029      	movs	r0, #41	; 0x29
 8000d26:	f7ff fe69 	bl	80009fc <ST7789_WriteCommand>

	HAL_Delay(50);
 8000d2a:	2032      	movs	r0, #50	; 0x32
 8000d2c:	f000 fd62 	bl	80017f4 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8000d30:	2000      	movs	r0, #0
 8000d32:	f000 f80d 	bl	8000d50 <ST7789_Fill_Color>
}
 8000d36:	bf00      	nop
 8000d38:	372c      	adds	r7, #44	; 0x2c
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd90      	pop	{r4, r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40010c00 	.word	0x40010c00
 8000d44:	080031ac 	.word	0x080031ac
 8000d48:	080031b4 	.word	0x080031b4
 8000d4c:	080031c4 	.word	0x080031c4

08000d50 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8000d5a:	23ef      	movs	r3, #239	; 0xef
 8000d5c:	22ef      	movs	r2, #239	; 0xef
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff fefb 	bl	8000b5c <ST7789_SetAddressWindow>
	ST7789_Select();
 8000d66:	2200      	movs	r2, #0
 8000d68:	2110      	movs	r1, #16
 8000d6a:	4816      	ldr	r0, [pc, #88]	; (8000dc4 <ST7789_Fill_Color+0x74>)
 8000d6c:	f001 fac8 	bl	8002300 <HAL_GPIO_WritePin>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	81fb      	strh	r3, [r7, #14]
 8000d74:	e019      	b.n	8000daa <ST7789_Fill_Color+0x5a>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8000d76:	2300      	movs	r3, #0
 8000d78:	81bb      	strh	r3, [r7, #12]
 8000d7a:	e010      	b.n	8000d9e <ST7789_Fill_Color+0x4e>
					uint8_t data[] = {color >> 8, color & 0xFF};
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	0a1b      	lsrs	r3, r3, #8
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	723b      	strb	r3, [r7, #8]
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	2102      	movs	r1, #2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fe58 	bl	8000a48 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8000d98:	89bb      	ldrh	r3, [r7, #12]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	81bb      	strh	r3, [r7, #12]
 8000d9e:	89bb      	ldrh	r3, [r7, #12]
 8000da0:	2bef      	cmp	r3, #239	; 0xef
 8000da2:	d9eb      	bls.n	8000d7c <ST7789_Fill_Color+0x2c>
		for (i = 0; i < ST7789_WIDTH; i++)
 8000da4:	89fb      	ldrh	r3, [r7, #14]
 8000da6:	3301      	adds	r3, #1
 8000da8:	81fb      	strh	r3, [r7, #14]
 8000daa:	89fb      	ldrh	r3, [r7, #14]
 8000dac:	2bef      	cmp	r3, #239	; 0xef
 8000dae:	d9e2      	bls.n	8000d76 <ST7789_Fill_Color+0x26>
				}
	#endif
	ST7789_UnSelect();
 8000db0:	2201      	movs	r2, #1
 8000db2:	2110      	movs	r1, #16
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <ST7789_Fill_Color+0x74>)
 8000db6:	f001 faa3 	bl	8002300 <HAL_GPIO_WritePin>
}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40010800 	.word	0x40010800

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b598      	push	{r3, r4, r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dcc:	f000 fcb0 	bl	8001730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd0:	f000 fa0a 	bl	80011e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd4:	f000 fb12 	bl	80013fc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000dd8:	f000 fada 	bl	8001390 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000ddc:	f000 fa5c 	bl	8001298 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000de0:	f000 fa98 	bl	8001314 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 8000de4:	f7ff ff16 	bl	8000c14 <ST7789_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  currentVMAX = -999999;
 8000de8:	4a11      	ldr	r2, [pc, #68]	; (8000e30 <main+0x68>)
 8000dea:	a40d      	add	r4, pc, #52	; (adr r4, 8000e20 <main+0x58>)
 8000dec:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000df0:	e9c2 3400 	strd	r3, r4, [r2]
	  currentVMIN = 999999;
 8000df4:	4a0f      	ldr	r2, [pc, #60]	; (8000e34 <main+0x6c>)
 8000df6:	a40c      	add	r4, pc, #48	; (adr r4, 8000e28 <main+0x60>)
 8000df8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000dfc:	e9c2 3400 	strd	r3, r4, [r2]
	  voltageVMAX = -999999;
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <main+0x70>)
 8000e02:	a407      	add	r4, pc, #28	; (adr r4, 8000e20 <main+0x58>)
 8000e04:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000e08:	e9c2 3400 	strd	r3, r4, [r2]
	  voltageVMIN = 999999;
 8000e0c:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <main+0x74>)
 8000e0e:	a406      	add	r4, pc, #24	; (adr r4, 8000e28 <main+0x60>)
 8000e10:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000e14:	e9c2 3400 	strd	r3, r4, [r2]

	for (i = 0; i < 100; i++) {
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <main+0x78>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e0d6      	b.n	8000fce <main+0x206>
 8000e20:	00000000 	.word	0x00000000
 8000e24:	c12e847e 	.word	0xc12e847e
 8000e28:	00000000 	.word	0x00000000
 8000e2c:	412e847e 	.word	0x412e847e
 8000e30:	200000c8 	.word	0x200000c8
 8000e34:	20000168 	.word	0x20000168
 8000e38:	200000b8 	.word	0x200000b8
 8000e3c:	20000160 	.word	0x20000160
 8000e40:	200000c0 	.word	0x200000c0
		//	HAL_ADC_Start(&hadc1);
		//	sumRawCurrentInput += HAL_ADC_GetValue(&hadc1);
		//}

	//Corrente
		HAL_ADC_Start(&hadc1);
 8000e44:	48a6      	ldr	r0, [pc, #664]	; (80010e0 <main+0x318>)
 8000e46:	f000 fdcf 	bl	80019e8 <HAL_ADC_Start>
		rawCurrentInput = HAL_ADC_GetValue(&hadc1);
 8000e4a:	48a5      	ldr	r0, [pc, #660]	; (80010e0 <main+0x318>)
 8000e4c:	f000 fe7a 	bl	8001b44 <HAL_ADC_GetValue>
 8000e50:	4602      	mov	r2, r0
 8000e52:	4ba4      	ldr	r3, [pc, #656]	; (80010e4 <main+0x31c>)
 8000e54:	601a      	str	r2, [r3, #0]
		currentV = ((double)rawCurrentInput/4096)*3.3;
 8000e56:	4ba3      	ldr	r3, [pc, #652]	; (80010e4 <main+0x31c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff faba 	bl	80003d4 <__aeabi_ui2d>
 8000e60:	f04f 0200 	mov.w	r2, #0
 8000e64:	4ba0      	ldr	r3, [pc, #640]	; (80010e8 <main+0x320>)
 8000e66:	f7ff fc59 	bl	800071c <__aeabi_ddiv>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	460c      	mov	r4, r1
 8000e6e:	4618      	mov	r0, r3
 8000e70:	4621      	mov	r1, r4
 8000e72:	a391      	add	r3, pc, #580	; (adr r3, 80010b8 <main+0x2f0>)
 8000e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e78:	f7ff fb26 	bl	80004c8 <__aeabi_dmul>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	460c      	mov	r4, r1
 8000e80:	4a9a      	ldr	r2, [pc, #616]	; (80010ec <main+0x324>)
 8000e82:	e9c2 3400 	strd	r3, r4, [r2]

		if (currentVMAX < currentV) {
 8000e86:	4b9a      	ldr	r3, [pc, #616]	; (80010f0 <main+0x328>)
 8000e88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e8c:	4b97      	ldr	r3, [pc, #604]	; (80010ec <main+0x324>)
 8000e8e:	cb18      	ldmia	r3, {r3, r4}
 8000e90:	461a      	mov	r2, r3
 8000e92:	4623      	mov	r3, r4
 8000e94:	f7ff fd8a 	bl	80009ac <__aeabi_dcmplt>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d004      	beq.n	8000ea8 <main+0xe0>
			currentVMAX = currentV;
 8000e9e:	4b93      	ldr	r3, [pc, #588]	; (80010ec <main+0x324>)
 8000ea0:	cb18      	ldmia	r3, {r3, r4}
 8000ea2:	4a93      	ldr	r2, [pc, #588]	; (80010f0 <main+0x328>)
 8000ea4:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if (currentVMIN > currentV) {
 8000ea8:	4b92      	ldr	r3, [pc, #584]	; (80010f4 <main+0x32c>)
 8000eaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eae:	4b8f      	ldr	r3, [pc, #572]	; (80010ec <main+0x324>)
 8000eb0:	cb18      	ldmia	r3, {r3, r4}
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4623      	mov	r3, r4
 8000eb6:	f7ff fd97 	bl	80009e8 <__aeabi_dcmpgt>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d004      	beq.n	8000eca <main+0x102>
			currentVMIN = currentV;
 8000ec0:	4b8a      	ldr	r3, [pc, #552]	; (80010ec <main+0x324>)
 8000ec2:	cb18      	ldmia	r3, {r3, r4}
 8000ec4:	4a8b      	ldr	r2, [pc, #556]	; (80010f4 <main+0x32c>)
 8000ec6:	e9c2 3400 	strd	r3, r4, [r2]
		}

		currentV = ((double)rawCurrentInput/4096)*3.3;
 8000eca:	4b86      	ldr	r3, [pc, #536]	; (80010e4 <main+0x31c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fa80 	bl	80003d4 <__aeabi_ui2d>
 8000ed4:	f04f 0200 	mov.w	r2, #0
 8000ed8:	4b83      	ldr	r3, [pc, #524]	; (80010e8 <main+0x320>)
 8000eda:	f7ff fc1f 	bl	800071c <__aeabi_ddiv>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	460c      	mov	r4, r1
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	4621      	mov	r1, r4
 8000ee6:	a374      	add	r3, pc, #464	; (adr r3, 80010b8 <main+0x2f0>)
 8000ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eec:	f7ff faec 	bl	80004c8 <__aeabi_dmul>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	460c      	mov	r4, r1
 8000ef4:	4a7d      	ldr	r2, [pc, #500]	; (80010ec <main+0x324>)
 8000ef6:	e9c2 3400 	strd	r3, r4, [r2]

		if (currentVMAX < currentV) {
 8000efa:	4b7d      	ldr	r3, [pc, #500]	; (80010f0 <main+0x328>)
 8000efc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f00:	4b7a      	ldr	r3, [pc, #488]	; (80010ec <main+0x324>)
 8000f02:	cb18      	ldmia	r3, {r3, r4}
 8000f04:	461a      	mov	r2, r3
 8000f06:	4623      	mov	r3, r4
 8000f08:	f7ff fd50 	bl	80009ac <__aeabi_dcmplt>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d004      	beq.n	8000f1c <main+0x154>
			currentVMAX = currentV;
 8000f12:	4b76      	ldr	r3, [pc, #472]	; (80010ec <main+0x324>)
 8000f14:	cb18      	ldmia	r3, {r3, r4}
 8000f16:	4a76      	ldr	r2, [pc, #472]	; (80010f0 <main+0x328>)
 8000f18:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if (currentVMIN > currentV) {
 8000f1c:	4b75      	ldr	r3, [pc, #468]	; (80010f4 <main+0x32c>)
 8000f1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f22:	4b72      	ldr	r3, [pc, #456]	; (80010ec <main+0x324>)
 8000f24:	cb18      	ldmia	r3, {r3, r4}
 8000f26:	461a      	mov	r2, r3
 8000f28:	4623      	mov	r3, r4
 8000f2a:	f7ff fd5d 	bl	80009e8 <__aeabi_dcmpgt>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d004      	beq.n	8000f3e <main+0x176>
			currentVMIN = currentV;
 8000f34:	4b6d      	ldr	r3, [pc, #436]	; (80010ec <main+0x324>)
 8000f36:	cb18      	ldmia	r3, {r3, r4}
 8000f38:	4a6e      	ldr	r2, [pc, #440]	; (80010f4 <main+0x32c>)
 8000f3a:	e9c2 3400 	strd	r3, r4, [r2]
		//for (i = 0; i < 10; i++) {
		//	HAL_ADC_Start(&hadc2);
		//	sumRawVoltageInput += HAL_ADC_GetValue(&hadc2);
		//}

		HAL_ADC_Start(&hadc2);
 8000f3e:	486e      	ldr	r0, [pc, #440]	; (80010f8 <main+0x330>)
 8000f40:	f000 fd52 	bl	80019e8 <HAL_ADC_Start>
		rawVoltageInput = HAL_ADC_GetValue(&hadc2);
 8000f44:	486c      	ldr	r0, [pc, #432]	; (80010f8 <main+0x330>)
 8000f46:	f000 fdfd 	bl	8001b44 <HAL_ADC_GetValue>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	4b6b      	ldr	r3, [pc, #428]	; (80010fc <main+0x334>)
 8000f4e:	601a      	str	r2, [r3, #0]
		//rawVoltageInput = sumRawVoltageInput / 10;
		voltageV = ((double)rawVoltageInput/4096)*3.3;
 8000f50:	4b6a      	ldr	r3, [pc, #424]	; (80010fc <main+0x334>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fa3d 	bl	80003d4 <__aeabi_ui2d>
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	4b62      	ldr	r3, [pc, #392]	; (80010e8 <main+0x320>)
 8000f60:	f7ff fbdc 	bl	800071c <__aeabi_ddiv>
 8000f64:	4603      	mov	r3, r0
 8000f66:	460c      	mov	r4, r1
 8000f68:	4618      	mov	r0, r3
 8000f6a:	4621      	mov	r1, r4
 8000f6c:	a352      	add	r3, pc, #328	; (adr r3, 80010b8 <main+0x2f0>)
 8000f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f72:	f7ff faa9 	bl	80004c8 <__aeabi_dmul>
 8000f76:	4603      	mov	r3, r0
 8000f78:	460c      	mov	r4, r1
 8000f7a:	4a61      	ldr	r2, [pc, #388]	; (8001100 <main+0x338>)
 8000f7c:	e9c2 3400 	strd	r3, r4, [r2]

		if (voltageVMAX < voltageV) {
 8000f80:	4b60      	ldr	r3, [pc, #384]	; (8001104 <main+0x33c>)
 8000f82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f86:	4b5e      	ldr	r3, [pc, #376]	; (8001100 <main+0x338>)
 8000f88:	cb18      	ldmia	r3, {r3, r4}
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4623      	mov	r3, r4
 8000f8e:	f7ff fd0d 	bl	80009ac <__aeabi_dcmplt>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d004      	beq.n	8000fa2 <main+0x1da>
			voltageVMAX = voltageV;
 8000f98:	4b59      	ldr	r3, [pc, #356]	; (8001100 <main+0x338>)
 8000f9a:	cb18      	ldmia	r3, {r3, r4}
 8000f9c:	4a59      	ldr	r2, [pc, #356]	; (8001104 <main+0x33c>)
 8000f9e:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if (voltageVMIN > voltageV) {
 8000fa2:	4b59      	ldr	r3, [pc, #356]	; (8001108 <main+0x340>)
 8000fa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fa8:	4b55      	ldr	r3, [pc, #340]	; (8001100 <main+0x338>)
 8000faa:	cb18      	ldmia	r3, {r3, r4}
 8000fac:	461a      	mov	r2, r3
 8000fae:	4623      	mov	r3, r4
 8000fb0:	f7ff fd1a 	bl	80009e8 <__aeabi_dcmpgt>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d004      	beq.n	8000fc4 <main+0x1fc>
			voltageVMIN = voltageV;
 8000fba:	4b51      	ldr	r3, [pc, #324]	; (8001100 <main+0x338>)
 8000fbc:	cb18      	ldmia	r3, {r3, r4}
 8000fbe:	4a52      	ldr	r2, [pc, #328]	; (8001108 <main+0x340>)
 8000fc0:	e9c2 3400 	strd	r3, r4, [r2]
	for (i = 0; i < 100; i++) {
 8000fc4:	4b51      	ldr	r3, [pc, #324]	; (800110c <main+0x344>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	4a50      	ldr	r2, [pc, #320]	; (800110c <main+0x344>)
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	4b4f      	ldr	r3, [pc, #316]	; (800110c <main+0x344>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b63      	cmp	r3, #99	; 0x63
 8000fd4:	f77f af36 	ble.w	8000e44 <main+0x7c>
		}

	}

	currentVRMS = (currentVMAX - currentVMIN) / (2 * sqrt(2));
 8000fd8:	4b45      	ldr	r3, [pc, #276]	; (80010f0 <main+0x328>)
 8000fda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fde:	4b45      	ldr	r3, [pc, #276]	; (80010f4 <main+0x32c>)
 8000fe0:	cb18      	ldmia	r3, {r3, r4}
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4623      	mov	r3, r4
 8000fe6:	f7ff f8b7 	bl	8000158 <__aeabi_dsub>
 8000fea:	4603      	mov	r3, r0
 8000fec:	460c      	mov	r4, r1
 8000fee:	4618      	mov	r0, r3
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	a333      	add	r3, pc, #204	; (adr r3, 80010c0 <main+0x2f8>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff fb90 	bl	800071c <__aeabi_ddiv>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	460c      	mov	r4, r1
 8001000:	4a43      	ldr	r2, [pc, #268]	; (8001110 <main+0x348>)
 8001002:	e9c2 3400 	strd	r3, r4, [r2]
	voltageVRMS = (voltageVMAX - voltageVMIN) / (2 * sqrt(2));
 8001006:	4b3f      	ldr	r3, [pc, #252]	; (8001104 <main+0x33c>)
 8001008:	e9d3 0100 	ldrd	r0, r1, [r3]
 800100c:	4b3e      	ldr	r3, [pc, #248]	; (8001108 <main+0x340>)
 800100e:	cb18      	ldmia	r3, {r3, r4}
 8001010:	461a      	mov	r2, r3
 8001012:	4623      	mov	r3, r4
 8001014:	f7ff f8a0 	bl	8000158 <__aeabi_dsub>
 8001018:	4603      	mov	r3, r0
 800101a:	460c      	mov	r4, r1
 800101c:	4618      	mov	r0, r3
 800101e:	4621      	mov	r1, r4
 8001020:	a327      	add	r3, pc, #156	; (adr r3, 80010c0 <main+0x2f8>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff fb79 	bl	800071c <__aeabi_ddiv>
 800102a:	4603      	mov	r3, r0
 800102c:	460c      	mov	r4, r1
 800102e:	4a39      	ldr	r2, [pc, #228]	; (8001114 <main+0x34c>)
 8001030:	e9c2 3400 	strd	r3, r4, [r2]

	currentOutput = previousCurrentOutput + 0.3 * ((currentVRMS * 3.565592)-previousCurrentOutput);      //currentVRMS * (4.020);
 8001034:	4b36      	ldr	r3, [pc, #216]	; (8001110 <main+0x348>)
 8001036:	e9d3 0100 	ldrd	r0, r1, [r3]
 800103a:	a323      	add	r3, pc, #140	; (adr r3, 80010c8 <main+0x300>)
 800103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001040:	f7ff fa42 	bl	80004c8 <__aeabi_dmul>
 8001044:	4603      	mov	r3, r0
 8001046:	460c      	mov	r4, r1
 8001048:	4618      	mov	r0, r3
 800104a:	4621      	mov	r1, r4
 800104c:	4b32      	ldr	r3, [pc, #200]	; (8001118 <main+0x350>)
 800104e:	cb18      	ldmia	r3, {r3, r4}
 8001050:	461a      	mov	r2, r3
 8001052:	4623      	mov	r3, r4
 8001054:	f7ff f880 	bl	8000158 <__aeabi_dsub>
 8001058:	4603      	mov	r3, r0
 800105a:	460c      	mov	r4, r1
 800105c:	4618      	mov	r0, r3
 800105e:	4621      	mov	r1, r4
 8001060:	a31b      	add	r3, pc, #108	; (adr r3, 80010d0 <main+0x308>)
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	f7ff fa2f 	bl	80004c8 <__aeabi_dmul>
 800106a:	4603      	mov	r3, r0
 800106c:	460c      	mov	r4, r1
 800106e:	4618      	mov	r0, r3
 8001070:	4621      	mov	r1, r4
 8001072:	4b29      	ldr	r3, [pc, #164]	; (8001118 <main+0x350>)
 8001074:	cb18      	ldmia	r3, {r3, r4}
 8001076:	461a      	mov	r2, r3
 8001078:	4623      	mov	r3, r4
 800107a:	f7ff f86f 	bl	800015c <__adddf3>
 800107e:	4603      	mov	r3, r0
 8001080:	460c      	mov	r4, r1
 8001082:	4a26      	ldr	r2, [pc, #152]	; (800111c <main+0x354>)
 8001084:	e9c2 3400 	strd	r3, r4, [r2]
	voltageOutput = previousVoltageOutput + 0.3 * ((voltageVRMS * 705.555555)-previousVoltageOutput);
 8001088:	4b22      	ldr	r3, [pc, #136]	; (8001114 <main+0x34c>)
 800108a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800108e:	a312      	add	r3, pc, #72	; (adr r3, 80010d8 <main+0x310>)
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	f7ff fa18 	bl	80004c8 <__aeabi_dmul>
 8001098:	4603      	mov	r3, r0
 800109a:	460c      	mov	r4, r1
 800109c:	4618      	mov	r0, r3
 800109e:	4621      	mov	r1, r4
 80010a0:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <main+0x358>)
 80010a2:	cb18      	ldmia	r3, {r3, r4}
 80010a4:	461a      	mov	r2, r3
 80010a6:	4623      	mov	r3, r4
 80010a8:	f7ff f856 	bl	8000158 <__aeabi_dsub>
 80010ac:	4603      	mov	r3, r0
 80010ae:	460c      	mov	r4, r1
 80010b0:	4618      	mov	r0, r3
 80010b2:	4621      	mov	r1, r4
 80010b4:	e036      	b.n	8001124 <main+0x35c>
 80010b6:	bf00      	nop
 80010b8:	66666666 	.word	0x66666666
 80010bc:	400a6666 	.word	0x400a6666
 80010c0:	667f3bcd 	.word	0x667f3bcd
 80010c4:	4006a09e 	.word	0x4006a09e
 80010c8:	193708ab 	.word	0x193708ab
 80010cc:	400c8655 	.word	0x400c8655
 80010d0:	33333333 	.word	0x33333333
 80010d4:	3fd33333 	.word	0x3fd33333
 80010d8:	c6d1e109 	.word	0xc6d1e109
 80010dc:	40860c71 	.word	0x40860c71
 80010e0:	20000088 	.word	0x20000088
 80010e4:	20000158 	.word	0x20000158
 80010e8:	40b00000 	.word	0x40b00000
 80010ec:	200000d0 	.word	0x200000d0
 80010f0:	200000c8 	.word	0x200000c8
 80010f4:	20000168 	.word	0x20000168
 80010f8:	2000004c 	.word	0x2000004c
 80010fc:	20000048 	.word	0x20000048
 8001100:	200000d8 	.word	0x200000d8
 8001104:	200000b8 	.word	0x200000b8
 8001108:	20000160 	.word	0x20000160
 800110c:	200000c0 	.word	0x200000c0
 8001110:	200000e8 	.word	0x200000e8
 8001114:	200000f8 	.word	0x200000f8
 8001118:	20000038 	.word	0x20000038
 800111c:	200000f0 	.word	0x200000f0
 8001120:	20000030 	.word	0x20000030
 8001124:	a328      	add	r3, pc, #160	; (adr r3, 80011c8 <main+0x400>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	f7ff f9cd 	bl	80004c8 <__aeabi_dmul>
 800112e:	4603      	mov	r3, r0
 8001130:	460c      	mov	r4, r1
 8001132:	4618      	mov	r0, r3
 8001134:	4621      	mov	r1, r4
 8001136:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <main+0x408>)
 8001138:	cb18      	ldmia	r3, {r3, r4}
 800113a:	461a      	mov	r2, r3
 800113c:	4623      	mov	r3, r4
 800113e:	f7ff f80d 	bl	800015c <__adddf3>
 8001142:	4603      	mov	r3, r0
 8001144:	460c      	mov	r4, r1
 8001146:	4a23      	ldr	r2, [pc, #140]	; (80011d4 <main+0x40c>)
 8001148:	e9c2 3400 	strd	r3, r4, [r2]
	powerOutput = previousPowerOutput + 0.3 * ((voltageOutput * currentOutput)-previousPowerOutput);
 800114c:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <main+0x40c>)
 800114e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <main+0x410>)
 8001154:	cb18      	ldmia	r3, {r3, r4}
 8001156:	461a      	mov	r2, r3
 8001158:	4623      	mov	r3, r4
 800115a:	f7ff f9b5 	bl	80004c8 <__aeabi_dmul>
 800115e:	4603      	mov	r3, r0
 8001160:	460c      	mov	r4, r1
 8001162:	4618      	mov	r0, r3
 8001164:	4621      	mov	r1, r4
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <main+0x414>)
 8001168:	cb18      	ldmia	r3, {r3, r4}
 800116a:	461a      	mov	r2, r3
 800116c:	4623      	mov	r3, r4
 800116e:	f7fe fff3 	bl	8000158 <__aeabi_dsub>
 8001172:	4603      	mov	r3, r0
 8001174:	460c      	mov	r4, r1
 8001176:	4618      	mov	r0, r3
 8001178:	4621      	mov	r1, r4
 800117a:	a313      	add	r3, pc, #76	; (adr r3, 80011c8 <main+0x400>)
 800117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001180:	f7ff f9a2 	bl	80004c8 <__aeabi_dmul>
 8001184:	4603      	mov	r3, r0
 8001186:	460c      	mov	r4, r1
 8001188:	4618      	mov	r0, r3
 800118a:	4621      	mov	r1, r4
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <main+0x414>)
 800118e:	cb18      	ldmia	r3, {r3, r4}
 8001190:	461a      	mov	r2, r3
 8001192:	4623      	mov	r3, r4
 8001194:	f7fe ffe2 	bl	800015c <__adddf3>
 8001198:	4603      	mov	r3, r0
 800119a:	460c      	mov	r4, r1
 800119c:	4a10      	ldr	r2, [pc, #64]	; (80011e0 <main+0x418>)
 800119e:	e9c2 3400 	strd	r3, r4, [r2]

	previousVoltageOutput = voltageOutput;
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <main+0x40c>)
 80011a4:	cb18      	ldmia	r3, {r3, r4}
 80011a6:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <main+0x408>)
 80011a8:	e9c2 3400 	strd	r3, r4, [r2]
	previousCurrentOutput = currentOutput;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <main+0x410>)
 80011ae:	cb18      	ldmia	r3, {r3, r4}
 80011b0:	4a0c      	ldr	r2, [pc, #48]	; (80011e4 <main+0x41c>)
 80011b2:	e9c2 3400 	strd	r3, r4, [r2]
	previousPowerOutput = powerOutput;
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <main+0x418>)
 80011b8:	cb18      	ldmia	r3, {r3, r4}
 80011ba:	4a08      	ldr	r2, [pc, #32]	; (80011dc <main+0x414>)
 80011bc:	e9c2 3400 	strd	r3, r4, [r2]
	  currentVMAX = -999999;
 80011c0:	e612      	b.n	8000de8 <main+0x20>
 80011c2:	bf00      	nop
 80011c4:	f3af 8000 	nop.w
 80011c8:	33333333 	.word	0x33333333
 80011cc:	3fd33333 	.word	0x3fd33333
 80011d0:	20000030 	.word	0x20000030
 80011d4:	20000080 	.word	0x20000080
 80011d8:	200000f0 	.word	0x200000f0
 80011dc:	20000040 	.word	0x20000040
 80011e0:	200000e0 	.word	0x200000e0
 80011e4:	20000038 	.word	0x20000038

080011e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b094      	sub	sp, #80	; 0x50
 80011ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f2:	2228      	movs	r2, #40	; 0x28
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 ffc4 	bl	8003184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001218:	2302      	movs	r3, #2
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800121c:	2301      	movs	r3, #1
 800121e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001220:	2310      	movs	r3, #16
 8001222:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001224:	2302      	movs	r3, #2
 8001226:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001228:	2300      	movs	r3, #0
 800122a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800122c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001230:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001236:	4618      	mov	r0, r3
 8001238:	f001 f87a 	bl	8002330 <HAL_RCC_OscConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001242:	f000 f93b 	bl	80014bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001246:	230f      	movs	r3, #15
 8001248:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124a:	2302      	movs	r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001256:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2102      	movs	r1, #2
 8001262:	4618      	mov	r0, r3
 8001264:	f001 fae4 	bl	8002830 <HAL_RCC_ClockConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800126e:	f000 f925 	bl	80014bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001272:	2302      	movs	r3, #2
 8001274:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001276:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800127a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4618      	mov	r0, r3
 8001280:	f001 fc40 	bl	8002b04 <HAL_RCCEx_PeriphCLKConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800128a:	f000 f917 	bl	80014bc <Error_Handler>
  }
}
 800128e:	bf00      	nop
 8001290:	3750      	adds	r7, #80	; 0x50
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <MX_ADC1_Init+0x74>)
 80012aa:	4a19      	ldr	r2, [pc, #100]	; (8001310 <MX_ADC1_Init+0x78>)
 80012ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <MX_ADC1_Init+0x74>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <MX_ADC1_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_ADC1_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_ADC1_Init+0x74>)
 80012c2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_ADC1_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_ADC1_Init+0x74>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012d4:	480d      	ldr	r0, [pc, #52]	; (800130c <MX_ADC1_Init+0x74>)
 80012d6:	f000 faaf 	bl	8001838 <HAL_ADC_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80012e0:	f000 f8ec 	bl	80014bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_ADC1_Init+0x74>)
 80012f6:	f000 fc31 	bl	8001b5c <HAL_ADC_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001300:	f000 f8dc 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000088 	.word	0x20000088
 8001310:	40012400 	.word	0x40012400

08001314 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <MX_ADC2_Init+0x74>)
 8001326:	4a19      	ldr	r2, [pc, #100]	; (800138c <MX_ADC2_Init+0x78>)
 8001328:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_ADC2_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_ADC2_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_ADC2_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_ADC2_Init+0x74>)
 800133e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001342:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001344:	4b10      	ldr	r3, [pc, #64]	; (8001388 <MX_ADC2_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_ADC2_Init+0x74>)
 800134c:	2201      	movs	r2, #1
 800134e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001350:	480d      	ldr	r0, [pc, #52]	; (8001388 <MX_ADC2_Init+0x74>)
 8001352:	f000 fa71 	bl	8001838 <HAL_ADC_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800135c:	f000 f8ae 	bl	80014bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001360:	2301      	movs	r3, #1
 8001362:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001364:	2301      	movs	r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_ADC2_Init+0x74>)
 8001372:	f000 fbf3 	bl	8001b5c <HAL_ADC_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800137c:	f000 f89e 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2000004c 	.word	0x2000004c
 800138c:	40012800 	.word	0x40012800

08001390 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <MX_SPI1_Init+0x64>)
 8001396:	4a18      	ldr	r2, [pc, #96]	; (80013f8 <MX_SPI1_Init+0x68>)
 8001398:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <MX_SPI1_Init+0x64>)
 800139c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <MX_SPI1_Init+0x64>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <MX_SPI1_Init+0x64>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_SPI1_Init+0x64>)
 80013b0:	2202      	movs	r2, #2
 80013b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <MX_SPI1_Init+0x64>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_SPI1_Init+0x64>)
 80013bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_SPI1_Init+0x64>)
 80013c4:	2208      	movs	r2, #8
 80013c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <MX_SPI1_Init+0x64>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_SPI1_Init+0x64>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013d4:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <MX_SPI1_Init+0x64>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_SPI1_Init+0x64>)
 80013dc:	220a      	movs	r2, #10
 80013de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013e0:	4804      	ldr	r0, [pc, #16]	; (80013f4 <MX_SPI1_Init+0x64>)
 80013e2:	f001 fc45 	bl	8002c70 <HAL_SPI_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013ec:	f000 f866 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000100 	.word	0x20000100
 80013f8:	40013000 	.word	0x40013000

080013fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	f107 0308 	add.w	r3, r7, #8
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001410:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <MX_GPIO_Init+0xb4>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a26      	ldr	r2, [pc, #152]	; (80014b0 <MX_GPIO_Init+0xb4>)
 8001416:	f043 0304 	orr.w	r3, r3, #4
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <MX_GPIO_Init+0xb4>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001428:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <MX_GPIO_Init+0xb4>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a20      	ldr	r2, [pc, #128]	; (80014b0 <MX_GPIO_Init+0xb4>)
 800142e:	f043 0308 	orr.w	r3, r3, #8
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <MX_GPIO_Init+0xb4>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2110      	movs	r1, #16
 8001444:	481b      	ldr	r0, [pc, #108]	; (80014b4 <MX_GPIO_Init+0xb8>)
 8001446:	f000 ff5b 	bl	8002300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7789_DC_Pin|ST7789_RST_Pin|GPIO_PIN_3, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	210b      	movs	r1, #11
 800144e:	481a      	ldr	r0, [pc, #104]	; (80014b8 <MX_GPIO_Init+0xbc>)
 8001450:	f000 ff56 	bl	8002300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 8001454:	2310      	movs	r3, #16
 8001456:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2302      	movs	r3, #2
 8001462:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 0308 	add.w	r3, r7, #8
 8001468:	4619      	mov	r1, r3
 800146a:	4812      	ldr	r0, [pc, #72]	; (80014b4 <MX_GPIO_Init+0xb8>)
 800146c:	f000 fdee 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7789_DC_Pin ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_RST_Pin;
 8001470:	2303      	movs	r3, #3
 8001472:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2302      	movs	r3, #2
 800147e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4619      	mov	r1, r3
 8001486:	480c      	ldr	r0, [pc, #48]	; (80014b8 <MX_GPIO_Init+0xbc>)
 8001488:	f000 fde0 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800148c:	2308      	movs	r3, #8
 800148e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	2301      	movs	r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001494:	2302      	movs	r3, #2
 8001496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2302      	movs	r3, #2
 800149a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	4619      	mov	r1, r3
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <MX_GPIO_Init+0xbc>)
 80014a4:	f000 fdd2 	bl	800204c <HAL_GPIO_Init>

}
 80014a8:	bf00      	nop
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010800 	.word	0x40010800
 80014b8:	40010c00 	.word	0x40010c00

080014bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <Error_Handler+0x6>

080014c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_MspInit+0x5c>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	4a14      	ldr	r2, [pc, #80]	; (8001520 <HAL_MspInit+0x5c>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6193      	str	r3, [r2, #24]
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_MspInit+0x5c>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_MspInit+0x5c>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <HAL_MspInit+0x5c>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	61d3      	str	r3, [r2, #28]
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_MspInit+0x5c>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_MspInit+0x60>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <HAL_MspInit+0x60>)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	40021000 	.word	0x40021000
 8001524:	40010000 	.word	0x40010000

08001528 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0318 	add.w	r3, r7, #24
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a28      	ldr	r2, [pc, #160]	; (80015e4 <HAL_ADC_MspInit+0xbc>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d122      	bne.n	800158e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001548:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <HAL_ADC_MspInit+0xc0>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a26      	ldr	r2, [pc, #152]	; (80015e8 <HAL_ADC_MspInit+0xc0>)
 800154e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001552:	6193      	str	r3, [r2, #24]
 8001554:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <HAL_ADC_MspInit+0xc0>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <HAL_ADC_MspInit+0xc0>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a20      	ldr	r2, [pc, #128]	; (80015e8 <HAL_ADC_MspInit+0xc0>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <HAL_ADC_MspInit+0xc0>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001578:	2301      	movs	r3, #1
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800157c:	2303      	movs	r3, #3
 800157e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 0318 	add.w	r3, r7, #24
 8001584:	4619      	mov	r1, r3
 8001586:	4819      	ldr	r0, [pc, #100]	; (80015ec <HAL_ADC_MspInit+0xc4>)
 8001588:	f000 fd60 	bl	800204c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800158c:	e026      	b.n	80015dc <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <HAL_ADC_MspInit+0xc8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d121      	bne.n	80015dc <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <HAL_ADC_MspInit+0xc0>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <HAL_ADC_MspInit+0xc0>)
 800159e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_ADC_MspInit+0xc0>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <HAL_ADC_MspInit+0xc0>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a0c      	ldr	r2, [pc, #48]	; (80015e8 <HAL_ADC_MspInit+0xc0>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <HAL_ADC_MspInit+0xc0>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015cc:	2303      	movs	r3, #3
 80015ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d0:	f107 0318 	add.w	r3, r7, #24
 80015d4:	4619      	mov	r1, r3
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <HAL_ADC_MspInit+0xc4>)
 80015d8:	f000 fd38 	bl	800204c <HAL_GPIO_Init>
}
 80015dc:	bf00      	nop
 80015de:	3728      	adds	r7, #40	; 0x28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40012400 	.word	0x40012400
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010800 	.word	0x40010800
 80015f0:	40012800 	.word	0x40012800

080015f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a1b      	ldr	r2, [pc, #108]	; (800167c <HAL_SPI_MspInit+0x88>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d12f      	bne.n	8001674 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <HAL_SPI_MspInit+0x8c>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a19      	ldr	r2, [pc, #100]	; (8001680 <HAL_SPI_MspInit+0x8c>)
 800161a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_SPI_MspInit+0x8c>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_SPI_MspInit+0x8c>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	4a13      	ldr	r2, [pc, #76]	; (8001680 <HAL_SPI_MspInit+0x8c>)
 8001632:	f043 0304 	orr.w	r3, r3, #4
 8001636:	6193      	str	r3, [r2, #24]
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_SPI_MspInit+0x8c>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001644:	23a0      	movs	r3, #160	; 0xa0
 8001646:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	4619      	mov	r1, r3
 8001656:	480b      	ldr	r0, [pc, #44]	; (8001684 <HAL_SPI_MspInit+0x90>)
 8001658:	f000 fcf8 	bl	800204c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800165c:	2340      	movs	r3, #64	; 0x40
 800165e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	4619      	mov	r1, r3
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <HAL_SPI_MspInit+0x90>)
 8001670:	f000 fcec 	bl	800204c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001674:	bf00      	nop
 8001676:	3720      	adds	r7, #32
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40013000 	.word	0x40013000
 8001680:	40021000 	.word	0x40021000
 8001684:	40010800 	.word	0x40010800

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800168c:	e7fe      	b.n	800168c <NMI_Handler+0x4>

0800168e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <HardFault_Handler+0x4>

08001694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <MemManage_Handler+0x4>

0800169a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr

080016be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ce:	f000 f875 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
	...

080016e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016e4:	480c      	ldr	r0, [pc, #48]	; (8001718 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016e6:	490d      	ldr	r1, [pc, #52]	; (800171c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ec:	e002      	b.n	80016f4 <LoopCopyDataInit>

080016ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f2:	3304      	adds	r3, #4

080016f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f8:	d3f9      	bcc.n	80016ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016fc:	4c0a      	ldr	r4, [pc, #40]	; (8001728 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001700:	e001      	b.n	8001706 <LoopFillZerobss>

08001702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001704:	3204      	adds	r2, #4

08001706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001708:	d3fb      	bcc.n	8001702 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800170a:	f7ff ffe4 	bl	80016d6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800170e:	f001 fd15 	bl	800313c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001712:	f7ff fb59 	bl	8000dc8 <main>
  bx lr
 8001716:	4770      	bx	lr
  ldr r0, =_sdata
 8001718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800171c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001720:	08003270 	.word	0x08003270
  ldr r2, =_sbss
 8001724:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001728:	20000174 	.word	0x20000174

0800172c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800172c:	e7fe      	b.n	800172c <ADC1_2_IRQHandler>
	...

08001730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_Init+0x28>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <HAL_Init+0x28>)
 800173a:	f043 0310 	orr.w	r3, r3, #16
 800173e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001740:	2003      	movs	r0, #3
 8001742:	f000 fc4f 	bl	8001fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001746:	2000      	movs	r0, #0
 8001748:	f000 f808 	bl	800175c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800174c:	f7ff feba 	bl	80014c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40022000 	.word	0x40022000

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_InitTick+0x54>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_InitTick+0x58>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001772:	fbb3 f3f1 	udiv	r3, r3, r1
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 fc59 	bl	8002032 <HAL_SYSTICK_Config>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00e      	b.n	80017a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d80a      	bhi.n	80017a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001790:	2200      	movs	r2, #0
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f000 fc2f 	bl	8001ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800179c:	4a06      	ldr	r2, [pc, #24]	; (80017b8 <HAL_InitTick+0x5c>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000008 	.word	0x20000008
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_IncTick+0x1c>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_IncTick+0x20>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a03      	ldr	r2, [pc, #12]	; (80017dc <HAL_IncTick+0x20>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr
 80017d8:	20000008 	.word	0x20000008
 80017dc:	20000170 	.word	0x20000170

080017e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return uwTick;
 80017e4:	4b02      	ldr	r3, [pc, #8]	; (80017f0 <HAL_GetTick+0x10>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	20000170 	.word	0x20000170

080017f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017fc:	f7ff fff0 	bl	80017e0 <HAL_GetTick>
 8001800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800180c:	d005      	beq.n	800181a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_Delay+0x40>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4413      	add	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800181a:	bf00      	nop
 800181c:	f7ff ffe0 	bl	80017e0 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	429a      	cmp	r2, r3
 800182a:	d8f7      	bhi.n	800181c <HAL_Delay+0x28>
  {
  }
}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000008 	.word	0x20000008

08001838 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e0be      	b.n	80019d8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	2b00      	cmp	r3, #0
 8001866:	d109      	bne.n	800187c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fe56 	bl	8001528 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 fabf 	bl	8001e00 <ADC_ConversionStop_Disable>
 8001882:	4603      	mov	r3, r0
 8001884:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	2b00      	cmp	r3, #0
 8001890:	f040 8099 	bne.w	80019c6 <HAL_ADC_Init+0x18e>
 8001894:	7dfb      	ldrb	r3, [r7, #23]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f040 8095 	bne.w	80019c6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018a4:	f023 0302 	bic.w	r3, r3, #2
 80018a8:	f043 0202 	orr.w	r2, r3, #2
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7b1b      	ldrb	r3, [r3, #12]
 80018be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018d0:	d003      	beq.n	80018da <HAL_ADC_Init+0xa2>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d102      	bne.n	80018e0 <HAL_ADC_Init+0xa8>
 80018da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018de:	e000      	b.n	80018e2 <HAL_ADC_Init+0xaa>
 80018e0:	2300      	movs	r3, #0
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7d1b      	ldrb	r3, [r3, #20]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d119      	bne.n	8001924 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7b1b      	ldrb	r3, [r3, #12]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d109      	bne.n	800190c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	035a      	lsls	r2, r3, #13
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	e00b      	b.n	8001924 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	f043 0220 	orr.w	r2, r3, #32
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	f043 0201 	orr.w	r2, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	430a      	orrs	r2, r1
 8001936:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	4b28      	ldr	r3, [pc, #160]	; (80019e0 <HAL_ADC_Init+0x1a8>)
 8001940:	4013      	ands	r3, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	68b9      	ldr	r1, [r7, #8]
 8001948:	430b      	orrs	r3, r1
 800194a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001954:	d003      	beq.n	800195e <HAL_ADC_Init+0x126>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d104      	bne.n	8001968 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	3b01      	subs	r3, #1
 8001964:	051b      	lsls	r3, r3, #20
 8001966:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	430a      	orrs	r2, r1
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <HAL_ADC_Init+0x1ac>)
 8001984:	4013      	ands	r3, r2
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	429a      	cmp	r2, r3
 800198a:	d10b      	bne.n	80019a4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	f023 0303 	bic.w	r3, r3, #3
 800199a:	f043 0201 	orr.w	r2, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019a2:	e018      	b.n	80019d6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	f023 0312 	bic.w	r3, r3, #18
 80019ac:	f043 0210 	orr.w	r2, r3, #16
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	f043 0201 	orr.w	r2, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019c4:	e007      	b.n	80019d6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ca:	f043 0210 	orr.w	r2, r3, #16
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	ffe1f7fd 	.word	0xffe1f7fd
 80019e4:	ff1f0efe 	.word	0xff1f0efe

080019e8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_ADC_Start+0x1a>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e098      	b.n	8001b34 <HAL_ADC_Start+0x14c>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f99e 	bl	8001d4c <ADC_Enable>
 8001a10:	4603      	mov	r3, r0
 8001a12:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f040 8087 	bne.w	8001b2a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a41      	ldr	r2, [pc, #260]	; (8001b3c <HAL_ADC_Start+0x154>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d105      	bne.n	8001a46 <HAL_ADC_Start+0x5e>
 8001a3a:	4b41      	ldr	r3, [pc, #260]	; (8001b40 <HAL_ADC_Start+0x158>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d115      	bne.n	8001a72 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d026      	beq.n	8001aae <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a70:	e01d      	b.n	8001aae <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a2f      	ldr	r2, [pc, #188]	; (8001b40 <HAL_ADC_Start+0x158>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d004      	beq.n	8001a92 <HAL_ADC_Start+0xaa>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a2b      	ldr	r2, [pc, #172]	; (8001b3c <HAL_ADC_Start+0x154>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d10d      	bne.n	8001aae <HAL_ADC_Start+0xc6>
 8001a92:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <HAL_ADC_Start+0x158>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d007      	beq.n	8001aae <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aa6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d006      	beq.n	8001ac8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abe:	f023 0206 	bic.w	r2, r3, #6
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ac6:	e002      	b.n	8001ace <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f06f 0202 	mvn.w	r2, #2
 8001ade:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001aea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001aee:	d113      	bne.n	8001b18 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001af4:	4a11      	ldr	r2, [pc, #68]	; (8001b3c <HAL_ADC_Start+0x154>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d105      	bne.n	8001b06 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <HAL_ADC_Start+0x158>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d108      	bne.n	8001b18 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	e00c      	b.n	8001b32 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	e003      	b.n	8001b32 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40012800 	.word	0x40012800
 8001b40:	40012400 	.word	0x40012400

08001b44 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x20>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e0dc      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x1da>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b06      	cmp	r3, #6
 8001b8a:	d81c      	bhi.n	8001bc6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3b05      	subs	r3, #5
 8001b9e:	221f      	movs	r2, #31
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4019      	ands	r1, r3
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3b05      	subs	r3, #5
 8001bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc4:	e03c      	b.n	8001c40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b0c      	cmp	r3, #12
 8001bcc:	d81c      	bhi.n	8001c08 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	3b23      	subs	r3, #35	; 0x23
 8001be0:	221f      	movs	r2, #31
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	4019      	ands	r1, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3b23      	subs	r3, #35	; 0x23
 8001bfa:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	631a      	str	r2, [r3, #48]	; 0x30
 8001c06:	e01b      	b.n	8001c40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	3b41      	subs	r3, #65	; 0x41
 8001c1a:	221f      	movs	r2, #31
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	4019      	ands	r1, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	3b41      	subs	r3, #65	; 0x41
 8001c34:	fa00 f203 	lsl.w	r2, r0, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b09      	cmp	r3, #9
 8001c46:	d91c      	bls.n	8001c82 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68d9      	ldr	r1, [r3, #12]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	3b1e      	subs	r3, #30
 8001c5a:	2207      	movs	r2, #7
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	4019      	ands	r1, r3
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	6898      	ldr	r0, [r3, #8]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	3b1e      	subs	r3, #30
 8001c74:	fa00 f203 	lsl.w	r2, r0, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	60da      	str	r2, [r3, #12]
 8001c80:	e019      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6919      	ldr	r1, [r3, #16]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	2207      	movs	r2, #7
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	4019      	ands	r1, r3
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	6898      	ldr	r0, [r3, #8]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	fa00 f203 	lsl.w	r2, r0, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b10      	cmp	r3, #16
 8001cbc:	d003      	beq.n	8001cc6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cc2:	2b11      	cmp	r3, #17
 8001cc4:	d132      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a1d      	ldr	r2, [pc, #116]	; (8001d40 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d125      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d126      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001cec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b10      	cmp	r3, #16
 8001cf4:	d11a      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_ADC_ConfigChannel+0x1e8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a13      	ldr	r2, [pc, #76]	; (8001d48 <HAL_ADC_ConfigChannel+0x1ec>)
 8001cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001d00:	0c9a      	lsrs	r2, r3, #18
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d0c:	e002      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f9      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x1b2>
 8001d1a:	e007      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	f043 0220 	orr.w	r2, r3, #32
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40012400 	.word	0x40012400
 8001d44:	20000000 	.word	0x20000000
 8001d48:	431bde83 	.word	0x431bde83

08001d4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d040      	beq.n	8001dec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f042 0201 	orr.w	r2, r2, #1
 8001d78:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <ADC_Enable+0xac>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a1f      	ldr	r2, [pc, #124]	; (8001dfc <ADC_Enable+0xb0>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	0c9b      	lsrs	r3, r3, #18
 8001d86:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d88:	e002      	b.n	8001d90 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f9      	bne.n	8001d8a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d96:	f7ff fd23 	bl	80017e0 <HAL_GetTick>
 8001d9a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d9c:	e01f      	b.n	8001dde <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d9e:	f7ff fd1f 	bl	80017e0 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d918      	bls.n	8001dde <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d011      	beq.n	8001dde <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	f043 0210 	orr.w	r2, r3, #16
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	f043 0201 	orr.w	r2, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e007      	b.n	8001dee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d1d8      	bne.n	8001d9e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	431bde83 	.word	0x431bde83

08001e00 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d12e      	bne.n	8001e78 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0201 	bic.w	r2, r2, #1
 8001e28:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e2a:	f7ff fcd9 	bl	80017e0 <HAL_GetTick>
 8001e2e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e30:	e01b      	b.n	8001e6a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e32:	f7ff fcd5 	bl	80017e0 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d914      	bls.n	8001e6a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d10d      	bne.n	8001e6a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	f043 0210 	orr.w	r2, r3, #16
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	f043 0201 	orr.w	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e007      	b.n	8001e7a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d0dc      	beq.n	8001e32 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb6:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	60d3      	str	r3, [r2, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	f003 0307 	and.w	r3, r3, #7
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	db0a      	blt.n	8001f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	490c      	ldr	r1, [pc, #48]	; (8001f34 <__NVIC_SetPriority+0x4c>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	0112      	lsls	r2, r2, #4
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f10:	e00a      	b.n	8001f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4908      	ldr	r1, [pc, #32]	; (8001f38 <__NVIC_SetPriority+0x50>)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	3b04      	subs	r3, #4
 8001f20:	0112      	lsls	r2, r2, #4
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	440b      	add	r3, r1
 8001f26:	761a      	strb	r2, [r3, #24]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000e100 	.word	0xe000e100
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f1c3 0307 	rsb	r3, r3, #7
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	bf28      	it	cs
 8001f5a:	2304      	movcs	r3, #4
 8001f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3304      	adds	r3, #4
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d902      	bls.n	8001f6c <NVIC_EncodePriority+0x30>
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3b03      	subs	r3, #3
 8001f6a:	e000      	b.n	8001f6e <NVIC_EncodePriority+0x32>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	f04f 32ff 	mov.w	r2, #4294967295
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	401a      	ands	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f84:	f04f 31ff 	mov.w	r1, #4294967295
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	43d9      	mvns	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	4313      	orrs	r3, r2
         );
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3724      	adds	r7, #36	; 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fb0:	d301      	bcc.n	8001fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e00f      	b.n	8001fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <SysTick_Config+0x40>)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fbe:	210f      	movs	r1, #15
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc4:	f7ff ff90 	bl	8001ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <SysTick_Config+0x40>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fce:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <SysTick_Config+0x40>)
 8001fd0:	2207      	movs	r2, #7
 8001fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	e000e010 	.word	0xe000e010

08001fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ff49 	bl	8001e84 <__NVIC_SetPriorityGrouping>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800200c:	f7ff ff5e 	bl	8001ecc <__NVIC_GetPriorityGrouping>
 8002010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	6978      	ldr	r0, [r7, #20]
 8002018:	f7ff ff90 	bl	8001f3c <NVIC_EncodePriority>
 800201c:	4602      	mov	r2, r0
 800201e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff5f 	bl	8001ee8 <__NVIC_SetPriority>
}
 800202a:	bf00      	nop
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ffb0 	bl	8001fa0 <SysTick_Config>
 8002040:	4603      	mov	r3, r0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800204c:	b480      	push	{r7}
 800204e:	b08b      	sub	sp, #44	; 0x2c
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002056:	2300      	movs	r3, #0
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800205a:	2300      	movs	r3, #0
 800205c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800205e:	e127      	b.n	80022b0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002060:	2201      	movs	r2, #1
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	429a      	cmp	r2, r3
 800207a:	f040 8116 	bne.w	80022aa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b12      	cmp	r3, #18
 8002084:	d034      	beq.n	80020f0 <HAL_GPIO_Init+0xa4>
 8002086:	2b12      	cmp	r3, #18
 8002088:	d80d      	bhi.n	80020a6 <HAL_GPIO_Init+0x5a>
 800208a:	2b02      	cmp	r3, #2
 800208c:	d02b      	beq.n	80020e6 <HAL_GPIO_Init+0x9a>
 800208e:	2b02      	cmp	r3, #2
 8002090:	d804      	bhi.n	800209c <HAL_GPIO_Init+0x50>
 8002092:	2b00      	cmp	r3, #0
 8002094:	d031      	beq.n	80020fa <HAL_GPIO_Init+0xae>
 8002096:	2b01      	cmp	r3, #1
 8002098:	d01c      	beq.n	80020d4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800209a:	e048      	b.n	800212e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800209c:	2b03      	cmp	r3, #3
 800209e:	d043      	beq.n	8002128 <HAL_GPIO_Init+0xdc>
 80020a0:	2b11      	cmp	r3, #17
 80020a2:	d01b      	beq.n	80020dc <HAL_GPIO_Init+0x90>
          break;
 80020a4:	e043      	b.n	800212e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020a6:	4a89      	ldr	r2, [pc, #548]	; (80022cc <HAL_GPIO_Init+0x280>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d026      	beq.n	80020fa <HAL_GPIO_Init+0xae>
 80020ac:	4a87      	ldr	r2, [pc, #540]	; (80022cc <HAL_GPIO_Init+0x280>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d806      	bhi.n	80020c0 <HAL_GPIO_Init+0x74>
 80020b2:	4a87      	ldr	r2, [pc, #540]	; (80022d0 <HAL_GPIO_Init+0x284>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d020      	beq.n	80020fa <HAL_GPIO_Init+0xae>
 80020b8:	4a86      	ldr	r2, [pc, #536]	; (80022d4 <HAL_GPIO_Init+0x288>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d01d      	beq.n	80020fa <HAL_GPIO_Init+0xae>
          break;
 80020be:	e036      	b.n	800212e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020c0:	4a85      	ldr	r2, [pc, #532]	; (80022d8 <HAL_GPIO_Init+0x28c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d019      	beq.n	80020fa <HAL_GPIO_Init+0xae>
 80020c6:	4a85      	ldr	r2, [pc, #532]	; (80022dc <HAL_GPIO_Init+0x290>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d016      	beq.n	80020fa <HAL_GPIO_Init+0xae>
 80020cc:	4a84      	ldr	r2, [pc, #528]	; (80022e0 <HAL_GPIO_Init+0x294>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <HAL_GPIO_Init+0xae>
          break;
 80020d2:	e02c      	b.n	800212e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	623b      	str	r3, [r7, #32]
          break;
 80020da:	e028      	b.n	800212e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	3304      	adds	r3, #4
 80020e2:	623b      	str	r3, [r7, #32]
          break;
 80020e4:	e023      	b.n	800212e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	3308      	adds	r3, #8
 80020ec:	623b      	str	r3, [r7, #32]
          break;
 80020ee:	e01e      	b.n	800212e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	330c      	adds	r3, #12
 80020f6:	623b      	str	r3, [r7, #32]
          break;
 80020f8:	e019      	b.n	800212e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d102      	bne.n	8002108 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002102:	2304      	movs	r3, #4
 8002104:	623b      	str	r3, [r7, #32]
          break;
 8002106:	e012      	b.n	800212e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d105      	bne.n	800211c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002110:	2308      	movs	r3, #8
 8002112:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69fa      	ldr	r2, [r7, #28]
 8002118:	611a      	str	r2, [r3, #16]
          break;
 800211a:	e008      	b.n	800212e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800211c:	2308      	movs	r3, #8
 800211e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	615a      	str	r2, [r3, #20]
          break;
 8002126:	e002      	b.n	800212e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002128:	2300      	movs	r3, #0
 800212a:	623b      	str	r3, [r7, #32]
          break;
 800212c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2bff      	cmp	r3, #255	; 0xff
 8002132:	d801      	bhi.n	8002138 <HAL_GPIO_Init+0xec>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	e001      	b.n	800213c <HAL_GPIO_Init+0xf0>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3304      	adds	r3, #4
 800213c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2bff      	cmp	r3, #255	; 0xff
 8002142:	d802      	bhi.n	800214a <HAL_GPIO_Init+0xfe>
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	e002      	b.n	8002150 <HAL_GPIO_Init+0x104>
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	3b08      	subs	r3, #8
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	210f      	movs	r1, #15
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	401a      	ands	r2, r3
 8002162:	6a39      	ldr	r1, [r7, #32]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	431a      	orrs	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 8096 	beq.w	80022aa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800217e:	4b59      	ldr	r3, [pc, #356]	; (80022e4 <HAL_GPIO_Init+0x298>)
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	4a58      	ldr	r2, [pc, #352]	; (80022e4 <HAL_GPIO_Init+0x298>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6193      	str	r3, [r2, #24]
 800218a:	4b56      	ldr	r3, [pc, #344]	; (80022e4 <HAL_GPIO_Init+0x298>)
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002196:	4a54      	ldr	r2, [pc, #336]	; (80022e8 <HAL_GPIO_Init+0x29c>)
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	089b      	lsrs	r3, r3, #2
 800219c:	3302      	adds	r3, #2
 800219e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	220f      	movs	r2, #15
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4013      	ands	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4b      	ldr	r2, [pc, #300]	; (80022ec <HAL_GPIO_Init+0x2a0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d013      	beq.n	80021ea <HAL_GPIO_Init+0x19e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4a      	ldr	r2, [pc, #296]	; (80022f0 <HAL_GPIO_Init+0x2a4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00d      	beq.n	80021e6 <HAL_GPIO_Init+0x19a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a49      	ldr	r2, [pc, #292]	; (80022f4 <HAL_GPIO_Init+0x2a8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d007      	beq.n	80021e2 <HAL_GPIO_Init+0x196>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a48      	ldr	r2, [pc, #288]	; (80022f8 <HAL_GPIO_Init+0x2ac>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d101      	bne.n	80021de <HAL_GPIO_Init+0x192>
 80021da:	2303      	movs	r3, #3
 80021dc:	e006      	b.n	80021ec <HAL_GPIO_Init+0x1a0>
 80021de:	2304      	movs	r3, #4
 80021e0:	e004      	b.n	80021ec <HAL_GPIO_Init+0x1a0>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e002      	b.n	80021ec <HAL_GPIO_Init+0x1a0>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <HAL_GPIO_Init+0x1a0>
 80021ea:	2300      	movs	r3, #0
 80021ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ee:	f002 0203 	and.w	r2, r2, #3
 80021f2:	0092      	lsls	r2, r2, #2
 80021f4:	4093      	lsls	r3, r2
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021fc:	493a      	ldr	r1, [pc, #232]	; (80022e8 <HAL_GPIO_Init+0x29c>)
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	089b      	lsrs	r3, r3, #2
 8002202:	3302      	adds	r3, #2
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d006      	beq.n	8002224 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002216:	4b39      	ldr	r3, [pc, #228]	; (80022fc <HAL_GPIO_Init+0x2b0>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	4938      	ldr	r1, [pc, #224]	; (80022fc <HAL_GPIO_Init+0x2b0>)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]
 8002222:	e006      	b.n	8002232 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002224:	4b35      	ldr	r3, [pc, #212]	; (80022fc <HAL_GPIO_Init+0x2b0>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	43db      	mvns	r3, r3
 800222c:	4933      	ldr	r1, [pc, #204]	; (80022fc <HAL_GPIO_Init+0x2b0>)
 800222e:	4013      	ands	r3, r2
 8002230:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d006      	beq.n	800224c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800223e:	4b2f      	ldr	r3, [pc, #188]	; (80022fc <HAL_GPIO_Init+0x2b0>)
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	492e      	ldr	r1, [pc, #184]	; (80022fc <HAL_GPIO_Init+0x2b0>)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]
 800224a:	e006      	b.n	800225a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800224c:	4b2b      	ldr	r3, [pc, #172]	; (80022fc <HAL_GPIO_Init+0x2b0>)
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	43db      	mvns	r3, r3
 8002254:	4929      	ldr	r1, [pc, #164]	; (80022fc <HAL_GPIO_Init+0x2b0>)
 8002256:	4013      	ands	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d006      	beq.n	8002274 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002266:	4b25      	ldr	r3, [pc, #148]	; (80022fc <HAL_GPIO_Init+0x2b0>)
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	4924      	ldr	r1, [pc, #144]	; (80022fc <HAL_GPIO_Init+0x2b0>)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
 8002272:	e006      	b.n	8002282 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002274:	4b21      	ldr	r3, [pc, #132]	; (80022fc <HAL_GPIO_Init+0x2b0>)
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	43db      	mvns	r3, r3
 800227c:	491f      	ldr	r1, [pc, #124]	; (80022fc <HAL_GPIO_Init+0x2b0>)
 800227e:	4013      	ands	r3, r2
 8002280:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d006      	beq.n	800229c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800228e:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <HAL_GPIO_Init+0x2b0>)
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	491a      	ldr	r1, [pc, #104]	; (80022fc <HAL_GPIO_Init+0x2b0>)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	60cb      	str	r3, [r1, #12]
 800229a:	e006      	b.n	80022aa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800229c:	4b17      	ldr	r3, [pc, #92]	; (80022fc <HAL_GPIO_Init+0x2b0>)
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	4915      	ldr	r1, [pc, #84]	; (80022fc <HAL_GPIO_Init+0x2b0>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	3301      	adds	r3, #1
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f47f aed0 	bne.w	8002060 <HAL_GPIO_Init+0x14>
  }
}
 80022c0:	bf00      	nop
 80022c2:	372c      	adds	r7, #44	; 0x2c
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	10210000 	.word	0x10210000
 80022d0:	10110000 	.word	0x10110000
 80022d4:	10120000 	.word	0x10120000
 80022d8:	10310000 	.word	0x10310000
 80022dc:	10320000 	.word	0x10320000
 80022e0:	10220000 	.word	0x10220000
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40010000 	.word	0x40010000
 80022ec:	40010800 	.word	0x40010800
 80022f0:	40010c00 	.word	0x40010c00
 80022f4:	40011000 	.word	0x40011000
 80022f8:	40011400 	.word	0x40011400
 80022fc:	40010400 	.word	0x40010400

08002300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	807b      	strh	r3, [r7, #2]
 800230c:	4613      	mov	r3, r2
 800230e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002310:	787b      	ldrb	r3, [r7, #1]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002316:	887a      	ldrh	r2, [r7, #2]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800231c:	e003      	b.n	8002326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800231e:	887b      	ldrh	r3, [r7, #2]
 8002320:	041a      	lsls	r2, r3, #16
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	611a      	str	r2, [r3, #16]
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e26c      	b.n	800281c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 8087 	beq.w	800245e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002350:	4b92      	ldr	r3, [pc, #584]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 030c 	and.w	r3, r3, #12
 8002358:	2b04      	cmp	r3, #4
 800235a:	d00c      	beq.n	8002376 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800235c:	4b8f      	ldr	r3, [pc, #572]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b08      	cmp	r3, #8
 8002366:	d112      	bne.n	800238e <HAL_RCC_OscConfig+0x5e>
 8002368:	4b8c      	ldr	r3, [pc, #560]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002374:	d10b      	bne.n	800238e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002376:	4b89      	ldr	r3, [pc, #548]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d06c      	beq.n	800245c <HAL_RCC_OscConfig+0x12c>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d168      	bne.n	800245c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e246      	b.n	800281c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002396:	d106      	bne.n	80023a6 <HAL_RCC_OscConfig+0x76>
 8002398:	4b80      	ldr	r3, [pc, #512]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a7f      	ldr	r2, [pc, #508]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 800239e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	e02e      	b.n	8002404 <HAL_RCC_OscConfig+0xd4>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x98>
 80023ae:	4b7b      	ldr	r3, [pc, #492]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a7a      	ldr	r2, [pc, #488]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 80023b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b78      	ldr	r3, [pc, #480]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a77      	ldr	r2, [pc, #476]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 80023c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e01d      	b.n	8002404 <HAL_RCC_OscConfig+0xd4>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0xbc>
 80023d2:	4b72      	ldr	r3, [pc, #456]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a71      	ldr	r2, [pc, #452]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 80023d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	4b6f      	ldr	r3, [pc, #444]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a6e      	ldr	r2, [pc, #440]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e00b      	b.n	8002404 <HAL_RCC_OscConfig+0xd4>
 80023ec:	4b6b      	ldr	r3, [pc, #428]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a6a      	ldr	r2, [pc, #424]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 80023f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	4b68      	ldr	r3, [pc, #416]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a67      	ldr	r2, [pc, #412]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 80023fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002402:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d013      	beq.n	8002434 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7ff f9e8 	bl	80017e0 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002414:	f7ff f9e4 	bl	80017e0 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	; 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e1fa      	b.n	800281c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	4b5d      	ldr	r3, [pc, #372]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0xe4>
 8002432:	e014      	b.n	800245e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7ff f9d4 	bl	80017e0 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800243c:	f7ff f9d0 	bl	80017e0 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	; 0x64
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e1e6      	b.n	800281c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244e:	4b53      	ldr	r3, [pc, #332]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x10c>
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d063      	beq.n	8002532 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800246a:	4b4c      	ldr	r3, [pc, #304]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00b      	beq.n	800248e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002476:	4b49      	ldr	r3, [pc, #292]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b08      	cmp	r3, #8
 8002480:	d11c      	bne.n	80024bc <HAL_RCC_OscConfig+0x18c>
 8002482:	4b46      	ldr	r3, [pc, #280]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d116      	bne.n	80024bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248e:	4b43      	ldr	r3, [pc, #268]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_RCC_OscConfig+0x176>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d001      	beq.n	80024a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e1ba      	b.n	800281c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a6:	4b3d      	ldr	r3, [pc, #244]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4939      	ldr	r1, [pc, #228]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ba:	e03a      	b.n	8002532 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d020      	beq.n	8002506 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c4:	4b36      	ldr	r3, [pc, #216]	; (80025a0 <HAL_RCC_OscConfig+0x270>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7ff f989 	bl	80017e0 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d2:	f7ff f985 	bl	80017e0 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e19b      	b.n	800281c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e4:	4b2d      	ldr	r3, [pc, #180]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f0:	4b2a      	ldr	r3, [pc, #168]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4927      	ldr	r1, [pc, #156]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]
 8002504:	e015      	b.n	8002532 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002506:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <HAL_RCC_OscConfig+0x270>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7ff f968 	bl	80017e0 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002514:	f7ff f964 	bl	80017e0 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e17a      	b.n	800281c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d03a      	beq.n	80025b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d019      	beq.n	800257a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002546:	4b17      	ldr	r3, [pc, #92]	; (80025a4 <HAL_RCC_OscConfig+0x274>)
 8002548:	2201      	movs	r2, #1
 800254a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254c:	f7ff f948 	bl	80017e0 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002554:	f7ff f944 	bl	80017e0 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e15a      	b.n	800281c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002566:	4b0d      	ldr	r3, [pc, #52]	; (800259c <HAL_RCC_OscConfig+0x26c>)
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002572:	2001      	movs	r0, #1
 8002574:	f000 faa8 	bl	8002ac8 <RCC_Delay>
 8002578:	e01c      	b.n	80025b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <HAL_RCC_OscConfig+0x274>)
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002580:	f7ff f92e 	bl	80017e0 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002586:	e00f      	b.n	80025a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002588:	f7ff f92a 	bl	80017e0 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d908      	bls.n	80025a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e140      	b.n	800281c <HAL_RCC_OscConfig+0x4ec>
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
 80025a0:	42420000 	.word	0x42420000
 80025a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a8:	4b9e      	ldr	r3, [pc, #632]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1e9      	bne.n	8002588 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80a6 	beq.w	800270e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c2:	2300      	movs	r3, #0
 80025c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c6:	4b97      	ldr	r3, [pc, #604]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10d      	bne.n	80025ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d2:	4b94      	ldr	r3, [pc, #592]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	4a93      	ldr	r2, [pc, #588]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 80025d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025dc:	61d3      	str	r3, [r2, #28]
 80025de:	4b91      	ldr	r3, [pc, #580]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ea:	2301      	movs	r3, #1
 80025ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ee:	4b8e      	ldr	r3, [pc, #568]	; (8002828 <HAL_RCC_OscConfig+0x4f8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d118      	bne.n	800262c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fa:	4b8b      	ldr	r3, [pc, #556]	; (8002828 <HAL_RCC_OscConfig+0x4f8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a8a      	ldr	r2, [pc, #552]	; (8002828 <HAL_RCC_OscConfig+0x4f8>)
 8002600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002606:	f7ff f8eb 	bl	80017e0 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260e:	f7ff f8e7 	bl	80017e0 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b64      	cmp	r3, #100	; 0x64
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0fd      	b.n	800281c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002620:	4b81      	ldr	r3, [pc, #516]	; (8002828 <HAL_RCC_OscConfig+0x4f8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x312>
 8002634:	4b7b      	ldr	r3, [pc, #492]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	4a7a      	ldr	r2, [pc, #488]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6213      	str	r3, [r2, #32]
 8002640:	e02d      	b.n	800269e <HAL_RCC_OscConfig+0x36e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0x334>
 800264a:	4b76      	ldr	r3, [pc, #472]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	4a75      	ldr	r2, [pc, #468]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6213      	str	r3, [r2, #32]
 8002656:	4b73      	ldr	r3, [pc, #460]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	4a72      	ldr	r2, [pc, #456]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6213      	str	r3, [r2, #32]
 8002662:	e01c      	b.n	800269e <HAL_RCC_OscConfig+0x36e>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2b05      	cmp	r3, #5
 800266a:	d10c      	bne.n	8002686 <HAL_RCC_OscConfig+0x356>
 800266c:	4b6d      	ldr	r3, [pc, #436]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	4a6c      	ldr	r2, [pc, #432]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 8002672:	f043 0304 	orr.w	r3, r3, #4
 8002676:	6213      	str	r3, [r2, #32]
 8002678:	4b6a      	ldr	r3, [pc, #424]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4a69      	ldr	r2, [pc, #420]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6213      	str	r3, [r2, #32]
 8002684:	e00b      	b.n	800269e <HAL_RCC_OscConfig+0x36e>
 8002686:	4b67      	ldr	r3, [pc, #412]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	4a66      	ldr	r2, [pc, #408]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	6213      	str	r3, [r2, #32]
 8002692:	4b64      	ldr	r3, [pc, #400]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	4a63      	ldr	r2, [pc, #396]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 8002698:	f023 0304 	bic.w	r3, r3, #4
 800269c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d015      	beq.n	80026d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a6:	f7ff f89b 	bl	80017e0 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ac:	e00a      	b.n	80026c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ae:	f7ff f897 	bl	80017e0 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026bc:	4293      	cmp	r3, r2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e0ab      	b.n	800281c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c4:	4b57      	ldr	r3, [pc, #348]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0ee      	beq.n	80026ae <HAL_RCC_OscConfig+0x37e>
 80026d0:	e014      	b.n	80026fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d2:	f7ff f885 	bl	80017e0 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026da:	f7ff f881 	bl	80017e0 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e095      	b.n	800281c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f0:	4b4c      	ldr	r3, [pc, #304]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1ee      	bne.n	80026da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d105      	bne.n	800270e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002702:	4b48      	ldr	r3, [pc, #288]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	4a47      	ldr	r2, [pc, #284]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 8002708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800270c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 8081 	beq.w	800281a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002718:	4b42      	ldr	r3, [pc, #264]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 030c 	and.w	r3, r3, #12
 8002720:	2b08      	cmp	r3, #8
 8002722:	d061      	beq.n	80027e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d146      	bne.n	80027ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272c:	4b3f      	ldr	r3, [pc, #252]	; (800282c <HAL_RCC_OscConfig+0x4fc>)
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002732:	f7ff f855 	bl	80017e0 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273a:	f7ff f851 	bl	80017e0 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e067      	b.n	800281c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800274c:	4b35      	ldr	r3, [pc, #212]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f0      	bne.n	800273a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002760:	d108      	bne.n	8002774 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002762:	4b30      	ldr	r3, [pc, #192]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	492d      	ldr	r1, [pc, #180]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002774:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a19      	ldr	r1, [r3, #32]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	430b      	orrs	r3, r1
 8002786:	4927      	ldr	r1, [pc, #156]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800278c:	4b27      	ldr	r3, [pc, #156]	; (800282c <HAL_RCC_OscConfig+0x4fc>)
 800278e:	2201      	movs	r2, #1
 8002790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002792:	f7ff f825 	bl	80017e0 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279a:	f7ff f821 	bl	80017e0 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e037      	b.n	800281c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027ac:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0x46a>
 80027b8:	e02f      	b.n	800281a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ba:	4b1c      	ldr	r3, [pc, #112]	; (800282c <HAL_RCC_OscConfig+0x4fc>)
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7ff f80e 	bl	80017e0 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c8:	f7ff f80a 	bl	80017e0 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e020      	b.n	800281c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x498>
 80027e6:	e018      	b.n	800281a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e013      	b.n	800281c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_RCC_OscConfig+0x4f4>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	429a      	cmp	r2, r3
 8002806:	d106      	bne.n	8002816 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002812:	429a      	cmp	r2, r3
 8002814:	d001      	beq.n	800281a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40021000 	.word	0x40021000
 8002828:	40007000 	.word	0x40007000
 800282c:	42420060 	.word	0x42420060

08002830 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0d0      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002844:	4b6a      	ldr	r3, [pc, #424]	; (80029f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d910      	bls.n	8002874 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002852:	4b67      	ldr	r3, [pc, #412]	; (80029f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 0207 	bic.w	r2, r3, #7
 800285a:	4965      	ldr	r1, [pc, #404]	; (80029f0 <HAL_RCC_ClockConfig+0x1c0>)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	4313      	orrs	r3, r2
 8002860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002862:	4b63      	ldr	r3, [pc, #396]	; (80029f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d001      	beq.n	8002874 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0b8      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d020      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800288c:	4b59      	ldr	r3, [pc, #356]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	4a58      	ldr	r2, [pc, #352]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002896:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028a4:	4b53      	ldr	r3, [pc, #332]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4a52      	ldr	r2, [pc, #328]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b0:	4b50      	ldr	r3, [pc, #320]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	494d      	ldr	r1, [pc, #308]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d040      	beq.n	8002950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d107      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d6:	4b47      	ldr	r3, [pc, #284]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d115      	bne.n	800290e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e07f      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d107      	bne.n	80028fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ee:	4b41      	ldr	r3, [pc, #260]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d109      	bne.n	800290e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e073      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fe:	4b3d      	ldr	r3, [pc, #244]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e06b      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800290e:	4b39      	ldr	r3, [pc, #228]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f023 0203 	bic.w	r2, r3, #3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4936      	ldr	r1, [pc, #216]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002920:	f7fe ff5e 	bl	80017e0 <HAL_GetTick>
 8002924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002926:	e00a      	b.n	800293e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002928:	f7fe ff5a 	bl	80017e0 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	f241 3288 	movw	r2, #5000	; 0x1388
 8002936:	4293      	cmp	r3, r2
 8002938:	d901      	bls.n	800293e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e053      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293e:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 020c 	and.w	r2, r3, #12
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	429a      	cmp	r2, r3
 800294e:	d1eb      	bne.n	8002928 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002950:	4b27      	ldr	r3, [pc, #156]	; (80029f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d210      	bcs.n	8002980 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295e:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 0207 	bic.w	r2, r3, #7
 8002966:	4922      	ldr	r1, [pc, #136]	; (80029f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800296e:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d001      	beq.n	8002980 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e032      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4916      	ldr	r1, [pc, #88]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029aa:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	490e      	ldr	r1, [pc, #56]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029be:	f000 f821 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 80029c2:	4601      	mov	r1, r0
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <HAL_RCC_ClockConfig+0x1c8>)
 80029d0:	5cd3      	ldrb	r3, [r2, r3]
 80029d2:	fa21 f303 	lsr.w	r3, r1, r3
 80029d6:	4a09      	ldr	r2, [pc, #36]	; (80029fc <HAL_RCC_ClockConfig+0x1cc>)
 80029d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <HAL_RCC_ClockConfig+0x1d0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe febc 	bl	800175c <HAL_InitTick>

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40022000 	.word	0x40022000
 80029f4:	40021000 	.word	0x40021000
 80029f8:	08003258 	.word	0x08003258
 80029fc:	20000000 	.word	0x20000000
 8002a00:	20000004 	.word	0x20000004

08002a04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a04:	b490      	push	{r4, r7}
 8002a06:	b08a      	sub	sp, #40	; 0x28
 8002a08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a0a:	4b2a      	ldr	r3, [pc, #168]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a0c:	1d3c      	adds	r4, r7, #4
 8002a0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a14:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61bb      	str	r3, [r7, #24]
 8002a22:	2300      	movs	r3, #0
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a2e:	4b23      	ldr	r3, [pc, #140]	; (8002abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d002      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0x40>
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d003      	beq.n	8002a4a <HAL_RCC_GetSysClockFreq+0x46>
 8002a42:	e02d      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a44:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a46:	623b      	str	r3, [r7, #32]
      break;
 8002a48:	e02d      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	0c9b      	lsrs	r3, r3, #18
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a56:	4413      	add	r3, r2
 8002a58:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a5c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d013      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	0c5b      	lsrs	r3, r3, #17
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a76:	4413      	add	r3, r2
 8002a78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a7c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	4a0f      	ldr	r2, [pc, #60]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a82:	fb02 f203 	mul.w	r2, r2, r3
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8e:	e004      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	4a0c      	ldr	r2, [pc, #48]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a94:	fb02 f303 	mul.w	r3, r2, r3
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	623b      	str	r3, [r7, #32]
      break;
 8002a9e:	e002      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002aa2:	623b      	str	r3, [r7, #32]
      break;
 8002aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3728      	adds	r7, #40	; 0x28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc90      	pop	{r4, r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	08003244 	.word	0x08003244
 8002ab8:	08003254 	.word	0x08003254
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	007a1200 	.word	0x007a1200
 8002ac4:	003d0900 	.word	0x003d0900

08002ac8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <RCC_Delay+0x34>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0a      	ldr	r2, [pc, #40]	; (8002b00 <RCC_Delay+0x38>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	0a5b      	lsrs	r3, r3, #9
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	fb02 f303 	mul.w	r3, r2, r3
 8002ae2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ae4:	bf00      	nop
  }
  while (Delay --);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1e5a      	subs	r2, r3, #1
 8002aea:	60fa      	str	r2, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f9      	bne.n	8002ae4 <RCC_Delay+0x1c>
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20000000 	.word	0x20000000
 8002b00:	10624dd3 	.word	0x10624dd3

08002b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d07d      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b20:	2300      	movs	r3, #0
 8002b22:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b24:	4b4f      	ldr	r3, [pc, #316]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10d      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b30:	4b4c      	ldr	r3, [pc, #304]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	4a4b      	ldr	r2, [pc, #300]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	61d3      	str	r3, [r2, #28]
 8002b3c:	4b49      	ldr	r3, [pc, #292]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	4b46      	ldr	r3, [pc, #280]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d118      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b58:	4b43      	ldr	r3, [pc, #268]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a42      	ldr	r2, [pc, #264]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b64:	f7fe fe3c 	bl	80017e0 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6a:	e008      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6c:	f7fe fe38 	bl	80017e0 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	; 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e06d      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7e:	4b3a      	ldr	r3, [pc, #232]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b8a:	4b36      	ldr	r3, [pc, #216]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d02e      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d027      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ba8:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bb2:	4b2e      	ldr	r3, [pc, #184]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bb8:	4b2c      	ldr	r3, [pc, #176]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bbe:	4a29      	ldr	r2, [pc, #164]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d014      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7fe fe07 	bl	80017e0 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd4:	e00a      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd6:	f7fe fe03 	bl	80017e0 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d901      	bls.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e036      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bec:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0ee      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4917      	ldr	r1, [pc, #92]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c0a:	7dfb      	ldrb	r3, [r7, #23]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d105      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c10:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	4a13      	ldr	r2, [pc, #76]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c28:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	490b      	ldr	r1, [pc, #44]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c46:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	4904      	ldr	r1, [pc, #16]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40007000 	.word	0x40007000
 8002c6c:	42420440 	.word	0x42420440

08002c70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e076      	b.n	8002d70 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d108      	bne.n	8002c9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c92:	d009      	beq.n	8002ca8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	61da      	str	r2, [r3, #28]
 8002c9a:	e005      	b.n	8002ca8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fe fc96 	bl	80015f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2c:	ea42 0103 	orr.w	r1, r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	0c1a      	lsrs	r2, r3, #16
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f002 0204 	and.w	r2, r2, #4
 8002d4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69da      	ldr	r2, [r3, #28]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	4613      	mov	r3, r2
 8002d86:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_SPI_Transmit+0x22>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e126      	b.n	8002fe8 <HAL_SPI_Transmit+0x270>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002da2:	f7fe fd1d 	bl	80017e0 <HAL_GetTick>
 8002da6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d002      	beq.n	8002dbe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002db8:	2302      	movs	r3, #2
 8002dba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dbc:	e10b      	b.n	8002fd6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <HAL_SPI_Transmit+0x52>
 8002dc4:	88fb      	ldrh	r3, [r7, #6]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d102      	bne.n	8002dd0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dce:	e102      	b.n	8002fd6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	88fa      	ldrh	r2, [r7, #6]
 8002de8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	88fa      	ldrh	r2, [r7, #6]
 8002dee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e16:	d10f      	bne.n	8002e38 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e42:	2b40      	cmp	r3, #64	; 0x40
 8002e44:	d007      	beq.n	8002e56 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e5e:	d14b      	bne.n	8002ef8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <HAL_SPI_Transmit+0xf6>
 8002e68:	8afb      	ldrh	r3, [r7, #22]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d13e      	bne.n	8002eec <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	881a      	ldrh	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	1c9a      	adds	r2, r3, #2
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e92:	e02b      	b.n	8002eec <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d112      	bne.n	8002ec8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	881a      	ldrh	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	1c9a      	adds	r2, r3, #2
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ec6:	e011      	b.n	8002eec <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ec8:	f7fe fc8a 	bl	80017e0 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d803      	bhi.n	8002ee0 <HAL_SPI_Transmit+0x168>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ede:	d102      	bne.n	8002ee6 <HAL_SPI_Transmit+0x16e>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d102      	bne.n	8002eec <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002eea:	e074      	b.n	8002fd6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1ce      	bne.n	8002e94 <HAL_SPI_Transmit+0x11c>
 8002ef6:	e04c      	b.n	8002f92 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <HAL_SPI_Transmit+0x18e>
 8002f00:	8afb      	ldrh	r3, [r7, #22]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d140      	bne.n	8002f88 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	330c      	adds	r3, #12
 8002f10:	7812      	ldrb	r2, [r2, #0]
 8002f12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f2c:	e02c      	b.n	8002f88 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d113      	bne.n	8002f64 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	330c      	adds	r3, #12
 8002f46:	7812      	ldrb	r2, [r2, #0]
 8002f48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f62:	e011      	b.n	8002f88 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f64:	f7fe fc3c 	bl	80017e0 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d803      	bhi.n	8002f7c <HAL_SPI_Transmit+0x204>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7a:	d102      	bne.n	8002f82 <HAL_SPI_Transmit+0x20a>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d102      	bne.n	8002f88 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f86:	e026      	b.n	8002fd6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1cd      	bne.n	8002f2e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	6839      	ldr	r1, [r7, #0]
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f8b2 	bl	8003100 <SPI_EndRxTxTransaction>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10a      	bne.n	8002fc6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	77fb      	strb	r3, [r7, #31]
 8002fd2:	e000      	b.n	8002fd6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002fd4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fe6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3720      	adds	r7, #32
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003000:	f7fe fbee 	bl	80017e0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	4413      	add	r3, r2
 800300e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003010:	f7fe fbe6 	bl	80017e0 <HAL_GetTick>
 8003014:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003016:	4b39      	ldr	r3, [pc, #228]	; (80030fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	015b      	lsls	r3, r3, #5
 800301c:	0d1b      	lsrs	r3, r3, #20
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	fb02 f303 	mul.w	r3, r2, r3
 8003024:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003026:	e054      	b.n	80030d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302e:	d050      	beq.n	80030d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003030:	f7fe fbd6 	bl	80017e0 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	429a      	cmp	r2, r3
 800303e:	d902      	bls.n	8003046 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d13d      	bne.n	80030c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003054:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800305e:	d111      	bne.n	8003084 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003068:	d004      	beq.n	8003074 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003072:	d107      	bne.n	8003084 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003082:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800308c:	d10f      	bne.n	80030ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e017      	b.n	80030f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4013      	ands	r3, r2
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	429a      	cmp	r2, r3
 80030e0:	bf0c      	ite	eq
 80030e2:	2301      	moveq	r3, #1
 80030e4:	2300      	movne	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d19b      	bne.n	8003028 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3720      	adds	r7, #32
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000000 	.word	0x20000000

08003100 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af02      	add	r7, sp, #8
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2200      	movs	r2, #0
 8003114:	2180      	movs	r1, #128	; 0x80
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7ff ff6a 	bl	8002ff0 <SPI_WaitFlagStateUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d007      	beq.n	8003132 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003126:	f043 0220 	orr.w	r2, r3, #32
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e000      	b.n	8003134 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <__libc_init_array>:
 800313c:	b570      	push	{r4, r5, r6, lr}
 800313e:	2500      	movs	r5, #0
 8003140:	4e0c      	ldr	r6, [pc, #48]	; (8003174 <__libc_init_array+0x38>)
 8003142:	4c0d      	ldr	r4, [pc, #52]	; (8003178 <__libc_init_array+0x3c>)
 8003144:	1ba4      	subs	r4, r4, r6
 8003146:	10a4      	asrs	r4, r4, #2
 8003148:	42a5      	cmp	r5, r4
 800314a:	d109      	bne.n	8003160 <__libc_init_array+0x24>
 800314c:	f000 f822 	bl	8003194 <_init>
 8003150:	2500      	movs	r5, #0
 8003152:	4e0a      	ldr	r6, [pc, #40]	; (800317c <__libc_init_array+0x40>)
 8003154:	4c0a      	ldr	r4, [pc, #40]	; (8003180 <__libc_init_array+0x44>)
 8003156:	1ba4      	subs	r4, r4, r6
 8003158:	10a4      	asrs	r4, r4, #2
 800315a:	42a5      	cmp	r5, r4
 800315c:	d105      	bne.n	800316a <__libc_init_array+0x2e>
 800315e:	bd70      	pop	{r4, r5, r6, pc}
 8003160:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003164:	4798      	blx	r3
 8003166:	3501      	adds	r5, #1
 8003168:	e7ee      	b.n	8003148 <__libc_init_array+0xc>
 800316a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800316e:	4798      	blx	r3
 8003170:	3501      	adds	r5, #1
 8003172:	e7f2      	b.n	800315a <__libc_init_array+0x1e>
 8003174:	08003268 	.word	0x08003268
 8003178:	08003268 	.word	0x08003268
 800317c:	08003268 	.word	0x08003268
 8003180:	0800326c 	.word	0x0800326c

08003184 <memset>:
 8003184:	4603      	mov	r3, r0
 8003186:	4402      	add	r2, r0
 8003188:	4293      	cmp	r3, r2
 800318a:	d100      	bne.n	800318e <memset+0xa>
 800318c:	4770      	bx	lr
 800318e:	f803 1b01 	strb.w	r1, [r3], #1
 8003192:	e7f9      	b.n	8003188 <memset+0x4>

08003194 <_init>:
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003196:	bf00      	nop
 8003198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319a:	bc08      	pop	{r3}
 800319c:	469e      	mov	lr, r3
 800319e:	4770      	bx	lr

080031a0 <_fini>:
 80031a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a2:	bf00      	nop
 80031a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a6:	bc08      	pop	{r3}
 80031a8:	469e      	mov	lr, r3
 80031aa:	4770      	bx	lr
